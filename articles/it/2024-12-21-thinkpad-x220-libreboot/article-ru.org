#+BEGIN_EXPORT html
---
layout: post
title: Как я заменил BIOS в Thinkpad X220 свободной прошивкой
category: it
date: 2024-12-21
lang: ru
comments: false
hidden:
  - related_posts
tags: thinkpad
image: /assets/static/header-libreboot.jpg
banner:
  image: /assets/static/header-libreboot.jpg
  opacity: 0.6
summary: Замена BIOS во Thinkpad X220 на Libreboot
---
#+END_EXPORT

Предполагаю, практически всем читателям моего блога известно, что одна из
первых программ запускаемых при старте компьютера — это BIOS. Обычно всё что с
ним можно сделать — зайти в меню с настройками и что-нибудь там поменять:
порядок загрузки с носителей, дату/время, различные настройки периферийных
устройств и так далее. Либо, при определённой доле везения, возможно отыскать
модифицированный хакерами BIOS, который добавляет новые функции или убирает
ненужные ограничения, и прошить его вместо оригинального (не имея возможности
хотя бы посмотреть, что там внутри, без навыков reverse engineering'а). К
сожалению, исходные коды BIOS закрыты и в деле инициализации /своего/ компьютера
приходится полагаться на милость нескольких корпораций, которые разрабатывают
BIOS'ы (например, [[https://en.wikipedia.org/wiki/American_Megatrends][AMI]] или [[https://en.wikipedia.org/wiki/Award_Software][Award Software International]]) и вендоров вашего
железа.

Пока компьютер используется «как есть», особых проблем это не вызывает. Но,
как это обычно бывает с проприетарным ПО, любой шаг вправо или влево приводит
к необходимости применения таких переподвывертов, по сравнению с которыми
сборка собственного ядра Linux из исходников покажется детской шалостью.

В моём случае, когда я модифицировал свой Thinkpad X220, обновив ряд
компонентов ноутбука и припаяв плату расширения для нового 2K-экрана — BIOS
превратился в проблему. Во-первых, whitelist от Lenovo просто не позволял мне
использовать новую периферию, потому что она «не была одобрена
производителем»[fn:manufacturer_approve]. Во-вторых, оригинальный
проприетарный BIOS был сделан в расчёте на то, что к ноутбуку *всегда* будет
подключен его родной экран по шине LVDS, поэтому его интерфейс отображается
только на этом экране, даже если подключить второй дисплей через Display Port
(или если подключить дисплей через припаянную к линиям DP-3 плату
расширения). Досадное упущение, видимо сделанное в расчёте на то, что
пользователь не будет модифицировать свой компьютер, удовлетворившись
возможностью поменять жёсткий диск или память на более ёмкие!

К счастью, сообщество OpenSource спешит здесь на помощь! Существует проект
[[https://www.coreboot.org/][coreboot]] — опенсорсная реализация BIOS'а для ряда материнских плат.

* Содержание                                                     :TOC_2_blog:
- [[* Coreboot][Coreboot]]
- [[* Libreboot][Libreboot]]
  - [[* Подготовка к прошивке Libreboot][Подготовка к прошивке Libreboot]]
  - [[* Получение бинарного файла Libreboot][Получение бинарного файла Libreboot]]
  - [[* Подготовка бинарника Libreboot к прошивке][Подготовка бинарника Libreboot к прошивке]]
  - [[* Прошивка готового бинарника с Libreboot][Прошивка готового бинарника с Libreboot]]
  - [[* MAC адрес][MAC адрес]]
- [[* Кастомизация libreboot][Кастомизация libreboot]]
- [[* Примечания][Примечания]]

* Coreboot
:PROPERTIES:
:CUSTOM_ID: coreboot
:END:

Coreboot изначально возник как проект, нацеленный на использование в
компьютерных кластерах — тогда он ещё назывался LinuxBIOS. Один из его авторов
(Ron Minnich) столкнулся с тем, что из-за проприетарного BIOS'а ему приходится
подключать каждую ноду самодельного кластера к KVM-свитчу, чтобы вручную
нажать на F1 и продолжить загрузку машины, если вдруг что-то пошло не так. Ron
Minnich же хотел, чтобы BIOS грузился побыстрее и не требовал
пользовательского ввода[fn:linuxbios]. Впоследствии, в проекте coreboot появилась
поддержка множества различных [[https://doc.coreboot.org/mainboard/index.html][материнских плат]] и [[https://doc.coreboot.org/soc/index.html][SoC]] — включая и материнскую
плату моего Thinkpad X220.

Я начал использовать coreboot после того как обнаружил, что оригинальный BIOS
работает только со стоковым экраном ноутбука. Если дополнительно подключить
2K-экран через припаянную плату расширения, то BIOS на этом экране не будет
показываться.

Столкнувшись с этой проблемой, я вспомнил, что множество людей, занимавшихся
модификацией своих Thinkpad'ов, зачем-то заменяли оригинальный BIOS на
coreboot. И на фотографиях их ноутбуков после успешной прошивки на экране было
что-то вроде framebuffer'а, а не простая текстовая консоль. А в документации
проекта coreboot я как раз обнаружил упоминание некоей опенсорсной библиотеки
libgfxinit, предназначенной для инициализации видео при старте компьютера. В
итоге у меня появилась надежда, что эта библиотека сможет работать с моим
экраном на шине DP-3. Особенно после того как я посмотрел её исходники...

Естественно, с первого раза ничего не получилось. Сначала, coreboot не хотел
отображаться на втором экране, с какими опциями я его ни компилировал. Потом,
я нечаянно сжёг материнскую плату ноутбука, некорректно отключив её от
аккумулятора.

С новой материнской платой я сначала сделал битую резервную копию
оригинального BIOS'а — оба его дампа имели одинаковый MD5-хэш, но одинаково
неверные данные внутри. Как я это понял? Сначала прошил в микросхему с памятью
свой старый бинарник с coreboot от первой материнской платы — посмотреть будет
ли он работать. Когда эта прошивка ожидаемо не заработала, я вернул обратно
«оригинальный» BIOS — а с ним ноутбук *внезапно* отказался запускаться. Увы, к
моменту, когда я это обнаружил, оригинальный BIOS уже был перезаписан.

Тем не менее мне удалось использовать файл с битой резервной копией для
получения бинарных блобов, которые нужны были для работы coreboot на
Thinkpad X220:
- Intel Flash Descriptor — 4 Kb с данными об остальных регионах памяти на
  чипе, включая возможность их чтения/записи CPU.
- Intel ME blob — тут какие-то данные относящиеся к Intel ME. Технология, [[https://en.wikipedia.org/wiki/Intel_Management_Engine][как
  утверждается]], полезная если нужно удалённо управлять парком машин в
  датацентре. Но на личном ноутбуке такая [[https://www.fsf.org/blogs/sysadmin/the-management-engine-an-attack-on-computer-users-freedom][дыра в безопасности]], очевидно не
  нужна — зачем мне ещё один процессор внутри CPU, на котором работает
  непонятно какая программа с закрытыми исходными кодами, даже если ноутбук
  выключен (но на материнскую плату подаётся питание) и имеющая доступ к
  DMA-контроллеру, к сетевой карте (и свой отдельный MAC адрес),
  зарезервированное место в оперативной памяти и встроенную JVM с классами для
  работы с криптографией[fn:intel_me]?

  К сожалению, без этого блоба в микросхеме памяти — ноутбук может либо не
  запуститься, либо самостоятельно выключаться спустя какое-то время, ради
  «безопасности» пользователя.
- GbE blob — конфигурация Ethernet-контроллера, включая его MAC адрес.

Собранный coreboot запустился на моём ноутбуке и даже вывел лог загрузки на
новый 2K-экран. Как я сейчас понимаю, всё дело в том, что к тому моменту
оригинальный экран был отключен от LVDS и новый экран был единственным,
который был подключен к видеоядру через DP-3.

Насколько я могу судить без знания языка Ada — coreboot (при условии, что
материнская плата исправна) при старте пробегается по всем портам,
подключенным к видеоядру и выводит на первый найденный дисплей свой
framebuffer, если =Primary= дисплей не подключен к плате:

#+CAPTION: Список видеовыходов для X220 из src/mainboard/lenovo/x220/gma-mainboard.ads
#+begin_src ada
private package GMA.Mainboard is

   ports : constant Port_List :=
     (DP1,
      DP2,
      DP3,
      HDMI1,
      HDMI2,
      HDMI3,
      Analog,
      LVDS,
      others => Disabled);

end GMA.Mainboard;
#+end_src

#+CAPTION: Инициализация видеоядра в src/drivers/intel/gma/hires_fb/gma-gfx_init.adb
#+begin_src ada
HW.GFX.GMA.Display_Probing.Scan_Ports (configs, ports);

if configs (Primary).Port /= Disabled then
   for i in Pipe_Index loop
      exit when configs (i).Port = Disabled;

      min_h := pos32'min (min_h, configs (i).Mode.H_Visible);
      min_v := pos32'min (min_v, configs (i).Mode.V_Visible);
   end loop;

   fb := configs (Primary).Framebuffer;
   fb.Width    := Width_Type (min_h);
   fb.Height   := Height_Type (min_v);
   fb.Stride   := Div_Round_Up (fb.Width, 16) * 16;
   fb.V_Stride := fb.Height;

   for i in Pipe_Index loop
      exit when configs (i).Port = Disabled;

      configs (i).Framebuffer := fb;
   end loop;
#+end_src

Поэтому, пока к LVDS (который прописан в конфигурации coreboot как primary)
был подключен оригинальный дисплей — coreboot упорно работал с ним, игнорируя
дисплей на DP-3. Стоило отключить оригинальный дисплей, как лог загрузки начал
отображаться на новом дисплее.

* Libreboot
:PROPERTIES:
:CUSTOM_ID: libreboot
:END:

Какое-то время я пользовался ноутбуком с coreboot. Но работал он не очень
стабильно — по-видимому из-за того, что именно в блобе с Intel ME, вырезанном
из битого дампа биоса, были некорректные данные. Иногда, всегда в случайные
моменты времени, ноутбук зависал и перезапустить его можно было только по
зажатию кнопки Power. Иногда он и вовсе не включался — моргал светодиодами и
подсветкой экрана и на этом всё. Именно эти симптомы описывались [[https://doc.coreboot.org/northbridge/intel/sandybridge/me_cleaner.html][в
документации coreboot]] и в разнообразных гайдах как «то что будет с вашей
системой, если вы совсем избавитесь от блоба с Intel ME».

К тому же, при сборке coreboot я указал разрешение framebuffer равное 1366x768
для своего 2K-экрана. В итоге, framebuffer отображался не на весь экран (в
X-сервере всё было ок):

#+CAPTION: Framebuffer отображался только внутри зелёной рамки
#+ATTR_HTML: :align center :alt Broken framebuffer due to wrong configuration
[[file:broken_framebuffer.jpg]]

В конечном итоге, мне всё это надоело и пришло время разбираться с
coreboot. Основной моей проблемой был навсегда утерянный BIOS от этого
ноутбука — и я не знал откуда взять «правильные» бинарные блобы с нужным
машинным кодом внутри.

Поэтому, вполне ожидаемо, что я первым делом начал читать про [[https://libreboot.org/][libreboot]]. Это
своего рода дистрибутив coreboot, который стараются собирать так, чтобы внутри
у него не было штук с закрытым исходным кодом. Если для чего-то — например для
инициализации памяти — есть работающая опенсорсная реализация, то используется
именно она. Естественно 100% открытости всего кода добиться [[https://libreboot.org/news/policy.html][не получается]], но
как я понял:
- IFD генерируется сразу в процессе сборки, специальным скриптом. Благо формат
  Intel Firmware Descriptor известен.
- Intel ME — скачивается у вендора и немедленно отключается через [[https://github.com/corna/me_cleaner][me_cleaner]].
- GbE — опять-таки генерируется «на месте» специальным скриптом.

Иными словами — оригинальный BIOS для установки Libreboot на Thinkpad X220 мне
не нужен! Всё что надо — [[https://libreboot.org/docs/install/spi.html#do-not-use-ch341a][правильный программатор]], который не сожжёт микросхему
памяти и южный мост. К счастью, у меня как раз есть китайский CH341 с
джампером для выбора нужного логического уровня (5 В TTL либо 3.3 В CMOS):

#+CAPTION: Программатор CH341 с джампером для выбора логического уровня (жёлтый, снизу)
#+ATTR_HTML: :align center :alt CH341 programmer with jumper to select logical level (at the bottom)
[[file:ch341-1.jpg]]

#+CAPTION: Китайская шелкография на плате CH341 (положение 1-2 включает CMOS logical level, 2-3: TTL level)
#+ATTR_HTML: :align center :alt 1-2 jumper position enables CMOS logical level, 2-3 enables TTL level
[[file:ch341-2.jpg]]

*Disclaimer!* Все описанные ниже действия проверялись только на моём
Thinkpad'е. Часть из них была проделана из-за определённых «исторических
предпосылок», возникших в ходе модификации этого ноутбука. В любом случае,
нужно ориентироваться сначала официальную документацию!

Итак, вооружившись отвёрткой, программатором и целым вечером свободного
времени, я принялся приближать свой ноутбук к недостижимому совершенству.

** Подготовка к прошивке Libreboot
:PROPERTIES:
:CUSTOM_ID: libreboot-preparations
:END:

*** Внимательное (нет) чтение документации
:PROPERTIES:
:CUSTOM_ID: reading-docs
:END:

Первым делом, нужно было прочитать много нужной документации на сайте проекта:
https://libreboot.org. Вот небольшой список из полезных ссылок, с помощью
которых можно составить определённое представление о том, что, как и почему
нужно делать:
- https://libreboot.org/docs/install/ — тут написано, что мой Thinkpad
  поддерживается Libreboot.
- https://libreboot.org/news/safety.html — документация по необходимым
  бинарным блобам.
- https://libreboot.org/docs/install/ivy_has_common.html — команды для
  подготовки бинарника libreboot к прошивке.
- https://libreboot.org/docs/maintain/#environmental-variables,
  https://libreboot.org/docs/build/ и https://libreboot.org/git.html —
  документация по системе сборки lbmk.

*** Сохранение MAC-адреса встроенной сетевой карты
:PROPERTIES:
:CUSTOM_ID: mac-addr-saving
:END:

Тут всё просто — поскольку этот MAC-адрес записан внутри области с GbE — он
будет стёрт при установке Libreboot. Поэтому, я просто записал вывод =ifconfig
em0= в надёжное место, чтобы не потерять свой уникальный адрес и записать его в
область с GbE, перед прошивкой Libreboot.

*** Резервная копия текущей прошивки
:PROPERTIES:
:CUSTOM_ID: coreboot-backup
:END:

Бекап текущей прошивки — это может быть единственным, что удержит ноутбук от
превращения в бесполезный чёрный кирпич, если вдруг что пойдёт не так. В моём
случае, нужна была резервная копия coreboot.

Для этого и пригодится программатор. Как я обнаружил, чтение содержимого чипа
памяти со включённого ноутбука возвращает каждый раз разные
дампы[fn:coreboot_readings].

Для начала надо:
1. Отключить ноутбук от сети.
2. Снять аккумулятор.
3. Открутить 7 винтов снизу, которые держат клавиатуру и палмрест.
4. Снять клавиатуру и палмрест.
5. Отключить батарейку RTC (и не забыть проверить напряжение на ней).
6. Отклеить уголок защитной водонепроницаемой плёнки от левого нижнего угла
   материнской платы. Под ней будет искомый чип.

Потом к обесточенному ноутбуку подключается «прищепка» от программатора:

#+CAPTION: Программатор CH341, подключенный к чипу Winbond W25Q64CV
#+ATTR_HTML: :align center :alt CH341 programmer connected to Winbond W23Q64CV
[[file:ch341_on_winbond.jpg]]

Команда для чтения содержимого чипа:
#+begin_example
sudo flashrom -p ch341a_spi -c "W25Q64BV/W25Q64CV/W25Q64FV" -r coreboot_original1.rom -V
#+end_example

И она должна выдавать примерно следующее, а не сообщения ошибках:
#+begin_example
thinkpad/libreboot % sudo flashrom -p ch341a_spi -c "W25Q64BV/W25Q64CV/W25Q64FV" -r coreboot_original1.rom -V
                                                                                                             
flashrom v1.3.0 on Linux 6.1.57-gentoo-x86_64 (x86_64)
flashrom is free software, get the source code at https://flashrom.org

Using clock_gettime for delay loops (clk_id: 1, resolution: 1ns).
flashrom was built with GCC 13.3.1 20241024, little endian
Command line (7 args): flashrom -p ch341a_spi -c W25Q64BV/W25Q64CV/W25Q64FV -r coreboot_original1.rom -V
Initializing ch341a_spi programmer
Device revision is 3.0.4
The following protocols are supported: SPI.
Probing for Winbond W25Q64BV/W25Q64CV/W25Q64FV, 8192 kB: compare_id: id1 0xef, id2 0x4017
Added layout entry 00000000 - 007fffff named complete flash
Found Winbond flash chip "W25Q64BV/W25Q64CV/W25Q64FV" (8192 kB, SPI) on ch341a_spi.
Chip status register is 0x00.
This chip may contain one-time programmable memory. flashrom cannot read
and may never be able to write it, hence it may not be able to completely
clone the contents of this chip (see man page for details).
Reading flash... done.
#+end_example

Уже потеряв один BIOS, я прочитал дамп BIOS три раза, а потом сравнил
полученные файлы — они должны были совпадать. Но, поскольку программатор был
подключен к USB-порту на лицевой панели компьютера, через концентратор внутри
системного блока, MD5-суммы не совпадали:
#+begin_example
thinkpad/libreboot % md5sum *
115b37ab22dbe43bc7ff746bf174ac1f  coreboot_original1.rom
840cc3456aa5b0b3ba96353165f2ee3e  coreboot_original2.rom
ee978f3ed5fb4aab34b1d0a79cef455c  coreboot_original3.rom
#+end_example

Стоило подключить его напрямую к USB-порту от материнской платы, как ошибки
чтения исчезли:
#+begin_example
thinkpad/libreboot % md5sum *
ee978f3ed5fb4aab34b1d0a79cef455c  coreboot_original1.rom
ee978f3ed5fb4aab34b1d0a79cef455c  coreboot_original2.rom
ee978f3ed5fb4aab34b1d0a79cef455c  coreboot_original3.rom
#+end_example

В принципе, этого достаточно для получения резервной копии, но я пошёл немного
дальше (из сентиментальных соображений) — хотелось, чтобы на материнской плате
стоял чип памяти от первой (сгоревшей) материнской платы — Macronix
MX25L6406E:

#+CAPTION: Macronix MX25L6406E
#+ATTR_HTML: :align center :alt Macronix MX25L6406E
[[file:macronix.jpg]]

Сначала я отпаял чип со старой платы за пару простых шагов:
1. При помощи паяльника смешал бессвинцовый припой на ногах чипа с обычным,
   свинцовым припоем, чтобы температура плавления этой смеси в итоге была
   ниже, чем у бессвинцового припоя.
2. Снял чип при помощи паяльного фена, разогретого до 380°С (китайских
   градусов, поэтому температура определялась на глаз по тому, насколько бодро
   фен плавит припой с катушки).

Посадочное место под чип выглядит вот так:

#+CAPTION: Посадочное место под чип памяти с BIOS на материнской плате Thinkpad X220
#+ATTR_HTML: :align center :alt BIOS chip footprint
[[file:chip_footprint.jpg]]

Четыре контактных площадки в центре очевидно не задействованы — потому что он
в корпусе SOIC 8, у которого только 8 ножек по бокам.

Таким же способом я снял чип Winbond с рабочей материнской платы и положил его
в антистатический пакетик. Теперь у меня был надежный, железный бекап, если
вдруг что пойдёт не так🙃.

Ну и потом, на всякий пожарный, я проверил свой бекап. Припаял чип от Macronix
на плату:

#+CAPTION: Чип Macronix на работающей материнской плате
#+ATTR_HTML: :align center :alt Macronix chip on the working motherboard
[[file:soldered_macronix.jpg]]

И прошил в него резервную копию coreboot, считанную ранее, при помощи команды:
#+begin_example
sudo flashrom -p ch341a_spi -c "MX25L6406E/MX25L6408E" -w coreboot_original1.rom -V
#+end_example

Которая успешно всё записала:
#+begin_example
Erase/write done.
Verifying flash... VERIFIED.
#+end_example

В итоге, ноутбук запустился, а значит старый-новый чип был успешно припаян и
резервная копия coreboot была прочитана верно.

** Получение бинарного файла Libreboot
:PROPERTIES:
:CUSTOM_ID: get-libreboot-binary
:END:

Простой путь:
1. Выбрать зеркало проекта вот тут: https://libreboot.org/download.html
2. Скачать архив с прошивкой по пути =/pub/libreboot/stable/20240612/roms= (на
   данный момент это самый последний релиз).

Путь +посложнее+ для крипто-параноиков:
1. Надо скачать GPG-ключ разработчиков для проверки подписанного архива с
   прошивкой: https://mirror.math.princeton.edu/pub/libreboot/lbkey.asc
2. С выбранного зеркала проекта нужно скачать следующие три файла для
   Thinkpad X220:
   #+begin_example
   libreboot-20240612_x220_8mb.tar.xz 
   libreboot-20240612_x220_8mb.tar.xz.sha512
   libreboot-20240612_x220_8mb.tar.xz.sig
   #+end_example
3. Потом нужно проверить SHA512 сумму у архива:
   #+begin_example
   thinkpad/libreboot % sha512sum -c libreboot-20240612_x220_8mb.tar.xz.sha512
   ./libreboot-20240612_x220_8mb.tar.xz: OK
   #+end_example
4. И последний пункт — надо импортировать GPG-ключ от разработчиков:
   #+begin_example
   thinkpad/libreboot % gpg --show-keys --with-fingerprint lbkey.asc
   pub   rsa4096 2023-12-28 [SC] [expires: 2028-12-26]
   8BB1 F7D2 8CF7 696D BF4F  7192 5C65 4067 D383 B1FF
   uid                      Leah Rowe <info@minifree.org>
   sub   rsa4096 2023-12-28 [E] [expires: 2028-12-26]
   
   thinkpad/libreboot % gpg --import lbkey.asc
   gpg: key 5C654067D383B1FF: public key "Leah Rowe <info@minifree.org>" imported
   gpg: Total number processed: 1
   gpg:               imported: 1
   #+end_example

   После выполнения первой команды нужно сравнить fingerprint ключа с тем, что
   указан [[https://libreboot.org/download.html][на странице загрузки]] — они должны совпадать. Иначе, /кто-то/ подсунул
   неверный ключ.

   Если всё ОК, то можно переходить к проверке подписи:
   #+begin_example
   thinkpad/libreboot % gpg --verify libreboot-20240612_x220_8mb.tar.xz.sig libreboot-20240612_x220_8mb.tar.xz
   gpg: Signature made Wed 12 Jun 2024 12:55:03 PM MSK
   gpg:                using RSA key 8BB1F7D28CF7696DBF4F71925C654067D383B1FF
   gpg: Good signature from "Leah Rowe <info@minifree.org>" [unknown]
   gpg: WARNING: This key is not certified with a trusted signature!
   gpg:          There is no indication that the signature belongs to the owner.
   Primary key fingerprint: 8BB1 F7D2 8CF7 696D BF4F  7192 5C65 4067 D383 B1FF
   #+end_example

** Подготовка бинарника Libreboot к прошивке
:PROPERTIES:
:CUSTOM_ID: prepare-libreboot-binary
:END:

Очевидно, полностью избавиться от всех блобов для платы от X220 на данный
момент невозможно. Тот же Intel ME имеет криптографическую подпись, которая
проверяется каждый раз при запуске процессора — если подпись неверная, то
процессор не запускается.

В то же время, поставлять проприетарный блоб с этой штукой внутри бинарника
Libreboot невозможно из-за последующих проблем с лицензией. Разработчики
выкрутились из этой ситуации, предлагая специальный скрипт который скачивает
бинарник с Intel ME и вставляет его по нужному смещению внутрь бинарника с
Libreboot. Процесс описан на сайте разработчиков, вот тут:
https://libreboot.org/docs/install/ivy_has_common.html. Ну а необходимые
скрипты лежат внутри lbmk — системы для сборки своего Libreboot, которую можно
склонировать отсюда: https://codeberg.org/libreboot/lbmk.

После установки нужных зависимостей, как описано в документации, можно сразу
скармливать скрипту скачанный tarball — он распакует бинарники из него и
встроит в каждый нужные блобы:
#+begin_example
./vendor inject libreboot-20240612_x220_8mb.tar.xz
#+end_example

Процесс не самый быстрый — lbmk будет клонировать необходимые репозитории,
собирать нужные ему утилиты и так далее. Успешное завершение будет выглядеть
примерно так:
#+begin_example
File tmp/romdir/bin/x220_8mb/seabios_withgrub_x220_8mb_libgfxinit_txtmode_usqwerty_grubfirst.rom is 8388608 bytes
File vendorfiles/xx20/me.bin is 86016 bytes
Adding vendorfiles/xx20/me.bin as the Intel ME section of tmp/romdir/bin/x220_8mb/seabios_withgrub_x220_8mb_libgfxinit_txtmode_usqwerty_grubfirst.rom
Writing new image to tmp/romdir/bin/x220_8mb/seabios_withgrub_x220_8mb_libgfxinit_txtmode_usqwerty_grubfirst.rom
ROM image successfully patched: tmp/romdir/bin/x220_8mb/seabios_withgrub_x220_8mb_libgfxinit_txtmode_usqwerty_grubfirst.rom
#+end_example

А подготовленные бинарники будут лежать в каталоге с lbmk по этому пути:
=./bin/release/x220_8mb/=.

** Прошивка готового бинарника с Libreboot
:PROPERTIES:
:CUSTOM_ID: libreboot-flashing
:END:

Из всех бинарников из архива нужно было выбрать тот, который подходит для
клавиатуры, установленной в ноутбуке:

#+CAPTION: Список бинарников с добавленными блобами
#+ATTR_HTML: :align center :alt List of binaries with added blobs
[[file:list-of-binaries.png]]

В моём случае, в ноутбуке стоит клавиатура с US-раскладкой, поэтому необходимы
вот эти два файла:
- seabios_withgrub_x220_8mb_libgfxinit_txtmode_usqwerty.rom
- seabios_withgrub_x220_8mb_libgfxinit_corebootfb_usqwerty.rom

Libreboot из первого файла будет использовать текстовый режим для вывода
информации на экран — не факт, что в этом режиме он отобразится на дисплее на
шине DP-3. А вот во втором файле используется как раз libgfxinit.

Прошивается он всё так же через программатор, командой:
#+begin_example
sudo flashrom -p ch341a_spi -c "MX25L6406E/MX25L6408E" -w seabios_withgrub_x220_8mb_libgfxinit_corebootfb_usqwerty.rom -V
#+end_example

#+ATTR_HTML: :align center :alt Flashing Libreboot
[[file:libreboot-flashing.jpg]]

После этого ноутбук наконец-то начал стабильно запускаться после каждого
включения и перестал зависать в случайные моменты времени. А загрузка системы
наконец начала происходить в полноэкранном режиме:

#+ATTR_HTML: :align center :alt Laptop booting at fullscreen
[[file:framebuffer.jpg]]

Всё остальные системы ноутбука работали как и прежде, ведь всё было настроено
как нужно ещё во времена использования coreboot:
https://eugene-andrienko.com/it/2020/09/26/thinkpad-x220-freebsd#update-2024-04-28

** MAC адрес
:PROPERTIES:
:CUSTOM_ID: mac-address
:END:

Те, кто читал документацию, могли заметить, что я не добавил свой MAC-адрес в
бинарник перед её прошивкой. В результате, у меня был забавный дефолтный
адрес:

#+ATTR_HTML: :align center :alt Default Libreboot MAC address
[[file:default-mac.png]]

Я поменял его, взяв прошитый бинарник и ещё раз использовав скрипт из lbmk:
#+begin_example
libreboot/lbmk % ./vendor inject -r bin/release/x220_8mb/seabios_withgrub_x220_8mb_libgfxinit_corebootfb_usqwerty.rom -b x220_8mb -m ██:██:██:██:██:██
#+end_example

Потом просто прошил модифицированный libreboot ещё раз в материнскую плату.

* Кастомизация libreboot
:PROPERTIES:
:CUSTOM_ID: libreboot-customization
:END:

Теперь, всё было как надо. Почти всё. Авторы libreboot, когда собирали его для
ThinkPad X220, не стали делать отдельный набор прошивок для тех, кто любит
менять местами клавиши Ctrl и Fn на клавиатуре. Какое-то время я пытался
привыкнуть к стандартному для Thinkpad расположению этих клавиш, но не
преуспел в этом.

Сначала, чтобы поменять их местами, я решил просто пересобрать Libreboot с
нужной мне опцией:
#+begin_example
Chipset:
  Swap Fn and Ctrl keys=y
#+end_example

Казалось бы, раз я уже собирал coreboot и у меня есть вся нужная документация,
то никаких проблем возникнуть не должно. Просто задам нужные настройки через
=./mk -m coreboot x220_8mb=, а потом соберу бинарник:
#+begin_example
export XBMK_THREADS=3
./mk -b coreboot x220_8mb
#+end_example

Но, *внезапно*, libreboot оказался первой опенсорсной программой за 16 лет,
которую я не смог собрать должным образом. Хотя конфигурация и сборка
проходили успешно, в итоге бинарники всегда получались с конфигурацией «по
умолчанию», от разработчиков.

К счастью, оказалось, что /некоторые/ опции можно поменять при помощи утилиты
=nvramtool= из поставки coreboot. И в списке опций была та самая, что меняет
местами клавиши:

#+begin_example
% ../../coreboot/build/util/nvramtool/nvramtool -C seabios_withgrub_x220_8mb_libgfxinit_corebootfb_usqwerty.rom -a
boot_option = Fallback
reboot_counter = 0x0
debug_level = Debug
nmi = Enable
power_on_after_fail = Disable
first_battery = Primary
bluetooth = Enable
wwan = Enable
touchpad = Enable
wlan = Enable
trackpoint = Enable
fn_ctrl_swap = Disable
sticky_fn = Disable
power_management_beeps = Disable
sata_mode = AHCI
usb_always_on = Disable
me_state = Disabled
me_state_prev = 0x0
gfx_uma_size = 224M
volume = 0x3
#+end_example

Дальше всё было так же как и в случае с установкой MAC-адреса:
1. Бинарный файл с прошивкой меняется командой:
   #+begin_example
   % ../../coreboot/build/util/nvramtool/nvramtool -C seabios_withgrub_x220_8mb_libgfxinit_corebootfb_usqwerty.rom -w fn_ctrl_swap=Enable
   #+end_example
2. И прошивается в ноутбук.

В результате клавиши переназначены и ноутбук работает по-прежнему, без
зависаний.

* Примечания
:PROPERTIES:
:CUSTOM_ID: notes
:END:

[fn:manufacturer_approve] С тех пор как IBM продала свой ноутбучный бизнес
компании Lenovo, дух старых ThinkPad'ов постепенно, но неумолимо, пропадает из
новых ноутбуков, выпускаемых под этой маркой.

В этом процессе нет ничего удивительного — обычный корпоративный
[[https://web.archive.org/web/20240208152542/https://www.ft.com/content/6fb1602d-a08b-4a8c-bac0-047b7d64aba5][enshittification]]. Одно из его проявлений — whitelist в BIOS'е Lenovo
ThinkPad X220. На материнской плате ноутбука есть два разъёма PCI Express, в
которые изначально установлены WiFi и WWAN карты (или WiFi-карта и SSD). Их
можно снять и установить какие-нибудь другие периферийные устройства,
подключаемые через шину PCI Express — аппаратное обеспечение будет работать с
этими устройствами. Но не программное обеспечение — при старте системы BIOS
«увидит», что ID устройств на шине не совпадает с его whitelist'ом, и
откажется работать с новыми «не одобренными» устройствами.

Обосновывается такое обычно тем, что пользователя якобы «защищают» от
«некачественных» third-party комплектующих. Получается, несмотря на то, что я
купил себе ноутбук — я не владею им полностью. Даже при наличии необходимых
технических навыков, я не могу заменить WiFi-карточку на более современную,
потому что производитель держит меня за идиота! Происходит именно то, о чём
много раз писал RMS в своих эссе — если в вашем устройстве есть проприетарное
ПО, то вы не владеете в полной мере вычислительными мощностями купленного
устройства и производитель может диктовать вам свои условия. Например,
вынуждать использовать оборудование только из одобренного списка.

Очевидно, +с финансовой точки зрения+ с точки зрения увеличения прибыли ряда
корпораций ради красивого отчёта перед советом акционеров — подобные
ограничения очень выгодны — покупатель ноутбука будет вынужден использовать
только те устройства, производители которых договорились о включении своих
устройств в whitelist. А когда аппаратное обеспечение устареет — ему придётся
купить новый ноутбук вместо покупки одной маленькой и заменяемой
железяки. Если же что-то сломается и запасная деталь к тому моменту пропадёт с
рынка, то ... ему опять же придётся купить новый ноутбук вместо использования
подходящей замены. Об удобстве пользователя, уменьшении количества e-waste и
т.д. в этот момент естественно никто не думает (может кроме [[https://frame.work][Framework]]).

Поэтому, в ThinkPad X230 появился whitelist для аккумуляторных батарей
(http://zmatt.net/unlocking-my-lenovo-laptop-part-1/), в ThinkPad X240 —
whitelist для дисплеев
(https://www.reddit.com/r/thinkpad/comments/dgydnf/x240_right_to_repair_no_brightness_control_after/)
и так далее. Процесс enshittifica'ции конечно же не остановился на этом:
- В ThinkPad X230 пропала семирядная клавиатура с пирамидальными кнопками — её
  заменили на шестирядную клавиатуру, убрав кнопки:
  - =Print Screen/System Request= — теперь не получится сделать скриншот
    нажатием одной кнопки и стали недоступны [[https://en.wikipedia.org/wiki/Magic_SysRq_key][magic SysRq keys]].
  - =Scroll Lock= — использовался для прокрутки вывода в текстовой консоли,
    например лога загрузки ОС (очевидно, прокрутка в bash/zsh или в tmux
    недоступна на этом этапе).
  - =Pause/Break= — её можно использовать для того, чтобы поставить приложение
    на паузу через =kill -17=:
    https://vermaden.wordpress.com/2018/09/19/freebsd-desktop-part-16-configuration-pause-any-application/
  - 2 кнопки для перехода вперёд и назад в браузере, с кодами =XF86Forward= и
    =XF86Back= — их было очень удобно использовать для переключения между
    буферами в Emacs.
- В Thinkpad X240 пропали *отдельные* кнопки для TrackPoint'а — их перенесли на
  тачпад. Изогнутый профиль левой и правой кнопок, а также рифлёная
  поверхность средней кнопки позволяли не задумываясь, на мышечной памяти
  нажимать их, зная что палец не попадёт на тачпад. С кнопками под плоской
  поверхностью тачпада уже не получится — ничто /физически/ не останавливает
  палец от скольжения дальше, на сенсорную поверхность.
  
  К тому же, руками в перчатках было удобнее нажимать именно отдельные,
  *физические* кнопки.
  
  К счастью, возмущение со стороны пользователей вернуло эти кнопки назад, но
  Lenovo вновь попыталась убрать их в [[https://en.wikipedia.org/wiki/ThinkPad_X1_series#/media/File:Gladstone_ready_for_2017_Budget.jpg][Thinkpad X1 Carbon gen 2]]. Впрочем, в
  этой модели было столько неадекватных «иННоВаЦиЙ» в области
  пользовательского ввода, что для их перечисления потребуется отдельный
  список.
- Постепенно, начиная с X200, с крышки ноутбука стали пропадать
  светодиоды. Сначала в X220 со стороны дисплея исчез индикатор NumLock (1н
  ну3ен чт1бы не печатат0 в1т так, а потом всё исправлять), индикатор сна
  (нужен, чтобы понять состояние ноутбука, если его оставили с открытой
  крышкой) и индикатор зарядки батареи (не нужен отдельный программный
  индикатор, состояние которого видно только после загрузки ОС). Потом, в X230
  пропал индикатор состояния Bluetooth (по нему можно понять, что rf
  killswitch переключен в положение off), а в X240 убрали вообще все статусные
  светодиоды со стороны дисплея (зато вернули обратно светящуюся красную точку
  в логотипе).
  
  В конечном итоге, у последнего ноутбука из X-серии —ThinkPad X13 Gen 4 нет
  ни одного статусного светодиода ни на передней, ни на задней стороне
  крышки🤷‍♂️ (кроме индикатора CapsLock).
- В X280 убрали съёмную батарею — не получится самому сменить деградировавшую
  батарею на новую, придётся нести ноутбук в сервисный центр. Также, не
  получится купить и самостоятельно поставить более ёмкую батарею.

  Неочевидный плюс от использования батареи большой ёмкости тоже пропал — тот
  же X220 можно переносить в открытом состоянии по офису, просто положив его
  на предплечье и придерживая четырьмя пальцами за выступающую часть батареи,
  чтобы ноутбук не упал.
- Заменили Display Port на HDMI.
  #+ATTR_HTML: :align center :alt Fun fact. Display port is objectively better than HDMI. Royalty-free, baby
  [[file:display-port.png]]
- Заменили круглый разъём для зарядки на прямоугольный ради уменьшения толщины
  ноутбука, но теперь у штекера только два положения, в которых его можно
  вставить. Над подсветкой для клавиатуры тоже долго издевались. То заменят
  привычный светодиод, встроенный в крышку, выдвигающейся конструкцией. То
  уберут его совсем и поставят подсветку клавиатуры «как у всех» — тогда как у
  светодиода в крышке был неоспоримый плюс: его можно было использовать для
  освещения стола в экстренных случаях.

  Аналогичная беда произошла с возможностью пристегнуть док-станцию или
  дополнительную батарею снизу ноутбука, с отдельными кнопками для регулировки
  громкости, со светодиодами, показывающими, что динамики или микрофон на мьюте
  и так далее и тому подобное...

Пока удаётся увеличивать прибыль за счёт ухудшения usability ноутбуков,
изначально спроектированных «инженерами для инженеров», за счёт простого
наращивания гигагерац и гигабайтов и за счёт копирования экстерьера MacBook'а,
продавая всё это простым пользователям как «инновации» — такие вещи будут
происходить. Уже звучат голоса за то, чтобы убрать TrackPoint из ThinkPad'ов:
«[[https://www.windowscentral.com/hardware/laptops/sorry-lenovo-but-its-time-to-kill-off-the-thinkpad-trackpoint-forever][Sorry Lenovo, but it's time to kill off the ThinkPad TrackPoint FOREVER]]» —
хотя по этой статье понятно, что человек просто не умеет в «слепую печать» и
не работал в перчатках, поэтому ему кажется, что TrackPoint это «неудобная
фигня, которая мешается».

[fn:linuxbios] https://web.archive.org/web/20120916212555/http://www.h-online.com/open/features/The-Open-Source-BIOS-is-Ten-An-interview-with-the-coreboot-developers-746525.html?view=print

[fn:intel_me] Цитата из https://libreboot.org/faq.html:

#+begin_quote
The ME consists of an ARC processor core (replaced with other processor cores
in later generations of the ME), code and data caches, a timer, and a secure
internal bus to which additional devices are connected, including a
cryptography engine, internal ROM and RAM, memory controllers, and a direct
memory access (DMA) engine to access the host operating system’s memory as
well as to reserve a region of protected external memory to supplement the
ME’s limited internal RAM. The ME also has network access with its own MAC
address through an Intel Gigabit Ethernet Controller. Its boot program, stored
on the internal ROM, loads a firmware “manifest” from the PC’s SPI flash
chip. This manifest is signed with a strong cryptographic key, which differs
between versions of the ME firmware. If the manifest isn’t signed by a
specific Intel key, the boot ROM won’t load and execute the firmware and the
ME processor core will be halted.

The ME firmware is compressed and consists of modules that are listed in the
manifest along with secure cryptographic hashes of their contents. One module
is the operating system kernel, which is based on a proprietary real-time
operating system (RTOS) kernel called “ThreadX”. The developer, Express Logic,
sells licenses and source code for ThreadX. Customers such as Intel are
forbidden from disclosing or sublicensing the ThreadX source code. Another
module is the Dynamic Application Loader (DAL), which consists of a Java
virtual machine and set of preinstalled Java classes for cryptography, secure
storage, etc. The DAL module can load and execute additional ME modules from
the PC’s HDD or SSD. The ME firmware also includes a number of native
application modules within its flash memory space, including Intel Active
Management Technology (AMT), an implementation of a Trusted Platform Module
(TPM), Intel Boot Guard, and audio and video DRM systems.
#+end_quote

[fn:coreboot_readings] Когда-то я находил объяснение этому на Reddit'е, но увы не
смог найти ссылку при написании данного поста. То что flashrom возвращает
каждый раз разные дампы coreboot при использовании =-p internal= на
Thinkpad X220 — совершенно нормально и для получения /правильной/ резервной
копии *надо* использовать программатор.
