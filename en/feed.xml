<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ru"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://eugene-andrienko.com/en/feed.xml" rel="self" type="application/atom+xml" /><link href="https://eugene-andrienko.com/en/" rel="alternate" type="text/html" hreflang="ru" /><updated>2025-06-15T13:16:51+03:00</updated><id>https://eugene-andrienko.com/feed.xml</id><title type="html">Dragon’s notes</title><subtitle>Dragon&apos;s cave with posts about IT, photography, bicycles and different DIY.</subtitle><author><name>Eugene Andrienko</name></author><entry xml:lang="en"><title type="html">Network provincialism and balkanization</title><link href="https://eugene-andrienko.com/en/it/2025/05/25/internet-slow-death.html" rel="alternate" type="text/html" title="Network provincialism and balkanization" /><published>2025-05-25T00:00:00+03:00</published><updated>2025-05-25T00:00:00+03:00</updated><id>https://eugene-andrienko.com/it/2025/05/25/internet-slow-death</id><content type="html" xml:base="https://eugene-andrienko.com/it/2025/05/25/internet-slow-death.html"><![CDATA[<pre class="example">
 ____                                   __       ___
/\  _`\                                /\ \     /\_ \
\ \ \L\ \_ __    __     __      ___ ___\ \ \____\//\ \      __
 \ \ ,__/\`'__\/'__`\ /'__`\  /' __` __`\ \ '__`\ \ \ \   /'__`\
  \ \ \/\ \ \//\  __//\ \L\.\_/\ \/\ \/\ \ \ \L\ \ \_\ \_/\  __/
   \ \_\ \ \_\\ \____\ \__/.\_\ \_\ \_\ \_\ \_,__/ /\____\ \____\
    \/_/  \/_/ \/____/\/__/\/_/\/_/\/_/\/_/\/___/  \/____/\/____/

</pre>

<p>
This post will (I hope not) become a beautiful epitaph to the international
network as we know it…
</p>

<p>
This network used to unite people. Although I was born at the end of
XX century, I missed the rise and fall of the <a href="https://en.wikipedia.org/wiki/FidoNet">FidoNet</a> (it was popular enough
in Russia after the fall of USSR and before the network equipment for coaxial
cable or twisted pair became cheaper. We called it <a href="https://neolurk.org/wiki/%D0%A4%D0%B8%D0%B4%D0%BE%D0%BD%D0%B5%D1%82">Фидонет</a>).
</p>

<p>
But I was born just in time to meet the 56k modems (I had the Acorp
Sprinter@56K), ICQ, forums (hello, phpBB), XMPP and it's transports,
Bombus<sup><a id="fnr.bombus" class="footref" href="#fn.bombus" role="doc-backlink">1</a></sup> on my Siemens C75 with 2G Internet access from Tele2 and so
on. So I remembered <i>the spirit</i> of the old Internet that really connected
people.
</p>

<p>
Things changed a bit after 201x — when the new government agency was
established. It was cringe when they blocked site with Doxygen docs and it was
funny when they blocked <code>127.0.0.1</code> and so on.
</p>

<p>
But things changed a lot after 2022 — when a <b>lot</b> of Internet-related
services started to reuse "the best practices" of breaking the connectivity
between people and breaking the <i>international</i> network itself.
</p>

<p>
Finally, in one day I decided to write this post to document the things that
were happening. That day, I read <a href="https://mastodon.bsd.cafe/@mudala/114417527646601267">a post</a> about the FreeBSD 2025 survey in
Mastodon, tried to open the attached link to the third-party site with the
survey itself, and … failed. Just because that site decided to block all
people with russian IPs. I don't know the intention of this decision,
especially in the year 2025 — in this year, I hope, almost all people
understood <i>how the things work</i> and stopped pursuing the dream that blocking
residental russian IPs could make the world a better place.
</p>

<p>
Not only I, but a lot of people met the same discrimination before and will
meet it in the future. For example, you can see <a href="https://mastodon.social/@grishka/111934602844613193">this enormously long thread</a>,
made by <a href="https://mastodon.social/@grishka">@grishka@mastodon.social</a>.
</p>

<p>
BTW, after this "incident" with the survey, <a href="https://mas.to/@evgandr/114426048680177117">I decided</a> to make a separate post
in my blog with evidence of Internet de-internationalization.
</p>

<p>
Sad to say, but this post will be constantly updated with newly found evidence
of network "balkanization".
</p>

<pre class="example">
 ____                     __
/\  _`\            __    /\ \
\ \ \L\_\  __  __ /\_\   \_\ \     __    ___     ___     __
 \ \  _\L /\ \/\ \\/\ \  /'_` \  /'__`\/' _ `\  /'___\ /'__`\
  \ \ \L\ \ \ \_/ |\ \ \/\ \L\ \/\  __//\ \/\ \/\ \__//\  __/
   \ \____/\ \___/  \ \_\ \___,_\ \____\ \_\ \_\ \____\ \____\
    \/___/  \/__/    \/_/\/__,_ /\/____/\/_/\/_/\/____/\/____/

</pre>

<p>
Let's get started. There will be no examples of the "modern" enshittified
websites that constantly spam users with ads, popups and other nonsense. A lot
of people have already written a lot about this, see for example <a href="https://garry.net/posts/the-death-of-the-web">The Death Of
The Web</a> blogpost.
</p>

<p>
I will write about sites that block access from some region(s) of our
planet. And about sites that block access from everyone not coming from some
region(s). All those made not for some kind of security, but directly to
prohibit people from the "wrong" areas to see their "precious content".
</p>

<p>
The format is simple: screenshot and a little descriptive text below, if
necessary.
</p>


<div class="figure">
<p><img src="/assets/static/2025-04-30-openculture.com.png" alt="Error 405, access denied at the openculture.com" align="center" width="80%" />
</p>
<p style="text-align: center"><i>OpenCulture is not so open — it blocks access from russian IPs with obscure message</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/2025-04-30-surveymonkey.com.png" alt="Error 403, geo block russia on the surveymonkey.com" align="center" width="80%" />
</p>
<p style="text-align: center"><i>World-wide surveys, but … if you a russian, you can't participate</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/2025-05-02-intel.com.png" alt="Opening any useful links from intel.com are prohibited just because you are in the &quot;wrong country&quot;" align="center" width="80%" />
</p>
<p style="text-align: center"><i>Wanna download drivers for an old Intel GMA X3100? How about NO?</i></p>
</div>

<p>
Translation of the text on the previous screenshot:
</p>

<blockquote>
<p>
We immediately suspended all business operations in Russia. This follows our
previous decision to suspend all deliveries to customers in Russia and
Belarus.
</p>
</blockquote>


<div class="figure">
<p><img src="/assets/static/2025-05-12-ozon.ru.png" alt="Access restricted if you try to open page from outside" align="center" width="80%" />
</p>
<p style="text-align: center"><i>Can't view the item page from the outer world. Funny, but the main page opens without problems from the same IP.</i></p>
</div>

<p>
Translation:
</p>

<blockquote>
<p>
Access is restricted. To solve the problem try this:
</p>
<ul class="org-ul">
<li>Wait and reload the page</li>
<li>Disable VPN</li>
<li>Update browser or mobile app</li>
<li>Connect to the another WiFi or mobile network</li>
<li>Restart a router</li>
</ul>
</blockquote>

<p>
Obviously, none of these items are helpful.
</p>


<div class="figure">
<p><img src="/assets/static/2025-05-21-lamoda.ru.png" alt="&quot;403 Forbidden&quot; error when opening lamoda.ru from the outer world" align="center" width="80%" />
</p>
<p style="text-align: center"><i>One of the biggest online retailers [ru] won't open from the outer world</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/2025-05-25-deviantart.com.png" alt="&quot;403 Error&quot; when opening deviantart.com through VPN" align="center" widht="80%" />
</p>
<p style="text-align: center"><i>DeviantArt returns 403 error if you connect through some sort of secure tunnel via the datacenter, not from residental IP (exposing yourself to the ISP, at least)</i></p>
</div>

<p>
<b>To be continued…</b>
</p>

<hr />
<div id="footnotes">

<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.bombus" class="footnum" href="#fnr.bombus" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Bombus — XMPP client written in Java ME for mobile phones.
</p></div></div>


</div>
</div>]]></content><author><name>Eugene Andrienko</name></author><category term="it" /><summary type="html"><![CDATA[____ __ ___ /\ _`\ /\ \ /\_ \ \ \ \L\ \_ __ __ __ ___ ___\ \ \____\//\ \ __ \ \ ,__/\`'__\/'__`\ /'__`\ /' __` __`\ \ '__`\ \ \ \ /'__`\ \ \ \/\ \ \//\ __//\ \L\.\_/\ \/\ \/\ \ \ \L\ \ \_\ \_/\ __/ \ \_\ \ \_\\ \____\ \__/.\_\ \_\ \_\ \_\ \_,__/ /\____\ \____\ \/_/ \/_/ \/____/\/__/\/_/\/_/\/_/\/_/\/___/ \/____/\/____/]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://eugene-andrienko.com/assets/static/header-network-provincialism.jpg" /><media:content medium="image" url="https://eugene-andrienko.com/assets/static/header-network-provincialism.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="en"><title type="html">My way to remove “Linuxisms” from FreeBSD</title><link href="https://eugene-andrienko.com/en/it/2025/03/30/freebsd-pkgs-wout-unwanted-deps.html" rel="alternate" type="text/html" title="My way to remove “Linuxisms” from FreeBSD" /><published>2025-03-30T00:00:00+03:00</published><updated>2025-03-30T00:00:00+03:00</updated><id>https://eugene-andrienko.com/it/2025/03/30/freebsd-pkgs-wout-unwanted-deps</id><content type="html" xml:base="https://eugene-andrienko.com/it/2025/03/30/freebsd-pkgs-wout-unwanted-deps.html"><![CDATA[<div class="outline-2">
<h2>TOC&#xa0;&#xa0;&#xa0;<span class="tag"></span></h2>
<div class="outline-text-2">
<ul class="org-ul">
<li><a href="#preamble">Preamble</a></li>
<li><a href="#poudriere-installation">Poudriere installation</a></li>
<li><a href="#removing-deps">Removing unwanted dependencies</a></li>
<li><a href="#dewaylandization">More complex examples of deWaylandization</a>
<ul class="org-ul">
<li><a href="#flavors">Ports flavors</a></li>
<li><a href="#patching-Makefile">Patching Makefile</a></li>
</ul></li>
<li><a href="#results-and-thoughts">Results and thoughts</a></li>
<li><a href="#notes">Notes</a></li>
</ul>
</div>
</div>
<div id="outline-container-preamble" class="outline-2">
<h2 id="preamble">Preamble</h2>
<div class="outline-text-2" id="text-preamble">
<p>
My everyday FreeBSD system has two good old components for graphics and
sound — the X Server and the OSS. There are simple reasons to use these
components — they are mature, they have tons of user documentation, use case
examples, etc. I also like the way these things have been used in the FreeBSD
world. Let me quote <a href="https://vermaden.wordpress.com/">vermaden</a>, who wrote well (about the OSS) in the <a href="https://vermaden.wordpress.com/2020/09/07/quare-freebsd/">Quare
FreeBSD?</a> blogpost:
</p>

<blockquote>
<p>
Not many people expect from FreeBSD to shine in that department but it shines
a lot here and not from yesterday but from decades. Remember when Linux got
rid of the old OSS subsystem with one channel and came up with ‘great’ idea to
write ALSA? I remember because I used Linux back then. Disaster is very polite
word to describe Linux audio stack back then … and then PulseAudio came and
whole Linux audio system got much worse.
</p>

<p>
&#x2026;
</p>

<p>
Lets get back to FreeBSD audio then. What FreeBSD offered? A whooping 256 OSS
channels mixed live in kernel for low latency. Everything audio related just
worked out of the box – and still works today.
</p>
</blockquote>

<p>
This is where I see the pattern. If in the Linux world there are many examples
of throwing away software that has served people for years or decades and can
(and should, I think) be updated to adapt to the changed reality (e.g.
<code>ifconfig</code>). Then in the FreeBSD world such software just … gets the necessary
updates and continues to be used.
</p>

<p>
In my journey to install and use the simple system with the good old software
I encountered some problems. Sometimes, when I install a simple program, like
conky or dunst — the pkg tries to install Wayland as a dependency! Or
PulseAudio (thankfully, there is no SystemD in the FreeBSD world). Of course,
I <b>do not want</b> these things in my simple system based on the X server, OSS and
good old initialization scripts.
</p>

<p>
As stated <a href="https://mastodon.bsd.cafe/@TomAoki">@TomAoki@bsd.cafe</a> — some binary packages for FreeBSD have been built
with the same dependencies that came from upstream — to minimize maintainer's
work, which is obviously hard<sup><a id="fnr.tomaoki" class="footref" href="#fn.tomaoki" role="doc-backlink">1</a></sup>.
</p>


<div class="figure">
<p><img src="/assets/static/tomaoki.png" alt="Screenshot of TomAoki reply in Mastodon" align="center" />
</p>
</div>

<p>
As a result, some packages came to my machine with unwanted dependencies or
compile-time options that were not ideal for me. For example, the native for
BSD <code>sndio</code> sound server is disabled by default in the
<code>mutlimedia/audacious-plugins</code> port. But those "linuxisms" — like PulseAudio and
PipeWire — are enabled🤷‍♂️.
</p>


<div class="figure">
<p><img src="/assets/static/audacious-plugins.png" alt="Compile time configuration for audacious-plugins with pulseaudio and pipewire options enabled" align="center" />
</p>
</div>

<p>
I was very surprised to see the <code>pulseaudio</code> process in the top 5 CPU consuming
processes while listening to my music. My sound system using OSS and sndio,
why is PulseAudio here?!🤔 After that I started to think about removing
unwanted dependencies from my packages completely…
</p>

<p>
Or another example — when I install some graphical application based on the
QT6 or GTK3/GTK4 — not only the necessary graphical libraries are installed as
dependencies but also a lot of Wayland stuff. Even if my system doesn't use
Wayland, I have packages of <i>these things</i> installed:
</p>

<pre class="example">
% pkg info -a | /usr/bin/grep wayland
qt6-wayland-6.8.2              Qt6 wrapper for Wayland
wayland-1.23.1                 Core Wayland window system code and protocol
wayland-protocols-1.39         Wayland protocols
</pre>

<p>
At some point, I decided to override this and get my versions of packages
without unwanted dependencies. A naive approach — just build some packages
without unwanted compile-time options via the Ports infrastructure — almost
works for me.
</p>

<p>
Almost. When the corresponding package from the FreeBSD repository was
updated — it overwrites my custom package, built with ports. A solution I
found — were far from ideal solution. I can lock my package so that it will
not be updated with the same binary package from the repository. And
temporarily unlock it when I want to update the <i>my</i> package via the ports
infrastructure.
</p>

<p>
In the FreeBSD Handbook, section 4.6 <a href="https://docs.freebsd.org/en/books/handbook/ports/#ports-poudriere">"Building Packages with poudriere"</a>, there
was another way to accomplish my task without such update problems. I can
build my own local repository with some packages that have PulseAudio/Wayland
dependencies removed. And this is not a some hacky thing — as far as I can
see, the poudriere used by the FreeBSD maintainers to build the binary
packages:
</p>

<pre class="example">
% pkg info emacs
...
Annotations    :
        FreeBSD_version: 1401000
        build_timestamp: 2025-02-27T01:04:32+0000
        built_by       : poudriere-git-3.4.2
</pre>

<p>
And it works pretty simple — poudriere just reuses existing FreeBSD
infrastructure to build packages. Package sources taken from <a href="https://docs.freebsd.org/en/books/handbook/ports/#ports-using">ports</a> (via
git/https), binary packages downloaded from existing FreeBSD repositories via
the <a href="https://docs.freebsd.org/en/books/handbook/ports/#pkgng-intro">pkg</a>, build process itself runs inside the <a href="https://docs.freebsd.org/en/books/handbook/jails/">jail</a> and all corresponding files
can be stored in the separate <a href="https://docs.freebsd.org/en/books/handbook/zfs/">ZFS</a> dataset — so the dataset with the root
filesystem will not be polluted by the build-time dependencies or building
artifacts, like object files or logs.
</p>

<p>
At the end, poudriere will create the local repository with packages. The same
repository as the main FreeBSD repository, but <i>local</i> and with only necesary
packages. Poudriere doesn't force me to build the whole system on my machine.
</p>

<p>
The main selling point is that all packages installed from this repository
will be updated through <b>this</b> repository. They will not be overwritten by
updates from the main FreeBSD repository. This is because the <code>pkg</code> adds the
annotation with repository name to the installed package and uses it when
updating:
</p>

<pre class="example">
% pkg info -A conky
conky-1.22.1:
        FreeBSD_version: 1402000
        build_timestamp: 2025-03-23T14:58:18+0000
        built_by       : poudriere-git-3.4.2
        cpe            : cpe:2.3:a:conky:conky:1.22.1:::::freebsd14:x64
        port_checkout_unclean: no
        port_git_hash  : 6bcf1e971
        ports_top_checkout_unclean: no
        ports_top_git_hash: 3fe34c578
        repo_type      : binary
        repository     : LocalRepo
</pre>

<p>
The second selling point: I can setup all these machinery on a separate disk,
which I mainly use for QEMU/bhyve VMs and other <i>big things</i>. This way, my build
infrastructure doesn't take up space on the root filesystem.
</p>
</div>
</div>
<div id="outline-container-poudriere-installation" class="outline-2">
<h2 id="poudriere-installation">Poudriere installation</h2>
<div class="outline-text-2" id="text-poudriere-installation">
<p>
Before I welcomed poudriere to my laptop, I created a separate dataset for
poudriere-related files:
</p>

<pre class="example">
# zfs create hdd/poudriere
# zfs set compression=gzip hdd/poudriere
</pre>

<p>
The only files, which are stored in the root filesystem are configuration
files:
</p>
<ul class="org-ul">
<li>Build options for the ports — stored in the
<code>/usr/local/etc/poudriere.d/jail-port-set-options/</code>.</li>
<li>Blacklist for unwanted ports: <code>/usr/local/etc/poudriere.d/blacklist</code>.</li>
<li><code>make.conf</code> for poudriere jails: <code>/usr/local/etc/poudriere.d/make.conf</code>.</li>
<li>And the poudriere configuration itself, of course.</li>
</ul>

<p>
Then, after installing the poudriere package, I slightly changed the default
configuration file and added the following options to use <code>/hdd/poudriere/</code>
dataset as the main path for both the jail and the local repository, not my
main dataset with the root filesystem:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #268bd2;">ZPOOL</span>=hdd
<span style="color: #93a1a1;">#</span><span style="color: #93a1a1;">NO_ZFS=yes</span>
<span style="color: #268bd2;">ZROOTFS</span>=/poudriere
<span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">The directory where poudriere will store jails and ports</span>
<span style="color: #268bd2;">BASEFS</span>=/hdd/poudriere
<span style="color: #268bd2;">TIMESTAMP_LOGS</span>=yes
<span style="color: #268bd2;">MAX_EXECUTION_TIME</span>=259200
</pre>
</div>

<p>
Also, I increased max time of build process to 3 days — because 1 day may not
be enough to build <i>big things</i>. And because it is very sad to spend 24 hours
for building and receive nothing as a result😟.
</p>

<p>
By the way, I don't want to build LLVM, or Rust, or other build-time
dependencies from sources — I'm fine with the packaged versions. So to don't
spend a time for it, I instruct poudriere to download and use binary packages
for these dependencies:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #268bd2;">PACKAGE_FETCH_BRANCH</span>=quarterly
<span style="color: #268bd2;">PACKAGE_FETCH_BLACKLIST</span>=<span style="color: #2aa198;">"pipewire* pulseaudio* wayland*"</span>
<span style="color: #268bd2;">PACKAGE_FETCH_WHITELIST</span>=<span style="color: #2aa198;">"gcc* binutils coreutils mpfr nasm mpdecimal bison</span>
<span style="color: #2aa198;">                         llvm* libclc-llvm* spirv-llvm-translator-llvm*</span>
<span style="color: #2aa198;">                         rust node* lua* perl* python* ruby* ghc* tcl86</span>
<span style="color: #2aa198;">                         bison gmake gsed gawk pcre2 pkgconf autoconf* automake* m4</span>
<span style="color: #2aa198;">                         flex mercurial subversion git cppunit</span>
<span style="color: #2aa198;">                         readline bash* curl readline gmp gettext* indexinfo</span>
<span style="color: #2aa198;">                         boost* hs-* cmake* help2man html2text pkgconf</span>
<span style="color: #2aa198;">                         jsoncpp asciidoc rhash zstd itstool brotli meson</span>
<span style="color: #2aa198;">                         tex* doxygen sdocbook-xml docbook* texi2html</span>
<span style="color: #2aa198;">                         gnupg gnutls sqlite3 suiteparse* fribidi gdbm</span>
<span style="color: #2aa198;">                         utf8cpp xmlstarlet c-ares minizip</span>
<span style="color: #2aa198;">                         gtk-doc iso8879 gperf highway p11-kit gcab nettle</span>
<span style="color: #2aa198;">                         py3* p5* ninja pygobject* double-conversion</span>
<span style="color: #2aa198;">                         dbus dbus-glib evdev-proto gnome-common icu orc</span>
<span style="color: #2aa198;">                         ca_root_nss expat xmlcatmgr xmlcharent yelp* json-glib</span>
<span style="color: #2aa198;">                         dav1d lame polkit intltool minixmlto sassc redis aom</span>
<span style="color: #2aa198;">                         svt-av1 x265 flac neon opusfile wavpack vmaf shaderc</span>
<span style="color: #2aa198;">                         opus sndio libbinio xxhash frei0r taglib upnp</span>
<span style="color: #2aa198;">                         ffnvcodec-headers v4l_compat yasm speex speexdsp twolame</span>
<span style="color: #2aa198;">                         bdftopcf dejavu encodings font-bh-ttf font-misc-ethiopic</span>
<span style="color: #2aa198;">                         font-misc-meltho font-util mkfontscale xorg-fonts-truetype</span>
<span style="color: #2aa198;">                         xcb-util xcb-util-image xcb-util-keysyms xcb-util-renderutil</span>
<span style="color: #2aa198;">                         xcb-util-wm spirv-tools glslang alsa-lib gsettings-desktop-schemas</span>
<span style="color: #2aa198;">                         woff2 openjpeg geoclue glib-networking harfbuzz-icu enchant2</span>
<span style="color: #2aa198;">                         hunspell hyphen</span>
<span style="color: #2aa198;">                         openal-soft rnnoise webrtc-audio-processing abseil crc32c</span>
<span style="color: #2aa198;">                         glibmm2* kf6* microsoft-gsl protobuf range-v3 tl-expected</span>
<span style="color: #2aa198;">                         libiconv libffi libtextstyle libxml2 libyaml liblz4</span>
<span style="color: #2aa198;">                         libidn2 libxslt libgcrypt libunistring libuv libgpg-error</span>
<span style="color: #2aa198;">                         libtool libdeflate libinotify libnghttp2 libtasn* libpsl</span>
<span style="color: #2aa198;">                         libssh* libarchive libdaemon libdatrie libevent libgudev</span>
<span style="color: #2aa198;">                         libgusb libthai libudev-devd libunwind duktape-lib</span>
<span style="color: #2aa198;">                         libsecret libsass libass libedit libvorbis</span>
<span style="color: #2aa198;">                         libogg libx264 libsidplayfp libunibreak libv4l libvdpau libvpx</span>
<span style="color: #2aa198;">                         libcdio libcdio-paranoia libcue libdvbpsi libepoll-shim</span>
<span style="color: #2aa198;">                         libsamplerate libinput libevdev libmtdev libidn libmatroska</span>
<span style="color: #2aa198;">                         libtheora libebml libfontenc libXpm libwacom libXv libxshmfence</span>
<span style="color: #2aa198;">                         libmysofa libada libb2 libdispatch libfmt libsigc++* libsoup*</span>
<span style="color: #2aa198;">                         libproxy"</span>
</pre>
</div>

<p>
Also, I put the next lines to the <code>/usr/local/etc/poudriere.d/make.conf</code>, to
prevent enabling the unwanted options when configuring the port(s):
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #268bd2;">DISABLE_LICENSES</span>=yes
OPTIONS_UNSET+=JACK PIPEWIRE PULSEAUDIO WAYLAND
OPTIONS_SET+=OSS SNDIO X11
</pre>
</div>

<p>
To the <code>/usr/local/etc/poudriere.d/blacklist</code> I've added the next lines:
</p>

<pre class="example">
audio/pulseaudio
graphics/wayland
multimedia/pipewire
</pre>

<p>
With this configuration poudriere will neither install unwanted packages from
repository, nor build it from ports.
</p>

<p>
The next steps, including initializing the jail and ports, are well described
in the corresponding chapter of the FreeBSD Handbook. With one <b>valuable</b>
exception! When I create the poudriere ports, the proper quarterly branch
should be specified! Like this:
</p>

<pre class="example">
# poudriere ports -c -p local -m git+https -B 2025Q1
</pre>

<p>
Without the proper branch I'll faced the obscure dependency problems when
downloading the build-time depenedencies as packages:
</p>

<pre class="example">
[00:00:48] [Dry Run] Package fetch: Skipping cmake-core-3.31.6: remote version mismatch: cmake-core-3.31.3
[00:00:48] [Dry Run] Package fetch: Skipping gettext-runtime-0.23.1: remote version mismatch: gettext-runtime-0.23
[00:00:48] [Dry Run] Package fetch: Skipping hs-pandoc-3.6.4: remote version mismatch: hs-pandoc-3.6.1
[00:00:48] [Dry Run] Package fetch: Skipping gettext-tools-0.23.1: remote version mismatch: gettext-tools-0.23
[00:00:48] [Dry Run] Package fetch: Skipping libedit-3.1.20250104,1: remote version mismatch: libedit-3.1.20240808,1
[00:00:48] [Dry Run] Package fetch: Skipping lua53-5.3.6_1: deps wanted: libedit-3.1.20250104,1
[00:00:48] [Dry Run] Package fetch: Skipping lua53-5.3.6_1: deps remote: libedit-3.1.20240808,1
[00:00:48] [Dry Run] Package fetch: Will fetch hs-cabal-install-3.12.1.0_1
</pre>

<p>
At the end I have an initialized<sup><a id="fnr.pkg" class="footref" href="#fn.pkg" role="doc-backlink">2</a></sup> and working jail with ports and the
necessary build environment inside. Now it's time to remove unwanted
dependencies from the system!
</p>
</div>
</div>
<div id="outline-container-removing-deps" class="outline-2">
<h2 id="removing-deps">Removing unwanted dependencies</h2>
<div class="outline-text-2" id="text-removing-deps">
<p>
For example, let's work with Wayland. First, I got a list of <code>wayland</code>-dependent
packages via <code>pkg required-depends</code>:
</p>

<pre class="example">
% pkg required-depends wayland
mesa-dri-24.1.7_1
gtk4-4.16.12
conky-1.22.0
sdl2-2.30.10_1
mesa-libs-24.1.7_1
gstreamer1-plugins-gl-1.24.10
vulkan-loader-1.4.304
dunst-1.10.0
libva-2.22.0
gtk3-3.24.43
libxkbcommon-1.7.0_1
redshift-1.12_2
webkit2-gtk3-2.34.6_10
</pre>

<p>
Let's take <code>conky</code> and rebuild it without Wayland dependencies! First, I need an
<i>origin</i> of this package (it's name in the ports) to build it with
poudriere. The <code>pkg</code> gave me the answer and I wrote it to the text file — the
list of packages to rebuild:
</p>

<pre class="example">
% pkg info -o conky
conky-1.22.0                   sysutils/conky
# echo 'sysutils/conky' &gt;&gt; /hdd/poudriere/14amd64-local-workstation-pkglist
</pre>

<p>
Then I configured all the necessary ports with help of the next <a href="https://zsh.sourceforge.io/Doc/Release/Functions.html">zsh function</a>:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #268bd2;">SHELL</span>=<span style="color: #2aa198;">"/usr/bin/env zsh"</span> xterm -fa Hack-14 -e <span style="color: #b58900; font-weight: bold;">\</span>
    <span style="color: #2aa198;">"sudo poudriere options -j 14amd64 -p local -z workstation -c $1"</span>
</pre>
</div>

<p>
This function takes string with origin as a single argument. It may look a bit
tricky — but I'm using it because ncurses interface to configure build options
is not displaying correctly inside my <a href="https://codeberg.org/akib/emacs-eat">EAT</a>. So I start a separate shell in
XTerm and configure conky and all it's dependencies inside this shell:
</p>


<div class="figure">
<p><img src="/assets/static/conky-port-options.png" alt="conky package configuration options" align="center" />
</p>
</div>

<p>
After that I start the necessary machinery with the next zsh function:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #268bd2;">DUNST_OPTS</span>=(-I ~/.config/dunst/icons/update.svg)
<span style="color: #268bd2;">PKGLIST</span>=<span style="color: #2aa198;">"/hdd/poudriere/14amd64-local-workstation-pkglist"</span>
<span style="color: #268bd2;">POUDRIERE_OPTS</span>=(-j 14amd64 -p local -z workstation -f $<span style="color: #268bd2;">PKGLIST</span>)

sudo poudriere jail -u -j 14amd64
dunstify <span style="color: #2aa198;">"Poudriere"</span> <span style="color: #2aa198;">"Jail 14amd64 updated"</span> $<span style="color: #268bd2;">DUNST_OPTS</span>

sudo poudriere ports -p local -u
dunstify <span style="color: #2aa198;">"Poudriere"</span> <span style="color: #2aa198;">"Ports updated"</span> $<span style="color: #268bd2;">DUNST_OPTS</span>

<span style="color: #859900; font-weight: bold;">while</span> true; <span style="color: #859900; font-weight: bold;">do</span>
    dunstify <span style="color: #2aa198;">"Poudriere"</span> <span style="color: #b58900; font-weight: bold;">\</span>
        <span style="color: #2aa198;">"Dry run start.\nCheck that all will build correctly before the real&#128526; build"</span> <span style="color: #b58900; font-weight: bold;">\</span>
        $<span style="color: #268bd2;">DUNST_OPTS</span>
    sudo poudriere bulk $<span style="color: #268bd2;">POUDRIERE_OPTS</span> -b quarterly -vn
    <span style="color: #657b83; font-weight: bold;">read</span> ANSWER?<span style="color: #2aa198;">"Is all correct? [y/n/q] "</span>
    <span style="color: #859900; font-weight: bold;">if</span> [ <span style="color: #2aa198;">"$ANSWER"</span> = <span style="color: #2aa198;">"y"</span> ]; <span style="color: #859900; font-weight: bold;">then</span>
        <span style="color: #859900; font-weight: bold;">break</span>
    <span style="color: #859900; font-weight: bold;">elif</span> [ <span style="color: #2aa198;">"$ANSWER"</span> = <span style="color: #2aa198;">"q"</span> ]; <span style="color: #859900; font-weight: bold;">then</span>
        <span style="color: #859900; font-weight: bold;">return</span>
    <span style="color: #859900; font-weight: bold;">fi</span>;
<span style="color: #859900; font-weight: bold;">done</span>

dunstify <span style="color: #2aa198;">"Poudriere"</span> <span style="color: #2aa198;">"Ports build start..."</span> $<span style="color: #268bd2;">DUNST_OPTS</span>
sudo poudriere bulk $<span style="color: #268bd2;">POUDRIERE_OPTS</span> -b quarterly
dunstify <span style="color: #2aa198;">"Poudriere"</span> <span style="color: #2aa198;">"Ports build end"</span> $<span style="color: #268bd2;">DUNST_OPTS</span>
</pre>
</div>

<p>
There are the next things happen:
</p>
<ol class="org-ol">
<li><code>local</code> poudriere ports update and FreeBSD system inside the jail <code>14amd64</code>
update. If there are already built ports and they got updates — the
necessary ports and its' dependencies will be rebuilt during the next
stages.</li>
<li>Dry-run the build process (<code>-n</code>) with the verbose output (<code>-v</code>). This is
necessary to check that all build-time dependencies, specified in the
<code>PACKAGE_FETCH_WHITELIST</code> configuration option, will not be built from
sources and so on.</li>
<li>Ask user about correctness of logs in the console. If not — return to the
previous stage. Assuming that user will fix something in the
<code>/usr/local/etc/poudriere.conf</code> before answering <code>n</code> to recheck logs of dry run
stage.</li>
<li><p>
Start build packages in multiple processes, each on it's own CPU core:
</p>

<div class="figure">
<p><img src="/assets/static/poudriere-building.png" alt="poudriere build process screenshot" align="center" />
</p>
</div></li>
</ol>

<p>
The "dry-run" stage is necessary to avoid special sort of problems — when the
build-time dependency will not be installed with <code>pkg</code> because it depends from
another build-time dependency, not listed in <code>PACKAGE_FETCH_WHITELIST</code>.
</p>

<pre class="example">
[00:01:23] [Dry Run] Checking packages for missing dependencies
[00:01:23] [Dry Run] Deleting cmake-core-3.31.3.pkg: missing dependency: expat-2.6.4
[00:01:23] [Dry Run] Deleting gettext-tools-0.23.pkg: missing dependency: libtextstyle-0.23
[00:01:23] [Dry Run] Deleting py311-libxml2-2.11.9_1.pkg: missing dependency: libxml2-2.11.9
</pre>

<p>
The solution is simple — just add necessary package(s) to the
<code>PACKAGE_FETCH_WHITELIST</code> or decide to build it from ports.
</p>

<p>
Ideally, here should be an <a href="https://github.com/freebsd/poudriere/issues/1129">option to stop the build process</a> if packages listed
in the <code>PACKAGE_FETCH_WHITELIST</code> will not be fetched. But it is not added yet to
the recent version of poudriere, so I'm using an infinite cycle as a
workaround.
</p>

<p>
The build process is fast enough, even on my Intel(R) Core(TM) i7-2620M CPU @
2.70GHz. Obviously, the big software, like Qt or GTK, will build for
hours. Fortunately, the packages that depend on it were waiting while they
were building, so other CPU cores were free<sup><a id="fnr.cpu-cores" class="footref" href="#fn.cpu-cores" role="doc-backlink">3</a></sup> and I could use my
system as usual, without any drawbacks😎.
</p>

<p>
After successfull completion, poudriere will create a local FreeBSD repository
that I can use to install <b>my</b> versions of packages without unwanted
dependencies. To use this repo, I simply created the
<code>/usr/local/etc/pkg/repos/LocalRepo.conf</code> file with the next contents:
</p>

<pre class="example">
LocalRepo: {
    url: "//hdd/poudriere/data/packages/14amd64-local-workstation"
}
</pre>

<p>
Then I launched <code>pkg update</code> as usual:
</p>

<pre class="example">
# pkg update
Updating FreeBSD repository catalogue...
FreeBSD repository is up to date.
Updating FreeBSD-kmods repository catalogue...
Fetching data.pkg: 100%   14 KiB  14.6kB/s    00:01
Processing entries: 100%
FreeBSD-kmods repository update completed. 44 packages processed.
Updating LocalRepo repository catalogue...
LocalRepo repository is up to date.
All repositories are up to date.
</pre>

<p>
And now I'm able to reinstall the conky and get rid of a wayland
dependency. To simplify things, I've just added the next alias to
<code>/etc/pkg.conf</code>:
</p>

<pre class="example">
ALIAS {
    ...
    poudriere-install = "install -r LocalRepo -f"
}
</pre>

<p>
And called the next command:
</p>

<pre class="example">
# pkg poudriere-install conky
Updating LocalRepo repository catalogue...
Fetching meta.conf: 100%    179 B   0.2kB/s    00:01
Fetching data.pkg: 100%  132 KiB 135.4kB/s    00:01
Processing entries: 100%
LocalRepo repository update completed. 383 packages processed.
LocalRepo is up to date.
Checking integrity... done (0 conflicting)
The following 1 package(s) will be affected (of 0 checked):

Installed packages to be UPGRADED:
        conky: 1.22.0 -&gt; 1.22.1 [LocalRepo]

Number of packages to be upgraded: 1

Proceed with this action? [y/N]: y
[1/1] Upgrading conky from 1.22.0 to 1.22.1...
[1/1] Extracting conky-1.22.1: 100%
</pre>

<p>
Note, that only the necessary package(s) have been reinstalled. The pkg will
not install all the packages from the <code>LocalRepo</code>, only the bare minimum to
provide the working program in the existing system.
</p>

<p>
As a result, conky has disappeared from the list of wayland-dependent packages
and receive the proper <code>repository</code> annotation:
</p>

<pre class="example">
% pkg required-depends wayland
mesa-dri-24.1.7_1
gtk4-4.16.12
sdl2-2.30.10_1
mesa-libs-24.1.7_1
gstreamer1-plugins-gl-1.24.10
vulkan-loader-1.4.304
dunst-1.10.0
libva-2.22.0
gtk3-3.24.43
libxkbcommon-1.7.0_1
redshift-1.12_2
webkit2-gtk3-2.34.6_10
% pkg query "%n: %R" conky
conky: LocalRepo
</pre>
</div>
</div>
<div id="outline-container-dewaylandization" class="outline-2">
<h2 id="dewaylandization">More complex examples of deWaylandization</h2>
<div class="outline-text-2" id="text-dewaylandization">
<p>
Sometimes it may be necessary to revisit build options and/or reconfigure the
already built package. In my case there was a <code>libva</code>. I already built it as a
dependency when rebuilding VLC, but I want to recheck the selected options
before reinstalling the package.
</p>

<p>
This is where the <code>poudriere options</code> comes to the rescue. I can use the <code>-s</code>
option to view the package options and the <code>-c</code> option to reconfigure
them. Instead of specifying the list of origins to build with the <code>-f</code> option, I
just specify the one necessary origin. Note the <code>-n</code> option — without it the
poudriere will print configuration for the all packages required by the
specified origin.
</p>

<pre class="example">
# poudriere options -j 14amd64 -p local -z workstation -ns multimedia/libva
[00:00:01] Ports supports: FLAVORS SUBPACKAGES SELECTED_OPTIONS
[00:00:01] Working on options directory: /usr/local/etc/poudriere.d/14amd64-local-workstation-options
[00:00:01] Using ports from: /hdd/poudriere/jails-ports/ports/local
===&gt; The following configuration options are available for libva-2.22.0:
     WAYLAND=off: Wayland (graphics) support
     X11=on: X11 (graphics) support
===&gt; Use 'make config' to modify these settings
[00:00:01] Re-run 'poudriere options' with the -c flag to modify the options.
</pre>

<p>
Looks like the <code>libva</code> was configured correctly and I can just install it from
my local repo without any problems.
</p>

<p>
Much more complex example comes with a <code>graphics/mesa-dri</code>. Unfortunately, I
built it with Wayland support, so I will have to reconfigure and rebuild it.
</p>

<p>
This is where the custom zsh function <code>bsd-poudriere-reconfigure</code> comes in to
save me a tons of typing:
</p>


<div class="figure">
<p><img src="/assets/static/mesa-dri-reconfiguration.png" alt="mesa-dri options configuration window, opened with bsd-poudriere-reconfigure function" align="center" />
</p>
</div>

<p>
Finally, to rebuild the <code>mesa-dri</code> and it's dependencies I used the next
command:
</p>

<pre class="example">
# poudriere bulk -j 14amd64 -p local -z workstation -b quarterly -C graphics/mesa-dri
</pre>

<p>
And install it from <code>LocalRepo</code> the same way as I used for <code>conky</code> package.
</p>
</div>
<div id="outline-container-flavors" class="outline-3">
<h3 id="flavors">Ports flavors</h3>
<div class="outline-text-3" id="text-flavors">
<p>
There are some packages exists, without the corresponding ports. For example,
the package <code>audacious-gtk3</code> can be installed, but there is only
<code>multimedia/audactious</code> port and there are no "Qt/GTK/whatever" options to
configure:
</p>

<pre class="example">
/usr/ports % pkg info -o audacious-gtk3
audacious-gtk3-4.4.2_1         multimedia/audacious
/usr/ports % ls -d multimedia/audacious*
multimedia/audacious/         multimedia/audacious-plugins/
/usr/ports % pkg query '%n: %Ok' audacious-gtk3
audacious-gtk3: EXECINFO
audacious-gtk3: LIBARCHIVE
audacious-gtk3: NLS
</pre>

<p>
When I built this port as usual, I got the Qt-based package. But I want a GTK
based package because it can display my favourite skin as I want to:
</p>


<div class="figure">
<p><img src="/assets/static/audacious.png" alt="Audacious plugin with old school Winamp skin" align="center" width="80%" />
</p>
</div>

<p>
It's time to meet the <a href="https://docs.freebsd.org/en/books/porters-handbook/flavors/">flavors</a>! Some ports can be built in multiple
variants. And the variants itself can be observed with the simple <code>fgrep</code>:
</p>

<pre class="example">
/usr/ports % fgrep 'FLAVORS=' multimedia/audacious/Makefile
FLAVORS=        qt6 qt5 gtk3 gtk2
</pre>

<p>
So, according to the link above, I can build my <code>audacious-gtk3</code> package just by
adding line <code>multimedia/audacious@gtk3</code> instead of simple <code>multimedia/audacious</code>
to the my <code>/hdd/poudriere/14amd64-local-workstation-pkglist</code>. <b>Note:</b> the flavor
is specified after the <i>[at]</i> symbol.
</p>
</div>
</div>
<div id="outline-container-patching-Makefile" class="outline-3">
<h3 id="patching-Makefile">Patching Makefile</h3>
<div class="outline-text-3" id="text-patching-Makefile">
<p>
One of the biggest problems I met, during the recompiling some packages — is
the Qt 6 dependent packages. There were two of them: Telegram Desktop and the
<a href="https://wiki.openstreetmap.org/wiki/QMapShack">Qmapshack</a>.
</p>

<p>
Telegram Desktop is directly depends from Qt 6 and the Qmapshack depends on
the <code>bsdisks</code> package, which depends from the Qt 6 itself (despite the Qmapshack
depends on the Qt 5):
</p>

<pre class="example">
~ % pkg rquery '%n: %dn %dv : %do' telegram-desktop | /usr/bin/grep qt
telegram-desktop: qt6-shadertools 6.8.2 : x11-toolkits/qt6-shadertools
telegram-desktop: qt6-declarative 6.8.2 : x11-toolkits/qt6-declarative
telegram-desktop: qt6-wayland 6.8.2 : graphics/qt6-wayland
telegram-desktop: qt6-svg 6.8.2 : graphics/qt6-svg
telegram-desktop: qt6-lottie 6.8.2 : graphics/qt6-lottie
telegram-desktop: qt6-imageformats 6.8.2 : graphics/qt6-imageformats
telegram-desktop: qt6-base 6.8.2_1 : devel/qt6-base
telegram-desktop: qt6-5compat 6.8.2 : devel/qt6-5compat
~ % pkg rquery '%n: %dn %dv : %do' qmapshack | /usr/bin/grep bsdisks
qmapshack: bsdisks 0.36 : sysutils/bsdisks
~ % pkg rquery '%n: %dn %dv : %do' bsdisks | /usr/bin/grep qt
bsdisks: polkit-qt-1-qt6 0.200.0 : sysutils/polkit-qt-1
bsdisks: qt6-base 6.8.2_1 : devel/qt6-base
</pre>

<p>
And the problem is in <code>devel/qt6-base</code> — it depends from the Wayland directly
and there is no knob to build it without Wayland support:
</p>

<div class="org-src-container">
<pre class="src src-makefile"><span style="color: #268bd2;">LIB_DEPENDS</span>=    libatk-1.0.so:accessibility/at-spi2-core \
        libatk-bridge-2.0.so:accessibility/at-spi2-core \
...
        <span style="color: #268bd2;">libvulkan.so</span>:graphics/vulkan-loader \
        libwayland-client.so:graphics/wayland \
        libxkbcommon.so:x11/libxkbcommon \
...
<span style="color: #268bd2;">OPTIONS_DEFINE</span>= CUPS X11
<span style="color: #268bd2;">OPTIONS_DEFAULT</span>=    CUPS X11
<span style="color: #268bd2;">OPTIONS_SUB</span>=    yes
</pre>
</div>

<p>
I tried to remove this line with <code>graphics/wayland</code> dependency from the Makefile
but <code>qt6-base</code> failed to compile in this case.
</p>

<p>
I hope the option to compile <code>devel/qt6-base</code> without Wayland dependency will be
added in the future. But for now I can just stick with Qt 5.
</p>

<p>
First package, dependent from Qt 6 — the Telegram Desktop — was simply removed
from my machine. I always encountered problems with this app — it likes to
overload my CPU in random times. So I switched to web version and have no
problems since.
</p>

<p>
Second package — Qmapshack, dependent from <code>sysutils/bsdisks</code>, require more work
on it. Bsdisks itself was pulled to my system directly by Qmapshack and wasn't
necessary for other programs. So, the necessity of bsdisks was questionable —
why is it needed for the mapping program, when I don't use Garmin or other GPS
devices for mapping?
</p>

<pre class="example">
% pkg rquery '%e' bsdisks
UDisks2 service provides interfaces to enumerate
and perform operations on disks and storage devices
via D-Bus API. Bsdisks is an implementation of UDisks2
service for FreeBSD.
</pre>

<p>
Of course, there is no configuration option to build the <code>astro/qmapshack</code>
without <code>sysutils/bsdisks</code>. But … it was marked as a runtime dependency in the
Makefile, not a compile time dependency:
</p>

<div class="org-src-container">
<pre class="src src-makefile"><span style="color: #268bd2;">RUN_DEPENDS</span>=    ${<span style="color: #268bd2;">LOCALBASE</span>}/bin/bsdisks:sysutils/bsdisks
</pre>
</div>

<p>
So, it's time to slightly patch the necessary port and try to build Qmapshack
without bsdisks. First, I opened the
<code>/hdd/poudriere/ports/local/astro/qmapshack/Makefile</code> and commented this line.
</p>

<p>
Then, I add <code>astro/qmapshack</code> to the
<code>/hdd/poudriere/14amd64-local-workstation-pkglist</code> and initiated the build
without updating the ports, so my change will not clash with the updates from
the main repository (if any):
</p>

<pre class="example">
# poudriere bulk -j 14amd64 -p local -z workstation -b quarterly -nv -C astro/qmapshack
...
[00:00:42] [Dry Run] Dry run mode, cleaning up and exiting
[00:00:42] [Dry Run] Would build 3 packages using 3 builders
[00:00:42] [Dry Run] Ports to build: astro/qmapshack graphics/gdal www/qt5-webengine
...
# poudriere bulk -j 14amd64 -p local -z workstation -b quarterly -C astro/qmapshack
</pre>

<p>
And it successfully builds and running correctly without <code>bsdisks</code>!
</p>

<pre class="example">
[14:00:58] [01] [14:00:02] Finished www/qt5-webengine | qt5-webengine-5.15.18p5_1: Success
[14:01:01] [01] [00:00:00] Building astro/qmapshack | qmapshack-1.17.1_5
[15:08:33] [01] [01:07:32] Finished astro/qmapshack | qmapshack-1.17.1_5: Success
[15:08:33] Stopping 3 builders
[15:08:37] Creating pkg repository
Creating repository in /tmp/packages: 100%
Packing files for repository: 100%
[15:09:05] Committing packages to repository: /hdd/poudriere/data/packages/14amd64-local-workstation/.real_1743306462 via .latest symlink
[15:09:05] Removing old packages
[15:09:05] Built ports: graphics/gdal www/qt5-webengine astro/qmapshack
</pre>


<div class="figure">
<p><img src="/assets/static/qmapshack-wout-bsdisks.png" alt="Qmapshack main interface" align="center" />
</p>
<p style="text-align: center"><i>Main window of Qmapshack GIS software</i></p>
</div>

<p>
Last step: after successfull compilation I reverted my changes in
<code>astro/qmapshack/Makefile</code> to avoid unnecessary problems with ports updates.
</p>
</div>
</div>
</div>
<div id="outline-container-results-and-thoughts" class="outline-2">
<h2 id="results-and-thoughts">Results and thoughts</h2>
<div class="outline-text-2" id="text-results-and-thoughts">
<p>
Before, I was using a Gentoo (and compiling the whole system, of course) which
<code>emerge</code> system was inspired by FreeBSD ports. Comparing these two system, I can
say that ports infrastructure looks like simplier for me.
</p>

<p>
When I recompiled the program in the Gentoo with the new options I usually did
the next:
</p>
<ol class="org-ol">
<li>Run <code>emerge --ask program-name</code> to see the USE flags of program <b>and</b> it's
dependencies.</li>
<li>If I want to change something and need to see the exact meaning of some USE
flag, I call <code>equery uses program-name</code>. Then I open a text file somewhere in
<code>/etc/portage/package.use/</code> and add package atom and the necessary USE flags'
settings.</li>
<li>After that I could start compilation with necessary options.</li>
</ol>

<p>
Looks like for me, the same process in the FreeBSD is simpler. I can configure
build-time options for program and it's dependencies with a single call of
<code>poudriere options ...</code> which provides me a useful TUI menu with descriptions of
all of the options. And I don't need to copy it to the some configuration
file — all of them will be inserted in the right place themselves.
</p>

<p>
Also, all ports infrastructure looks like simplier — it is just a Makefile and
a bunch of human-readable text files with package descriptions and so on!
</p>

<p>
Of course there are drawbacks:
</p>
<ul class="org-ul">
<li>Some packages I think (like Qt 6) lack the configuration options.</li>
<li>If I want to update packages, it is better to update my local repository
first. Instead, some of the packages will be dependent from the old
libraries which are already updated in the <code>FreeBSD</code> repository. Sometimes it
will work as usual without any problems, but sometimes, I think, it will be
break due to API changes.</li>
<li>If I will update my OS to something like FreeBSD 14.3 — then I should to
checkout corresponding branch for local ports and update my 14amd64 jail to
the right version of OS.</li>
<li>The same is true for major updates.</li>
<li>And every quarter I should checkout the right branch for the ports, to have
a synchronization between the binary packages from the FreeBSD repository
and the ports.</li>
</ul>

<p>
BTW, I got one sudden and major result of un-waylanding of my system. Before,
I was constantly struggling from strange glitches on my display, that looks
like this:
</p>


<div class="figure">
<p><img src="/assets/static/freebsd_intel_glitches.jpg" alt="strange black glitches on the screen" align="center" />
</p>
</div>

<p>
I thought what this is because:
</p>
<ol class="org-ol">
<li>I used the outdated method of acceleration for X server <code>intel</code> driver. So, I
switched from UXA to Glamor. And this is not helped to me.</li>
<li>I used the wrong options for video card powersaving. Revised it and …
nothing changed.</li>
<li>My soldering of AGAN X230 expansion card were bad. So, I recheck it and
found nothing suspicios.</li>
<li>I compiled coreboot not the right way because I specified the wrong initial
framebuffer resolution when the machine is booting. I switched to
precompiled libreboot and properly configure it. Aaand … nothing changed.</li>
<li>I started to suspect my video card. Maybe my hardware is dying?…🤔</li>
</ol>

<p>
But after I removed Qt6 and Wayland related stuff from my machine, I'm not
seeing these glitches anymore. Before, I was seeing it almost every day. But
for now, two days already passed and all is OK.
</p>

<hr />
</div>
</div>
<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2" id="text-notes">
</div>
</div>
<div id="footnotes">

<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.tomaoki" class="footnum" href="#fnr.tomaoki" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://mastodon.bsd.cafe/@TomAoki/114209804382234562">https://mastodon.bsd.cafe/@TomAoki/114209804382234562</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.pkg" class="footnum" href="#fnr.pkg" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
It may be necessary to build a <code>ports-mgmt/pkg</code> before building anything
in the jail. In my case poudriere won't install <code>cmake-core</code> because it has
unsatisfied dependency — the <code>pkg</code>. Despite the <code>pkg</code> of necessary version was
previously bootstrapped to install binary packages in the jail.
</p></div></div>

<div class="footdef"><sup><a id="fn.cpu-cores" class="footnum" href="#fnr.cpu-cores" role="doc-backlink">3</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Except the Qt building process. There is a line in
<code>/usr/local/etc/poudriere.conf</code>, which instructs to build some packages on the
all accessible CPU cores:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">List of packages that will always be allowed to use MAKE_JOBS</span>
<span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">regardless of ALLOW_MAKE_JOBS. This is useful for allowing ports</span>
<span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">which holdup the rest of the queue to build more quickly.</span>
<span style="color: #268bd2;">ALLOW_MAKE_JOBS_PACKAGES</span>=<span style="color: #2aa198;">"pkg ccache py* vlc qt*"</span>
</pre>
</div>

<p class="footpara">
I added the Qt to it, because it builds so slooow on the one CPU core…
</p></div></div>


</div>
</div>]]></content><author><name>Eugene Andrienko</name></author><category term="it" /><category term="freebsd" /><summary type="html"><![CDATA[TOC&#xa0;&#xa0;&#xa0; Preamble Poudriere installation Removing unwanted dependencies More complex examples of deWaylandization Ports flavors Patching Makefile Results and thoughts Notes Preamble My everyday FreeBSD system has two good old components for graphics and sound — the X Server and the OSS. There are simple reasons to use these components — they are mature, they have tons of user documentation, use case examples, etc. I also like the way these things have been used in the FreeBSD world. Let me quote vermaden, who wrote well (about the OSS) in the Quare FreeBSD? blogpost:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://eugene-andrienko.com/assets/static/poudriere-header.png" /><media:content medium="image" url="https://eugene-andrienko.com/assets/static/poudriere-header.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="en"><title type="html">Winter photos (2024-2025)</title><link href="https://eugene-andrienko.com/en/photo/2025/03/16/winter-photos-2024-2025.html" rel="alternate" type="text/html" title="Winter photos (2024-2025)" /><published>2025-03-16T00:00:00+03:00</published><updated>2025-03-16T00:00:00+03:00</updated><id>https://eugene-andrienko.com/photo/2025/03/16/winter-photos-2024-2025</id><content type="html" xml:base="https://eugene-andrienko.com/photo/2025/03/16/winter-photos-2024-2025.html"><![CDATA[<p>
This winter I have photographed much less than usual — because of the mud on
the roads, the temperature around -15°C…-20°C, the almost permanent absence of
sunshine and the gray clouds that completely cover the sky —as much as
possible motivates me to keep my nose out of the street.
</p>

<p>
Fortunately, there were a couple of days with the sun:
</p>


<div class="figure">
<p><img src="/assets/static/20241204_132006.jpg" alt="Spruce branches with the sun shining through" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241204_132404.jpg" alt="Snow-covered green grass illuminated by the setting sun" align="center" />
</p>
</div>

<p>
But for the most of the time (if we ignore the New Year decorations) it looked
like this:
</p>


<div class="figure">
<p><img src="/assets/static/20241218_172101.jpg" alt="The line to enter the subway, the building lit up with orange lights, night all around. In the background there is a fir tree decorated with garlands" align="center" />
</p>
</div>

<p>
The most pictures I've got were from the New Year's day:
</p>


<div class="figure">
<p><img src="/assets/static/20241218_174246.jpg" alt="An orange lamp illuminating a brick wall" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241218_192314.jpg" alt="Set of clear glasses" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241218_192334.jpg" alt="Set of guitar effects" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241218_192339.jpg" alt="Some sound equipment" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241218_192437.jpg" alt="Bike engine" align="center" />
</p>
</div>]]></content><author><name>Eugene Andrienko</name></author><category term="photo" /><summary type="html"><![CDATA[This winter I have photographed much less than usual — because of the mud on the roads, the temperature around -15°C…-20°C, the almost permanent absence of sunshine and the gray clouds that completely cover the sky —as much as possible motivates me to keep my nose out of the street.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://eugene-andrienko.com/assets/static/header-winter-2024-2025.jpg" /><media:content medium="image" url="https://eugene-andrienko.com/assets/static/header-winter-2024-2025.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="en"><title type="html">FreeBSD 14.2 and Thinkpad X220</title><link href="https://eugene-andrienko.com/en/it/2025/03/10/freebsd14-2-thinkpad-x220.html" rel="alternate" type="text/html" title="FreeBSD 14.2 and Thinkpad X220" /><published>2025-03-10T00:00:00+03:00</published><updated>2025-03-10T00:00:00+03:00</updated><id>https://eugene-andrienko.com/it/2025/03/10/freebsd14-2-thinkpad-x220</id><content type="html" xml:base="https://eugene-andrienko.com/it/2025/03/10/freebsd14-2-thinkpad-x220.html"><![CDATA[<p>
Since I've wrote <a href="https://eugene-andrienko.com/en/it/2020/09/26/thinkpad-x220-freebsd">post about my specific FreeBSD settings for Thinkpad X220</a>
near 5 years have passed. That post has a lot of additions and become a bit
messy. So, after I updated FreeBSD on my laptop up to 14.2 version and finally
found some time to carefully read a <a href="https://docs.freebsd.org/en/books/handbook/">"FreeBSD handbook"</a>, I decided to write a
new article about my configuration and about few useful utilities and tricks.
</p>

<p>
Few words about my setup. I use ZFS as a filesystem. The root filesystem
installed in the ZFS pool <code>zroot</code> which has two disks: first near a 500 GB SSD
and second a 160 Gb SSD:
</p>

<pre class="example">
 ~ % zpool status zroot
  pool: zroot
 state: ONLINE
  scan: scrub repaired 0B in 00:06:42 with 0 errors on Thu Feb 6 03:13:50 2025
config:

        NAME          STATE     READ WRITE CKSUM
        zroot         ONLINE       0     0     0
          ada0p3.eli  ONLINE       0     0     0
          ada2p3.eli  ONLINE       0     0     0

errors: No known data errors
 ~ % zpool list zroot
NAME    SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT
zroot   579G   123G   456G        -         -     6%    21%  1.00x    ONLINE  -
</pre>

<p>
As you can see, I bravely traded reliability for read speed🫠. I hope that
snapshots and backups will save me.
</p>

<p>
And there is a third disk is in separate pool with a datasets for VMs (bhyve):
</p>

<pre class="example">
 ~ % zpool status hdd
  pool: hdd
 state: ONLINE
  scan: scrub repaired 0B in 00:01:37 with 0 errors on Thu Feb  6 03:08:49 2025
config:

        NAME        STATE     READ WRITE CKSUM
        hdd         ONLINE       0     0     0
          ada1      ONLINE       0     0     0

errors: No known data errors
 ~ % zfs list -r hdd
NAME              USED  AVAIL  REFER  MOUNTPOINT
hdd              10.2G   439G    96K  /hdd
hdd/vms          10.2G   439G  3.86G  /hdd/vms
hdd/vms/windows  6.39G   439G  6.39G  /hdd/vms/windows
</pre>

<p>
There is a <a href="https://eugene-andrienko.com/en/it/2024/12/21/thinkpad-x220-libreboot">Libreboot installed in the laptop</a> instead of BIOS. So my <code>loader</code>
starts in graphics mode, instead I've get problems with Libreboot built with
corebootfb.
</p>

<p>
As a WiFi card I use an Intel 8260 card with integrated WiFi and Bluetooth
(TL-8260D2W).
</p>

<p>
More information about my hardware you can read in <a href="https://eugene-andrienko.com/en/it/2024/07/07/thinkpad-x220-second-life">this post</a>.
</p>
<div class="outline-2">
<h2>TOC&#xa0;&#xa0;&#xa0;<span class="tag"></span></h2>
<div class="outline-text-2">
<ul class="org-ul">
<li><a href="#bootloader">Bootloader</a></li>
<li><a href="#drm">Direct Rendering Manager kernel module</a></li>
<li><a href="#boot-loader-conf">/boot/loader.conf</a></li>
<li><a href="#etc-rc-conf">/etc/rc.conf</a></li>
<li><a href="#etc-sysctl-conf">/etc/sysctl.conf</a></li>
<li><a href="#x-window-system">X Window System</a></li>
<li><a href="#power-management">Power management</a></li>
<li><a href="#networking">Networking</a>
<ul class="org-ul">
<li><a href="#usb-tethering">USB tethering</a></li>
</ul></li>
<li><a href="#storage">Storage</a></li>
<li><a href="#fingerprint-scanner">Fingerprint scanner</a></li>
<li><a href="#files-to-download">Files to download</a></li>
<li><a href="#notes">Notes</a></li>
</ul>
</div>
</div>
<div id="outline-container-bootloader" class="outline-2">
<h2 id="bootloader">Bootloader</h2>
<div class="outline-text-2" id="text-bootloader">
<p>
As <a href="https://libreboot.org/docs/bsd/#freebsd-and-corebootfb">stated in the Libreboot's site</a>, it doesn't works well with the FreeBSD
<code>loader</code>. If you install libreboot with <code>libgfxinit</code> (i.e. use binary with
<code>-corebootfb</code> suffix) and try to load FreeBSD, then you get a slim line on the
top of the screen instead of bootloader graphics and boot log of the FreeBSD
kernel and <code>init</code>. It looks like this:
</p>


<div class="figure">
<p><img src="/assets/static/freebsd_n_corebootfb.jpg" alt="Slim blue line on the top of the screen instead of the bsdinstall interface fullscreen" align="center" />
</p>
<p style="text-align: center"><i>Slim blue line instead of bsdinstall interface</i></p>
</div>

<p>
Fortunately, I found a workaround for this problem. If you booting the FreeBSD
installation media and the <code>loader</code> interface should appears on the screen —
blindly press <code>Esc</code> and type <code>vbe on</code> and press <code>Enter</code>. After that the fullscreen
<code>loader</code> interface should appear and installation process should display on the
screen as usual.
</p>

<p>
If you already installed FreeBSD, then just add the next lines to the
<code>/boot/loader.conf</code>:
</p>
<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">1: </span>hw.vga.textmode=<span style="color: #2aa198;">"0"</span>
<span id="coderef-loader-conf-resolution" class="coderef-off"><span class="linenr">2: </span><span style="color: #268bd2;">vbe_max_resolution</span>=2560x1440</span>
</pre>
</div>

<p>
Don't forget to insert the actual resolution to the line
<a href="#coderef-loader-conf-resolution" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-resolution');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-resolution');">2</a>!
</p>

<p>
After switch to FreeBSD 14.2 the things became more complicated. Because of
Netflix, the graphics mode from MBR bootloader <a href="https://www.freebsd.org/releases/14.2R/relnotes/#:~:text=removed%20support%20for%20graphics%20mode">was removed</a> and GZIP/BZIP2
compression takes its place. But this graphics mode was necessary for me to
see anything on the screen while system is booting. The previously described
trick doesn't work if bootloader lacks of graphics mode!
</p>

<p>
I found <a href="https://forums.freebsd.org/threads/freebsd-14-2-bootsplash-gone.96142/#post-684187">a solution</a> in the FreeBSD forum: just rebuild a loader with reverted
<a href="https://cgit.freebsd.org/src/commit/?id=4d3b05a8530e">4d3b05a8530e</a> commit and image on the display will be back. To achieve this I
did the next things:
</p>
<ol class="org-ol">
<li>Went to the <code>/usr/src/</code> catalog.</li>
<li>Because there is no Git repository in this catalog (in my case), I manually
reverted the changes from the aforementioned commit.</li>
<li><p>
Then I executed next set of commands:
</p>
<pre class="example">
cd /usr/src/stand/
make clean
make
make install
</pre>

<p>
I should note that <code>make clean install</code> command, suggested at the mentioned
forum's message, didn't completed successfully on my machine. That's why
there are three consequtive <code>make</code> calls on the code block above.
</p>

<p>
These calls should be completed without an errors.
</p></li>
<li>At this point the <code>loader</code> with graphics support should be already installed
in the <code>/boot</code> directory. So, after a reboot, the graphics interface of
bootloader and the boot log of the kernel should appear on the screen.</li>
</ol>
</div>
</div>
<div id="outline-container-drm" class="outline-2">
<h2 id="drm">Direct Rendering Manager kernel module</h2>
<div class="outline-text-2" id="text-drm">
<p>
<i>This section is applicable till 31 March 2025. After the FreeBSD 14.1 EoL it
will be no longer neccessary.</i>
</p>

<p>
For now (February 2025) the drm-kmod kernel module is still building for
FreeBSD 14.1. So when I updated to 14.2 release, I've got a drm-kmod for 14.1
kernel with 14.2 kernel. Of course it didn't work properly and I've got nor
text consoles neither boot log (after <code>init</code> start). Only the X-server works,
which is starting automatically on boot on my laptop.
</p>

<p>
There are two "default" options I've found in the Internet:
</p>
<ol class="org-ol">
<li>Don't update till 31 March 2025. After this date the drm-kmod will be built
for FreeBSD 14.2 and it will be safe to update the system.</li>
<li>Update the system now and build proper DRM kernel module for 14.2 manually.</li>
</ol>

<p>
Fortunately, the <a href="https://mas.to/@patrizia@hachyderm.io">@patrizia@hachyderm.io</a> showed me the third option. There is
exists a special FreeBSD-kmods repository with drm-kmod, built for newly
released FreeBSD version.
</p>

<p>
Based on <a href="https://hachyderm.io/@patrizia/113897441053997542">this</a> and <a href="https://forums.freebsd.org/threads/new-install-of-14-2.96276/#post-684792">this</a>, the solution is simple:
</p>
<ol class="org-ol">
<li><p>
Add/edit the file <code>/usr/local/etc/pkg/repos/FreeBSD-kmods.conf</code>. It should
has the next contents for the system based on the quarterly releases:
</p>
<pre class="example">
FreeBSD-kmods: {
    url             : "pkg+https://pkg.freebsd.org/${ABI}/kmods_quarterly_${VERSION_MINOR}",
    enabled         : yes,
    priority        : 10,
    mirror_type     : "SRV",
    signature_type  : "FINGERPRINTS",
    fingerprints    : "/usr/share/keys/pkg"
}
</pre></li>
<li>Call <code>sudo pkg update</code> to check that the new repository is accessible.</li>
<li><p>
Check currently used drm-kmod version
</p>
<pre class="example">
% sudo pkg info | grep drm
drm-61-kmod-6.1.92.1402000_3   DRM drivers modules
drm-kmod-20220907_3            Metaport of DRM modules for the linuxkpi-based KMS components
</pre></li>
<li><p>
Check that this version (drm-61-kmod in my case) exists in FreeBSD-kmod repository:
</p>
<pre class="example">
% sudo pkg search -r FreeBSD-kmods drm
drm-515-kmod-5.15.160.1402000_2 DRM drivers modules
drm-61-kmod-6.1.92.1402000_3   DRM drivers modules
</pre></li>
<li><p>
Remove installed drm-kmod:
</p>
<pre class="example">
% sudo pkg remove drm-kmod drm-61-kmod
</pre></li>
<li><p>
And install drm-61-kmod from a proper repository:
</p>
<pre class="example">
% sudo pkg install -r FreeBSD-kmods drm-61-kmod &amp;&amp; sudo pkg install drm-kmod
</pre></li>
</ol>

<p>
After reboot the boot log and the text consoles are back!
</p>
</div>
</div>
<div id="outline-container-boot-loader-conf" class="outline-2">
<h2 id="boot-loader-conf">/boot/loader.conf</h2>
<div class="outline-text-2" id="text-boot-loader-conf">
<p>
There were two sections about FreeBSD 14.2 specific things, which I've added
to the system after upgrading from 14.1. Now I'll write about the real😎
system configuration.
</p>

<p>
Let's start with <code>/boot/loader.conf</code> — there is a configuration file for
<a href="https://man.freebsd.org/cgi/man.cgi?query=loader&amp;sektion=8&amp;format=html">loader(8)</a> — the 3rd stage bootloader, which loads the kernel. Most of
variables in this file are well described in <a href="https://man.freebsd.org/cgi/man.cgi?loader.conf">loader.conf(5)</a>.
</p>

<p>
The first section of my file describes <code>loader</code>-related configuration:
</p>
<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">1: </span><span style="color: #93a1a1;">##################</span>
<span class="linenr">2: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Loader settings:</span>
<span class="linenr">3: </span><span style="color: #93a1a1;">##################</span>
<span id="coderef-loader-conf-boot-delay" class="coderef-off"><span class="linenr">4: </span><span style="color: #268bd2;">autoboot_delay</span>=<span style="color: #2aa198;">"0"</span></span>
<span id="coderef-loader-conf-beastie" class="coderef-off"><span class="linenr">5: </span><span style="color: #268bd2;">beastie_disable</span>=<span style="color: #2aa198;">"YES"</span></span>
<span id="coderef-loader-conf-boot-mute" class="coderef-off"><span class="linenr">6: </span><span style="color: #268bd2;">boot_mute</span>=<span style="color: #2aa198;">"YES"</span></span>
<span class="linenr">7: </span><span style="color: #268bd2;">cpu_microcode_load</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">8: </span><span style="color: #268bd2;">cpu_microcode_name</span>=<span style="color: #2aa198;">"/boot/firmware/intel-ucode.bin"</span>
</pre>
</div>

<p>
Lines <a href="#coderef-loader-conf-boot-delay" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-boot-delay');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-boot-delay');">4</a> and <a href="#coderef-loader-conf-beastie" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-beastie');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-beastie');">5</a> are used to skip the
<code>loader</code>'s interactive menu and boot the kernel right after the computer is
turned on. I can still jump to the <code>loader</code> console by pressing any key while
the <code>loader</code> is loading modules and preparing to load the kernel.
</p>

<p>
Line <a href="#coderef-loader-conf-boot-mute" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-boot-mute');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-boot-mute');">6</a> used to hide the kernel log during
loading. Instead, the nice white FreeBSD logo is displayed, just like in other
consumer OSes:
</p>


<div class="figure">
<p><img src="/assets/static/bootlogo.png" alt="black and white FreeBSD boot logo" align="center" />
</p>
<p style="text-align: center"><i>FreeBSD logo during the boot if boot_mute="YES"</i></p>
</div>

<p>
The last two lines allow loading <a href="https://en.wikipedia.org/wiki/Microcode">Intel CPU microcode</a> during kernel
loading. The <code>sysutils/cpu-microcode-intel</code> package should be installed first!
</p>

<p>
In the next section, there are lines with kernel modules that the <code>loader</code> will
load:
</p>
<div class="org-src-container">
<pre class="src src-shell"><span class="linenr"> 9: </span><span style="color: #93a1a1;">##################</span>
<span class="linenr">10: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Modules to load:</span>
<span class="linenr">11: </span><span style="color: #93a1a1;">##################</span>
<span id="coderef-loader-conf-i915kms" class="coderef-off"><span class="linenr">12: </span><span style="color: #268bd2;">i915kms_load</span>=<span style="color: #2aa198;">"YES"</span></span>
<span id="coderef-loader-conf-aesni" class="coderef-off"><span class="linenr">13: </span><span style="color: #268bd2;">aesni_load</span>=<span style="color: #2aa198;">"YES"</span></span>
<span class="linenr">14: </span><span style="color: #268bd2;">cryptodev_load</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">15: </span><span style="color: #268bd2;">geom_eli_load</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">16: </span><span style="color: #268bd2;">zfs_load</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">17: </span><span style="color: #268bd2;">libiconv_load</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">18: </span><span style="color: #268bd2;">libmchain_load</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">19: </span><span style="color: #268bd2;">cd9660_iconv_load</span>=<span style="color: #2aa198;">"YES"</span>
<span id="coderef-loader-conf-cd9660-iconv" class="coderef-off"><span class="linenr">20: </span><span style="color: #268bd2;">msdosfs_iconv_load</span>=<span style="color: #2aa198;">"YES"</span></span>
<span class="linenr">21: </span><span style="color: #268bd2;">acpi_ibm_load</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">22: </span><span style="color: #268bd2;">acpi_video_load</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">23: </span><span style="color: #268bd2;">acpi_dock_load</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">24: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Load the H-TCP algorithm. It has a more aggressive ramp-up to max</span>
<span class="linenr">25: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">bandwidth, and its optimized for high-speed, high-latency connections.</span>
<span id="coderef-loader-conf-cc-htcp" class="coderef-off"><span class="linenr">26: </span><span style="color: #268bd2;">cc_htcp_load</span>=<span style="color: #2aa198;">"YES"</span></span>
<span id="coderef-loader-conf-cpuctl" class="coderef-off"><span class="linenr">27: </span><span style="color: #268bd2;">cpuctl_load</span>=<span style="color: #2aa198;">"YES"</span></span>
<span class="linenr">28: </span><span style="color: #268bd2;">coretemp_load</span>=<span style="color: #2aa198;">"YES"</span>
<span id="coderef-loader-conf-sysctlinfo" class="coderef-off"><span class="linenr">29: </span><span style="color: #268bd2;">sysctlinfo_load</span>=<span style="color: #2aa198;">"YES"</span></span>
<span class="linenr">30: </span><span style="color: #268bd2;">sysctlbyname_improved_load</span>=<span style="color: #2aa198;">"YES"</span>
</pre>
</div>

<p>
Although these lines may look a bit cryptic — they aren't. Most of these lines
were added by the <code>bsdinstaller</code> during the installation process. The
instructions for loading modules may look like the same instructions from
<code>/etc/rc.conf</code> — but they should be placed in <code>/boot/loader.conf</code>. This is
necessary because these modules <b>must</b> be loaded before the system mounts the
disks using <a href="https://man.freebsd.org/cgi/man.cgi?rc(8)">rc(8)</a> scripts. Without them, the system won't be able to mount the
disks and initialize the other hardware properly. That's why modules should be
loaded by the <code>loader</code> before initialization scripts loading.
</p>

<ul class="org-ul">
<li>Line <a href="#coderef-loader-conf-i915kms" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-i915kms');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-i915kms');">12</a> was added by myself — it instructs to load kernel
mode setting<sup><a id="fnr.modesetting-wiki" class="footref" href="#fn.modesetting-wiki" role="doc-backlink">1</a></sup> module for the Intel integrated video
card. Without it, there was no graphical output, at least in the console.</li>
<li><p>
Lines from <a href="#coderef-loader-conf-aesni" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-aesni');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-aesni');">13</a> through <a href="#coderef-loader-conf-cd9660-iconv" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-cd9660-iconv');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-cd9660-iconv');">20</a> load the
storage-related kernel modules. Some modules (<code>aesni</code>, <code>cryptodev</code>, <code>geom_eli</code> and
<code>zfs)</code> were added during the installation process. They are needed to decrypt
the encrypted disk partitions, to decrypt them fast enough, and for ZFS
support.
</p>

<p>
The <code>libiconv</code>, <code>libmchain</code>, <code>cd9660_iconv</code> and <code>msdosfs_iconv</code> modules were added
by myself. They are needed for codeset conversion when the path on the
mounted filesystem is not in UTF-8 but in something like CP1251, CP866,
etc. This usually happens when I mount some old ISOs from the 199Xs or
unpack some archives from the Windows XP era with Cyrillic filenames.
</p></li>
<li>Various <code>acpi_*</code> modules are needed to support Thinkpad-specific things:
<ul class="org-ul">
<li><a href="https://man.freebsd.org/cgi/man.cgi?query=acpi_ibm&amp;apropos=0&amp;sektion=4&amp;manpath=FreeBSD+14.2-RELEASE&amp;arch=default&amp;format=html">acpi_ibm(4)</a> provides access to Thinkpad-specific hardware available
through the ACPI interface. For example, ThinkLight status can be read via
<code>sysctl dev.acpi_ibm.0.thinklight</code>, and even enabled programmatically via
<code>sudo sysctl dev.acpi_ibm.0.thinklight=1</code>.</li>
<li><a href="https://man.freebsd.org/cgi/man.cgi?query=acpi_video&amp;apropos=0&amp;sektion=4&amp;manpath=FreeBSD+14.2-RELEASE&amp;arch=default&amp;format=html">acpi_video(4)</a> provides various controls for some video core outputs (LVDS,
VGA, etc).</li>
<li><a href="https://man.freebsd.org/cgi/man.cgi?query=acpi_dock&amp;apropos=0&amp;sektion=4&amp;manpath=FreeBSD+14.2-RELEASE&amp;arch=default&amp;format=html">acpi_dock(4)</a> is a docking station device driver.</li>
</ul></li>
<li>Line <a href="#coderef-loader-conf-cc-htcp" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-cc-htcp');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-cc-htcp');">26</a> was taken from <a href="https://www.sacredheartsc.com/blog/freebsd-14-on-the-desktop/">this blog post</a> to improve
performance when my laptop is connected to the Internet (my main use case).</li>
<li>The next two lines, starting at <a href="#coderef-loader-conf-cpuctl" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-cpuctl');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-cpuctl');">27</a>, are necessary to
access specific CPU-related information, such as CPUID or temperature, and
to perform CPU firmware updates.</li>
<li><p>
The last two lines, starting at <a href="#coderef-loader-conf-sysctlinfo" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-sysctlinfo');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-sysctlinfo');">29</a>, are added for
<a href="https://man.freebsd.org/cgi/man.cgi?query=mixertui&amp;sektion=8&amp;n=1">mixertui(8)</a> — an ncurses-like interface mixer for OSS:
</p>

<div class="figure">
<p><img src="/assets/static/mixertui.png" alt="Console interface for mixertui, with gauge controls for different sound inputs/outputs" align="center" />
</p>
<p style="text-align: center"><i>mixertui console interface</i></p>
</div></li>
</ul>

<p>
The last section contains some system settings. All of these settings are just
some <a href="https://man.freebsd.org/cgi/man.cgi?query=sysctl&amp;apropos=0&amp;sektion=8&amp;manpath=FreeBSD+14.2-RELEASE&amp;arch=default&amp;format=html">sysctl(8)</a> variables that are read-only on FreeBSD and can only be changed
by the <code>loader</code>.
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">31: </span><span style="color: #93a1a1;">##################</span>
<span class="linenr">32: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">System settings:</span>
<span class="linenr">33: </span><span style="color: #93a1a1;">##################</span>
<span id="coderef-loader-conf-allow-destructive-dtrace" class="coderef-off"><span class="linenr">34: </span>security.bsd.allow_destructive_dtrace=0</span>
<span class="linenr">35: </span><span style="color: #93a1a1;">#</span>
<span class="linenr">36: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Read only but tunable sysctl settings:</span>
<span class="linenr">37: </span><span style="color: #93a1a1;">#</span>
<span id="coderef-loader-conf-enable-fbc" class="coderef-off"><span class="linenr">38: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Enable framebuffer compression for power saving:</span></span>
<span class="linenr">39: </span>compat.linuxkpi.i915_enable_fbc=1
<span class="linenr">40: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Try to skip unnecessary mode sets at boot time:</span>
<span id="coderef-loader-conf-fastboot" class="coderef-off"><span class="linenr">41: </span>compat.linuxkpi.i915_fastboot=1</span>
<span id="coderef-loader-conf-synaptics" class="coderef-off"><span class="linenr">42: </span>hw.psm.synaptics_support=1</span>
<span class="linenr">43: </span>hw.psm.trackpoint_support=1
<span id="coderef-loader-conf-kern" class="coderef-off"><span class="linenr">44: </span>kern.hz=100</span>
<span class="linenr">45: </span>kern.ipc.shmmni=<span style="color: #2aa198;">"1024"</span>
<span class="linenr">46: </span>kern.ipc.shmseg=<span style="color: #2aa198;">"1024"</span>
<span class="linenr">47: </span>kern.maxproc=<span style="color: #2aa198;">"100000"</span>
<span class="linenr">48: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Enable faster soreceive() implementation:</span>
<span id="coderef-loader-conf-soreceive" class="coderef-off"><span class="linenr">49: </span>net.inet.tcp.soreceive_stream=<span style="color: #2aa198;">"1"</span></span>
<span class="linenr">50: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Increase the network interface queue link - the default (50) is way</span>
<span class="linenr">51: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">too low:</span>
<span id="coderef-loader-conf-queue-link" class="coderef-off"><span class="linenr">52: </span>net.isr.defaultqlimit=<span style="color: #2aa198;">"2048"</span></span>
<span class="linenr">53: </span>net.link.ifqmaxlen=<span style="color: #2aa198;">"2048"</span>
</pre>
</div>

<ul class="org-ul">
<li>The <a href="#coderef-loader-conf-allow-destructive-dtrace" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-allow-destructive-dtrace');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-allow-destructive-dtrace');">34</a>th line has been added by
<code>bsdinstall</code>. It removes DTrace's ability to work with system
internals<sup><a id="fnr.dtrace-internal" class="footref" href="#fn.dtrace-internal" role="doc-backlink">2</a></sup>.</li>
<li>The lines from <a href="#coderef-loader-conf-enable-fbc" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-enable-fbc');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-enable-fbc');">38</a> to <a href="#coderef-loader-conf-fastboot" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-fastboot');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-fastboot');">41</a> just
enable some nice features for my integrated Intel GMA X3100 video card.</li>
<li>Two lines starting at <a href="#coderef-loader-conf-synaptics" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-synaptics');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-synaptics');">42</a> line enable TrackPoint and
Synaptics touchpad support.</li>
<li>Four lines starting at <a href="#coderef-loader-conf-kern" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-kern');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-kern');">44</a> contain various kernel-related
handles that increase the defaults to make it more suitable for desktop
systems.</li>
<li>Line <a href="#coderef-loader-conf-soreceive" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-soreceive');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-soreceive');">49</a> and two lines after <a href="#coderef-loader-conf-queue-link" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-queue-link');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-queue-link');">52</a>
were taken from someone's blogpost to increase the network performance of my
laptop.</li>
</ul>
</div>
</div>
<div id="outline-container-etc-rc-conf" class="outline-2">
<h2 id="etc-rc-conf">/etc/rc.conf</h2>
<div class="outline-text-2" id="text-etc-rc-conf">
<p>
The next main configuration file in FreeBSD is an <code>/etc/rc.conf</code>. Here, as
stated in <a href="https://man.freebsd.org/cgi/man.cgi?rc.conf(5)">rc.conf(5)</a>, stored the next settings:
</p>
<ul class="org-ul">
<li>Network configuration, including hostname, interface(s) configuration, etc.</li>
<li>List services to run at system startup.</li>
<li>Sometimes, it includes configuration for <b>system</b> services.</li>
</ul>

<p>
List of services already populated by <code>bsdinstaller</code>, but I've added a lot more:
</p>
<div class="org-src-container">
<pre class="src src-shell"><span class="linenr"> 1: </span><span style="color: #93a1a1;">####################</span>
<span class="linenr"> 2: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Services to start:</span>
<span class="linenr"> 3: </span><span style="color: #93a1a1;">####################</span>
<span class="linenr"> 4: </span><span style="color: #268bd2;">local_unbound_enable</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr"> 5: </span><span style="color: #268bd2;">clear_tmp_enable</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr"> 6: </span><span style="color: #268bd2;">sshd_enable</span>=<span style="color: #2aa198;">"NO"</span>
<span class="linenr"> 7: </span><span style="color: #268bd2;">ntpd_enable</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr"> 8: </span><span style="color: #268bd2;">autofs_enable</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr"> 9: </span><span style="color: #268bd2;">zfs_enable</span>=<span style="color: #2aa198;">"YES"</span>
<span id="coderef-rc-conf-custom-lines" class="coderef-off"><span class="linenr">10: </span><span style="color: #268bd2;">dbus_enable</span>=<span style="color: #2aa198;">"YES"</span></span>
<span id="coderef-rc-conf-lightdm" class="coderef-off"><span class="linenr">11: </span><span style="color: #268bd2;">lightdm_enable</span>=<span style="color: #2aa198;">"YES"</span></span>
<span class="linenr">12: </span><span style="color: #268bd2;">powerd_enable</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">13: </span><span style="color: #268bd2;">wifibox_enable</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">14: </span><span style="color: #268bd2;">webcamd_enable</span>=<span style="color: #2aa198;">"YES"</span>
<span id="coderef-rc-conf-devmatch" class="coderef-off"><span class="linenr">15: </span><span style="color: #268bd2;">devmatch_enable</span>=<span style="color: #2aa198;">"YES"</span></span>
<span id="coderef-rc-conf-vm" class="coderef-off"><span class="linenr">16: </span><span style="color: #268bd2;">vm_enable</span>=<span style="color: #2aa198;">"YES"</span></span>
<span id="coderef-rc-conf-linux" class="coderef-off"><span class="linenr">17: </span><span style="color: #268bd2;">linux_enable</span>=<span style="color: #2aa198;">"YES"</span></span>
<span id="coderef-rc-conf-microcode-update" class="coderef-off"><span class="linenr">18: </span><span style="color: #268bd2;">microcode_update_enable</span>=<span style="color: #2aa198;">"YES"</span></span>
</pre>
</div>

<p>
My custom settings starting from line <a href="#coderef-rc-conf-custom-lines" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-rc-conf-custom-lines');" onmouseout="CodeHighlightOff(this, 'coderef-rc-conf-custom-lines');">10</a>. First, I enable
D-Bus — sadly, it is necessary for some programs even if I use i3wm, despite
it was created for KDE or Gnome — for example for <del>Firefox</del> Librewolf and
<a href="https://fprint.freedesktop.org/">fprintd</a> utilities.
</p>

<p>
Then (<a href="#coderef-rc-conf-lightdm" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-rc-conf-lightdm');" onmouseout="CodeHighlightOff(this, 'coderef-rc-conf-lightdm');">11</a>), I enable LightDM service — the nice and lightweight
login screen for X server:
</p>


<div class="figure">
<p><img src="/assets/static/lightdm.jpg" alt="LightDM login window" align="center" />
</p>
<p style="text-align: center"><i>LightDM login screen</i></p>
</div>

<p>
LightDM configuration for i3 was a bit tricky. But after some experiments I
added these lines to <code>/usr/local/etc/lightdm/lightdm.conf</code>:
</p>

<div class="org-src-container">
<pre class="src src-nil"><span class="linenr">1: </span>[Seat:*]
<span class="linenr">2: </span>xserver-share=true
<span class="linenr">3: </span>greeter-session=lightdm-gtk-greeter
<span class="linenr">4: </span>session-wrapper=/usr/local/etc/lightdm/Xsession
<span id="coderef-lightdm-conf-2k" class="coderef-off"><span class="linenr">5: </span>display-setup-script=xrandr --output DP-3 --primary --dpi 130</span>
</pre>
</div>

<p>
On the line <a href="#coderef-lightdm-conf-2k" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-lightdm-conf-2k');" onmouseout="CodeHighlightOff(this, 'coderef-lightdm-conf-2k');">5</a> there is a special command to properly setup X
server to display login screen on the right display with a right DPI.
</p>

<p>
Lets return to the <code>/etc/rc.conf</code>. Line <a href="#coderef-rc-conf-devmatch" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-rc-conf-devmatch');" onmouseout="CodeHighlightOff(this, 'coderef-rc-conf-devmatch');">15</a> enables auto-loading
of kernel modules with <a href="https://man.freebsd.org/cgi/man.cgi?query=devmatch&amp;sektion=8&amp;apropos=0&amp;manpath=FreeBSD+14.2-RELEASE+and+Ports">devmatch(8)</a> — I need it to blacklist some modules,
which is unnecessary in my configuration but load by default. And the line
<a href="#coderef-rc-conf-microcode-update" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-rc-conf-microcode-update');" onmouseout="CodeHighlightOff(this, 'coderef-rc-conf-microcode-update');">18</a> enables service to update CPU microcode on the
start (if package <code>sysutils/cpu-microcode-intel</code> is installed).
</p>

<p>
Then, I enable the <code>vm</code> service for <a href="https://github.com/churchers/vm-bhyve">bhyve-vm management console</a> (line
<a href="#coderef-rc-conf-vm" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-rc-conf-vm');" onmouseout="CodeHighlightOff(this, 'coderef-rc-conf-vm');">16</a>). And a <a href="https://docs.freebsd.org/en/books/handbook/linuxemu/">Linuxulator</a> — Linux compatibility layer — on the line
<a href="#coderef-rc-conf-linux" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-rc-conf-linux');" onmouseout="CodeHighlightOff(this, 'coderef-rc-conf-linux');">17</a>. Usually it is not necessary for normal FreeBSD operation
because all necessary programs built for FreeBSD. I don't remember why I
enable it, maybe to launch Dwarf Fortress, may be to lauch <a href="https://cataclysmdda.org/">Cataclysm-DDA</a>.
</p>

<p>
The most of the system-related configuration is already populated by the
<code>bsdinstaller</code>. So I've just added the few lines:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">19: </span><span style="color: #93a1a1;">#######################</span>
<span class="linenr">20: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">System configuration:</span>
<span class="linenr">21: </span><span style="color: #93a1a1;">#######################</span>
<span class="linenr">22: </span><span style="color: #268bd2;">hostname</span>=<span style="color: #2aa198;">"freebsd"</span>
<span id="coderef-rc-conf-kld-list" class="coderef-off"><span class="linenr">23: </span><span style="color: #268bd2;">kld_list</span>=<span style="color: #2aa198;">"fusefs ipsec ng_l2tp cuse"</span></span>
<span class="linenr">24: </span><span style="color: #268bd2;">syslogd_flags</span>=<span style="color: #2aa198;">"-ss"</span>
<span class="linenr">25: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Set dumpdev to "AUTO" to enable crash dumps, "NO" to disable</span>
<span class="linenr">26: </span><span style="color: #268bd2;">dumpdev</span>=<span style="color: #2aa198;">"NO"</span>
<span id="coderef-rc-conf-blacklist" class="coderef-off"><span class="linenr">27: </span><span style="color: #268bd2;">devmatch_blocklist</span>=<span style="color: #2aa198;">"if_iwm if_iwlwifi"</span></span>
</pre>
</div>

<ul class="org-ul">
<li>In the line <a href="#coderef-rc-conf-kld-list" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-rc-conf-kld-list');" onmouseout="CodeHighlightOff(this, 'coderef-rc-conf-kld-list');">23</a> I load some kernel modules: the <code>fusefs</code> and
the <code>cuse</code> modules. The first is necessary to work with <a href="https://en.wikipedia.org/wiki/Filesystem_in_Userspace">userspace
filesystems</a>. And the second is necessary for webcamd to operate with my
web-camera. Also, for some experiments with <a href="https://en.wikipedia.org/wiki/Layer_2_Tunneling_Protocol">L2TP</a> I load <code>ipsec</code> and <code>ng_l2tp</code>
modules.</li>
<li>And in the line <a href="#coderef-rc-conf-blacklist" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-rc-conf-blacklist');" onmouseout="CodeHighlightOff(this, 'coderef-rc-conf-blacklist');">27</a> I blacklisted modules for FreeBSD WiFi —
because I use <a href="https://man.freebsd.org/cgi/man.cgi?query=wifibox&amp;apropos=0&amp;sektion=8&amp;manpath=freebsd-ports&amp;format=html">wifibox(8)</a>, all FreeBSD related wireless networking shouldn't
interfere with it.</li>
</ul>

<p>
The daemons' configuration also populated by <code>bsdinstaller</code>:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">28: </span><span style="color: #93a1a1;">#########################</span>
<span class="linenr">29: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Services configuration:</span>
<span class="linenr">30: </span><span style="color: #93a1a1;">#########################</span>
<span class="linenr">31: </span><span style="color: #268bd2;">ntpd_sync_on_start</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">32: </span><span style="color: #268bd2;">moused_nondefault_enable</span>=<span style="color: #2aa198;">"NO"</span>
<span id="coderef-rc-conf-webcamd-conf" class="coderef-off"><span class="linenr">33: </span><span style="color: #268bd2;">webcamd_0_flags</span>=<span style="color: #2aa198;">"-d ugen0.5"</span></span>
<span id="coderef-rc-conf-vm-conf" class="coderef-off"><span class="linenr">34: </span><span style="color: #268bd2;">vm_dir</span>=<span style="color: #2aa198;">"zfs:hdd/vms"</span></span>
</pre>
</div>

<p>
Here I just added an option for <code>webcamd</code> to use only specified device as a my
web-camera (<a href="#coderef-rc-conf-webcamd-conf" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-rc-conf-webcamd-conf');" onmouseout="CodeHighlightOff(this, 'coderef-rc-conf-webcamd-conf');">33</a>), as written <a href="https://docs.freebsd.org/en/books/handbook/multimedia/index.html#webcam-setup">in documentation</a>. And
specified the separate ZFS pool on the thirdt HDD to use for my VMs.
</p>
</div>
</div>
<div id="outline-container-etc-sysctl-conf" class="outline-2">
<h2 id="etc-sysctl-conf">/etc/sysctl.conf</h2>
<div class="outline-text-2" id="text-etc-sysctl-conf">
<p>
The last main configuration file is a <code>/etc/sysctl.conf</code> with various system
variables.
</p>

<p>
The first section in my file is just a kernel-related settings:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr"> 1: </span><span style="color: #93a1a1;">##################</span>
<span class="linenr"> 2: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Kernel settings:</span>
<span class="linenr"> 3: </span><span style="color: #93a1a1;">##################</span>
<span class="linenr"> 4: </span>kern.geom.label.disk_ident.enable=<span style="color: #2aa198;">"0"</span>
<span class="linenr"> 5: </span>kern.geom.label.gptid.enable=<span style="color: #2aa198;">"0"</span>
<span class="linenr"> 6: </span>kern.randompid=1
<span class="linenr"> 7: </span>kern.coredump=0
<span class="linenr"> 8: </span>kern.corefile=/dev/null
<span class="linenr"> 9: </span>kern.vt.enable_bell=0
<span class="linenr">10: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Make desktop more responsive under high CPU load:</span>
<span class="linenr">11: </span>kern.sched.preempt_thresh=224
<span class="linenr">12: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Prevent shared memory from being swapped to disk:</span>
<span class="linenr">13: </span>kern.ipc.shm_use_phys=1
</pre>
</div>

<p>
Aside from the first lines added by the <code>bsdinstaller</code> and the commented lines,
there are the following settings:
</p>
<ul class="org-ul">
<li>Coredumps are disabled</li>
<li>Bell on the console is also disabled.</li>
</ul>

<p>
The next section in the file is hardware-specific:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">14: </span><span style="color: #93a1a1;">###################</span>
<span class="linenr">15: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Hardware setings:</span>
<span class="linenr">16: </span><span style="color: #93a1a1;">###################</span>
<span id="coderef-sysctl-conf-trackpoint" class="coderef-off"><span class="linenr">17: </span>hw.psm.trackpoint.sensitivity=150</span>
<span class="linenr">18: </span>hw.psm.trackpoint.upper_plateau=125
<span class="linenr">19: </span>hw.syscons.bell=0
<span class="linenr">20: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Enable sleep:</span>
<span id="coderef-sysctl-conf-suspend" class="coderef-off"><span class="linenr">21: </span>hw.pci.do_power_suspend=0</span>
<span class="linenr">22: </span>hw.pci.do_power_nodriver=1
<span class="linenr">23: </span>hw.acpi.lid_switch_state=S3
<span class="linenr">24: </span>hw.acpi.sleep_button_state=S3
<span class="linenr">25: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Override ACPI coretemp values:</span>
<span id="coderef-sysctl-conf-acpi-thermal" class="coderef-off"><span class="linenr">26: </span>hw.acpi.thermal.user_override=1</span>
<span class="linenr">27: </span>hw.acpi.thermal.tz0._PSV=80C
<span class="linenr">28: </span>hw.acpi.thermal.tz1._PSV=80C
<span class="linenr">29: </span>hw.acpi.thermal.tz0._CRT=199C
<span class="linenr">30: </span>hw.acpi.thermal.tz1._CRT=199C
</pre>
</div>

<p>
Here are my specific trackpoint sensivity values, starting at
line <a href="#coderef-sysctl-conf-trackpoint" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-sysctl-conf-trackpoint');" onmouseout="CodeHighlightOff(this, 'coderef-sysctl-conf-trackpoint');">17</a>. I chose these numbers experimentally, to get
the best user experience.
</p>

<p>
The four lines starting at <a href="#coderef-sysctl-conf-suspend" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-sysctl-conf-suspend');" onmouseout="CodeHighlightOff(this, 'coderef-sysctl-conf-suspend');">21</a>, configure the suspend
behavior for my laptop. The first two lines are from the FreeBSD forum. They
make my peripherals (especially the PCI Express card with USB3.0 ports in it)
work properly after the laptop wakes up. The last two lines tell the OS to go
to S3 state when I close the lid or press the sleep key (Fn+F4 on my Thinkpad
X220).
</p>

<p>
The five lines from <a href="#coderef-sysctl-conf-acpi-thermal" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-sysctl-conf-acpi-thermal');" onmouseout="CodeHighlightOff(this, 'coderef-sysctl-conf-acpi-thermal');">26</a> line are the <b>DANGEROUS</b> ones!
The first allows you to override thermal protections for the laptop. So, if
you configure something wrong, the laptop might melt🫠. The next two lines
lower the default temperature to disable the passive cooling — the defaults
were set to 90°C, which is too high for me.
</p>

<p>
And the last two lines are necessary to prevent some weird behaviour of my
laptop when it wakes up from the sleep state. Due to a some bug in the
Libreboot, my ThinkPad X220 doing some hard calculations with it's CPU for a
second, when it is waking up. And this second is enough for ACPI to decide,
"on ho, the CPU is overheating — let's turn off the everything!"
</p>

<p>
So, to prevent this unwanted shutdown I added those two lines. For now, laptop
still overheats for a second (fan noise increases) but it is successfully
wakes up and working like a charm. And it is not melt (yet)!
</p>

<p>
The next few lines are filesystem specific settings. Most of these are also
set by <code>bsdinstaller</code>.
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">29: </span><span style="color: #93a1a1;">###############</span>
<span class="linenr">30: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">VFS settings:</span>
<span class="linenr">31: </span><span style="color: #93a1a1;">###############</span>
<span id="coderef-sysctl-conf-usermount" class="coderef-off"><span class="linenr">32: </span>vfs.usermount=1</span>
<span class="linenr">33: </span>vfs.read_max=128
<span class="linenr">34: </span>vfs.zfs.min_auto_ashift=12 <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">4 KB blocks</span>
<span class="linenr">35: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Increase ZFS transaction timeout to save battery</span>
<span id="coderef-sysctl-conf-zfs-timeout" class="coderef-off"><span class="linenr">36: </span>vfs.zfs.txg.timeout=<span style="color: #2aa198;">"10"</span></span>
</pre>
</div>

<p>
I just made the following changes:
</p>
<ul class="org-ul">
<li>Allow user to mount filesystems in line <a href="#coderef-sysctl-conf-usermount" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-sysctl-conf-usermount');" onmouseout="CodeHighlightOff(this, 'coderef-sysctl-conf-usermount');">32</a>. Since I'm
the only one user of my laptop, I obviously allow myself to mount
filesystems from various USB drives, SD cards, etc.</li>
<li>The line <a href="#coderef-sysctl-conf-zfs-timeout" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-sysctl-conf-zfs-timeout');" onmouseout="CodeHighlightOff(this, 'coderef-sysctl-conf-zfs-timeout');">36</a> I took from the someone's blog. I can't
say that it significantly increases the battery life of the laptop&#x2026;</li>
</ul>

<p>
The next lines are not written by me — I took them from <a href="https://www.sacredheartsc.com/blog/freebsd-14-on-the-desktop/">this blogpost</a>:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">37: </span><span style="color: #93a1a1;">#############################</span>
<span class="linenr">38: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Network performance tuning:</span>
<span class="linenr">39: </span><span style="color: #93a1a1;">#############################</span>
<span class="linenr">40: </span>kern.ipc.maxsockbuf=2097152
<span class="linenr">41: </span>kern.ipc.soacceptqueue=1024
<span class="linenr">42: </span>kern.ipc.somaxconn=1024
<span class="linenr">43: </span>net.inet.tcp.abc_l_var=44
<span class="linenr">44: </span>net.inet.tcp.cc.abe=1
<span class="linenr">45: </span>net.inet.tcp.cc.algorithm=htcp
<span class="linenr">46: </span>net.inet.tcp.cc.htcp.adaptive_backoff=1
<span class="linenr">47: </span>net.inet.tcp.cc.htcp.rtt_scaling=1
<span class="linenr">48: </span>net.inet.tcp.ecn.enable=1
<span class="linenr">49: </span>net.inet.tcp.fast_finwait2_recycle=1
<span class="linenr">50: </span>net.inet.tcp.fastopen.server_enable=1
<span class="linenr">51: </span>net.inet.tcp.finwait2_timeout=5000
<span class="linenr">52: </span>net.inet.tcp.initcwnd_segments=44
<span class="linenr">53: </span>net.inet.tcp.keepcnt=2
<span class="linenr">54: </span>net.inet.tcp.keepidle=62000
<span class="linenr">55: </span>net.inet.tcp.keepinit=5000
<span class="linenr">56: </span>net.inet.tcp.minmss=536
<span class="linenr">57: </span>net.inet.tcp.msl=2500
<span class="linenr">58: </span>net.inet.tcp.mssdflt=1448
<span class="linenr">59: </span>net.inet.tcp.nolocaltimewait=1
<span class="linenr">60: </span>net.inet.tcp.recvbuf_max=2097152
<span class="linenr">61: </span>net.inet.tcp.recvspace=65536
<span class="linenr">62: </span>net.inet.tcp.sendbuf_inc=65536
<span class="linenr">63: </span>net.inet.tcp.sendbuf_max=2097152
<span class="linenr">64: </span>net.inet.tcp.sendspace=65536
<span class="linenr">65: </span>net.local.stream.recvspace=65536
<span class="linenr">66: </span>net.local.stream.sendspace=65536
</pre>
</div>

<p>
The next lines were added when I was experimenting with sleep on my
librebooted laptop:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">67: </span><span style="color: #93a1a1;">####################################################</span>
<span class="linenr">68: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Switch virtual consoles back and forth on suspend:</span>
<span class="linenr">69: </span><span style="color: #93a1a1;">####################################################</span>
<span class="linenr">70: </span>kern.vt.suspendswitch=0
<span class="linenr">71: </span>hw.acpi.sleep_delay=0
<span class="linenr">72: </span>hw.acpi.verbose=1
</pre>
</div>

<p>
After librebooting my laptop and suddenly finding that my RTC battery is
dead — I force the kernel to save system time to the RTC on system shutdown:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">73: </span><span style="color: #93a1a1;">#######################</span>
<span class="linenr">74: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Save datetime to RTC:</span>
<span class="linenr">75: </span><span style="color: #93a1a1;">#######################</span>
<span class="linenr">76: </span>machdep.disable_rtc_set=0
</pre>
</div>

<p>
Of course, I replaced the dead battery with the new one, but because I'm using
the laptop in the places where the Internet may not exists — I'm really
dependent on the right time value from the RTC chip.
</p>
</div>
</div>
<div id="outline-container-x-window-system" class="outline-2">
<h2 id="x-window-system">X Window System</h2>
<div class="outline-text-2" id="text-x-window-system">
<p>
I still use the X server in all my computers because … it just works and
requires minimal or no configuration itself (unless you need very special
features). I read a lot of comments on Reddit where people blame the X server
for requiring manual configuration, problems with video output, freezes,
crashes, and so on. But I have never experienced such problems with my Radeon,
NVidia and Intel integrated cards. The last time I was forced to configure X
server by hand was almost 2006-2007<sup><a id="fnr.slackware" class="footref" href="#fn.slackware" role="doc-backlink">3</a></sup>. The problems usually came with
video drivers in the extremely customized systems, like Gentoo with a custom
kernel and FreeBSD on the machine with a soldered-on 2K expansion board and 2K
display.
</p>

<p>
On my BSD box I have these lines in
<code>/usr/local/etc/X11/xorg.conf.d/10-intel.conf</code> to get the nice transparency and
other effects with picom:
</p>
<div class="org-src-container">
<pre class="src src-nil"><span class="linenr"> 1: </span>Section "Device"
<span class="linenr"> 2: </span>    Identifier  "Card0"
<span class="linenr"> 3: </span>    Driver      "intel"
<span class="linenr"> 4: </span>    BusID       "PCI:0:2:0"
<span class="linenr"> 5: </span>    Option      "Accel"        "true"
<span class="linenr"> 6: </span>    Option      "AccelMethod"  "SNA"
<span class="linenr"> 7: </span>    Option      "DRI"          "3"
<span class="linenr"> 8: </span>    Option      "TearFree"     "true"
<span class="linenr"> 9: </span>EndSection
<span class="linenr">10: </span>
<span class="linenr">11: </span>Section "Module"
<span class="linenr">12: </span>    Load        "dri3"
<span class="linenr">13: </span>EndSection
</pre>
</div>

<p>
Sometimes I use an external IBM MU29J ball mouse with two buttons:
</p>

<p>
    <img alt="IBM black ball mouse" style="height: 100%; width: 100%;
        object-fit: cover" src="/assets/images/uses/mouse.jpg"/>
</p>

<p>
So I added the next configuration for the X server to
<code>/usr/local/etc/X11/xorg.conf.d/20-ibm.conf</code>. This allows me to press the left
and right buttons at the same time to simulate pressing the middle button.
</p>

<div class="org-src-container">
<pre class="src src-nil"><span class="linenr">1: </span>Section "InputClass"
<span class="linenr">2: </span>    Identifier "IBM MU29J Mouse"
<span class="linenr">3: </span>    Driver "libinput"
<span class="linenr">4: </span>    MatchDevicePath "/dev/input/event9"
<span class="linenr">5: </span>    Option "MiddleEmulation" "on"
<span class="linenr">6: </span>    Option "AccelProfile" "flat"
<span class="linenr">7: </span>    Option "AccelSpeed" "1.0"
<span class="linenr">8: </span>EndSection
</pre>
</div>

<p>
The path <code>/dev/input/event9</code> is taken from <code>/var/log/Xorg.0.log</code> — it is printed
in this file after the mouse is connected.
</p>

<p>
The last custom configuration is a few lines to disable the touchpad when the
external mouse is connected and to send a click event when I tap on the
touchpad (it was disabled by default):
</p>

<div class="org-src-container">
<pre class="src src-nil"><span class="linenr">1: </span>Section "InputClass"
<span class="linenr">2: </span>    Identifier "X220 Touchpad"
<span class="linenr">3: </span>    MatchIsTouchpad "on"
<span class="linenr">4: </span>    MatchDevicePath "/dev/input/event*"
<span class="linenr">5: </span>    Driver "libinput"
<span class="linenr">6: </span>    Option "Tapping" "on"
<span class="linenr">7: </span>    Option "SendEventsMode" "disabled-on-external-mouse"
<span class="linenr">8: </span>EndSection
</pre>
</div>

<p>
I saved it as <code>/usr/local/etc/X11/xorg.conf.d/30-touchpad.conf</code> and after
restarting the X server, my touchpad automatically disables when the IBM mouse
is connected.
</p>
</div>
</div>
<div id="outline-container-power-management" class="outline-2">
<h2 id="power-management">Power management</h2>
<div class="outline-text-2" id="text-power-management">
<p>
To prolong life of the laptop when it's running on battery, I've just been
using the <a href="https://man.freebsd.org/cgi/man.cgi?powerd">powerd(8)</a> (this line from the <code>/etc/rc.conf</code>):
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #268bd2;">powerd_enable</span>=<span style="color: #2aa198;">"YES"</span>
</pre>
</div>

<p>
All necessary configuration are also placed in the <code>/etc/rc.conf</code>:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">35: </span><span style="color: #93a1a1;">######################</span>
<span class="linenr">36: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Power configuration:</span>
<span class="linenr">37: </span><span style="color: #93a1a1;">######################</span>
<span class="linenr">38: </span><span style="color: #268bd2;">powerd_flags</span>=<span style="color: #2aa198;">"-a hiadaptive -b adaptive -i 75 -N -M 2000"</span>
<span class="linenr">39: </span><span style="color: #268bd2;">performance_cx_lowest</span>=<span style="color: #2aa198;">"Cmax"</span>
<span class="linenr">40: </span><span style="color: #268bd2;">economy_cx_lowest</span>=<span style="color: #2aa198;">"Cmax"</span>
</pre>
</div>

<p>
Here I just select the <code>hiadaptive</code> mode when the laptop is running on AC power
and the <code>adaptive</code> mode when it is running on battery. As described in the
powerd man page:
</p>

<pre class="example">
hiadaptive  Like adaptive mode, but tuned for systems where performance
            and interactivity are more important than power consump-
            tion.  It increases frequency faster, reduces frequency
            less aggressively, and will maintain full frequency for
            longer.  May be abbreviated as hadp.
</pre>

<pre class="example">
adaptive    Attempt to strike a balance by degrading performance when
            the system appears idle and increasing it when the system
            is busy.  It offers a good balance between a small perfor-
            mance loss for greatly increased power savings.  May be ab-
            breviated as adp.
</pre>

<p>
Then I slightly increase the CPU load percent level at which powerd will start
to degrade performance to save the battery power. The default was at 50% and I
set it to the 75%.
</p>

<p>
And I set the maximum frequency that powerd will use to 2 GHz. Out of the box
my CPU can run at a maximum of 2.7 GHz, but I don't need so much computation
power, so I keep it at 2 GHz. The most CPU-intensive program — Librewolf with
a YouTube video playing in a tab — still works well with a 2 GHz CPU.
</p>

<p>
But I don't like it when my CPU is too hot (close to 50-60°C) when I watch the
YouTube videos. So, in order to trade some silence for CPU temperature, I
install the <a href="https://github.com/claudiozz/bsdfan">bsdfan</a> utility. This little thing allows me to tweak the
temperature levels at which the fan starts spinning.
</p>

<p>
This daemon starts with these simple lines in <code>/etc/rc.local</code>:
</p>
<div class="org-src-container">
<pre class="src src-shell"><span style="color: #93a1a1;">#</span><span style="color: #93a1a1;">!/bin/</span><span style="color: #859900; font-weight: bold;">sh</span>

/usr/local/bin/bsdfan -d
</pre>
</div>

<p>
And to stop the daemon on system shutdown, these lines were added to the
<code>/etc/rc.shutdown.local</code>:
</p>
<div class="org-src-container">
<pre class="src src-shell"><span style="color: #93a1a1;">#</span><span style="color: #93a1a1;">!/bin/</span><span style="color: #859900; font-weight: bold;">sh</span>

/usr/bin/pkill bsdfan
</pre>
</div>

<p>
I use the default configuration file, placed in the <code>/usr/local/etc/bsdfan.conf</code>
with tweaked values that I choose experimentally:
</p>
<div class="org-src-container">
<pre class="src src-nil">#Levels are defined with: level(level_number, level_min_temperature, level_max_temperature)
#level_number goes from 0 (fan not active) to 7 (fan at full speed)
#not all levels have to be used

#the first level 'level_min_temperature' must be equal to 0 and the last level 'level_max_temperature' must be &gt;150
#please define levels in ascending order by level_number
#be careful

level (0,0,39)
level (1,38,46)
level (3,39,49)
level (4,44,51)
level (5,46,52)
level (7,49,32767)
</pre>
</div>
</div>
</div>
<div id="outline-container-networking" class="outline-2">
<h2 id="networking">Networking</h2>
<div class="outline-text-2" id="text-networking">
<p>
I have the two network interfaces on the laptop:
</p>
<ul class="org-ul">
<li><code>em0</code> — the Ethernet card</li>
<li><code>wlan0</code> — the WiFi card.</li>
</ul>

<p>
Speaking of Ethernet it's pretty easy to configure. Just ask the DHCP server
for the network configuration and do it in the background so the system
doesn't wait at boot time if it's not connected to any networks:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">41: </span><span style="color: #93a1a1;">########################</span>
<span class="linenr">42: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Network configuration:</span>
<span class="linenr">43: </span><span style="color: #93a1a1;">########################</span>
<span class="linenr">44: </span><span style="color: #268bd2;">ifconfig_em0</span>=<span style="color: #2aa198;">"DHCP"</span>
<span class="linenr">45: </span><span style="color: #268bd2;">ifconfig_em0_descr</span>=<span style="color: #2aa198;">"Ethernet"</span>
<span class="linenr">46: </span><span style="color: #268bd2;">background_dhclient</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">47: </span><span style="color: #268bd2;">background_dhclient_em0</span>=<span style="color: #2aa198;">"YES"</span>
<span id="coderef-rc-conf-route-delay" class="coderef-off"><span class="linenr">48: </span><span style="color: #268bd2;">defaultroute_delay</span>=<span style="color: #2aa198;">"0"</span></span>
</pre>
</div>

<p>
Line <a href="#coderef-rc-conf-route-delay" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-rc-conf-route-delay');" onmouseout="CodeHighlightOff(this, 'coderef-rc-conf-route-delay');">48</a> tells the system not to wait at boot while the
interface(s) are getting address(es) from DHCP — it's also to speed up booting
when there are no networks.
</p>

<p>
The WiFi configuration is much trickier. Since I'm using an Intel 8260 WiFi
card<sup><a id="fnr.4" class="footref" href="#fn.4" role="doc-backlink">4</a></sup>, I can't (for now<sup><a id="fnr.freebsd-wifi" class="footref" href="#fn.freebsd-wifi" role="doc-backlink">5</a></sup>) rely on the default FreeBSD
drivers if I want to use the new enough IEEE 802.11 standards. So I start
using the <a href="https://github.com/pgj/freebsd-wifibox">wifibox</a>:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #268bd2;">wifibox_enable</span>=<span style="color: #2aa198;">"YES"</span>
</pre>
</div>

<p>
The system-side configuration is quite simple, and copies the configuration
for the <code>em0</code> interface:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">49: </span><span style="color: #268bd2;">ifconfig_wifibox0_descr</span>=<span style="color: #2aa198;">"WiFi (wifibox)"</span>
<span class="linenr">50: </span><span style="color: #268bd2;">ifconfig_wifibox0</span>=<span style="color: #2aa198;">"SYNCDHCP"</span>
<span class="linenr">51: </span><span style="color: #268bd2;">background_dhclient_wifibox0</span>=<span style="color: #2aa198;">"YES"</span>
</pre>
</div>

<p>
The configuration of the wifibox is well described in it's documentation and I
won't write about it here.
</p>
</div>
<div id="outline-container-usb-tethering" class="outline-3">
<h3 id="usb-tethering">USB tethering</h3>
<div class="outline-text-3" id="text-usb-tethering">
<p>
After reading the FreeBSD Handbook for the nth time, I found a few sentences
about USB tethering.
</p>

<p>
Back in the days, then phones didn't have the "smart" prefix, I used the cable
to connect my laptop to the Internet with my phone. The setup looks like this:
</p>
<ul class="org-ul">
<li>The phone connects to the Internet via the GPRS</li>
<li>The laptop connects to the phone via the USB cable</li>
<li>The driver in the OS (Linux) sees the phone as a usual modem (from the
dial-up era, of course).</li>
<li>Then the laptop can connect to the Internet via the <code>ppp</code>, just like in the
old days of 56K.</li>
</ul>

<p>
Times have changed and now smartphones can share their Internet connection via
WiFi. I have used this feature for some time. It has some advantages — for
example, if the WiFi interface is already configured on the system, then the
user should just connect to the right AP with the right password as usual to
connect to the Internet. There are also some disadvantages — the WiFi AP is
visible to everyone and the radio transmission drains the batteries of both
the laptop and the phone.
</p>

<p>
So I decided to experiment with USB tethering on the modern system to extend
the battery life and reduce the EMR for my devices. I used the Android phone,
other phones should use the different kernel modules<sup><a id="fnr.tethering-modules" class="footref" href="#fn.tethering-modules" role="doc-backlink">6</a></sup>.
</p>

<p>
On the FreeBSD side, the configuration is simple — I've just added the next
lines to <code>/etc/rc.conf</code> and rebooted:
</p>
<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">52: </span><span style="color: #268bd2;">if_urndis_load</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">53: </span><span style="color: #268bd2;">ifconfig_ue0</span>=<span style="color: #2aa198;">"DHCP"</span>
<span class="linenr">54: </span><span style="color: #268bd2;">ifconfig_ue0_descr</span>=<span style="color: #2aa198;">"Motorola Defy (tethering)"</span>
</pre>
</div>

<p>
On the phone side, the configuration is much easier — just connect the phone
to the laptop with the USB cable and select "USB tethering" in the
notification area.
</p>

<p>
After that, the <code>dmesg</code> should show that the OS has recognized the device as a
USB Ethernet peripheral:
</p>
<pre class="example">
ugen1.2: &lt;unknown TrebleDroid vanilla&gt; at usbus1
ugen1.2: &lt;unknown TrebleDroid vanilla&gt; at usbus1 (disconnected)
ugen1.2: &lt;unknown TrebleDroid vanilla&gt; at usbus1
urndis0 on uhub0
urndis0: &lt;unknown TrebleDroid vanilla, class 0/0, rev 2.00/4.19, addr 1&gt; on usbus1
ue0: &lt;USB Ethernet&gt; on urndis0
ue0: Ethernet address: 16:b5:c1:e6:61:58
</pre>

<p>
Then, to establish the connection through the new interface, the following
commands can be issued:
</p>
<pre class="example">
# service netif restart ue0
# service dhclient restart ue0
</pre>

<p>
I wrote a simple script to connect over the phone without typing a lot of
commands:
</p>
<div class="org-src-container">
<pre class="src src-shell"><span style="color: #93a1a1;">#</span><span style="color: #93a1a1;">!/usr/bin/</span><span style="color: #859900; font-weight: bold;">env</span><span style="color: #93a1a1;"> zsh</span>

<span style="color: #859900; font-weight: bold;">if</span> [ -f /usr/bin/x11-ssh-askpass ]; <span style="color: #859900; font-weight: bold;">then</span>
    <span style="color: #657b83; font-weight: bold;">export</span> <span style="color: #268bd2;">SUDO_ASKPASS</span>=<span style="color: #2aa198;">"/usr/bin/x11-ssh-askpass"</span>
<span style="color: #859900; font-weight: bold;">elif</span> [ -f /usr/local/bin/x11-ssh-askpass ]; <span style="color: #859900; font-weight: bold;">then</span>
    <span style="color: #657b83; font-weight: bold;">export</span> <span style="color: #268bd2;">SUDO_ASKPASS</span>=<span style="color: #2aa198;">"/usr/local/bin/x11-ssh-askpass"</span>
<span style="color: #859900; font-weight: bold;">else</span>
    <span style="color: #859900; font-weight: bold;">exit</span> 1
<span style="color: #859900; font-weight: bold;">fi</span>

<span style="color: #859900; font-weight: bold;">case</span> $(<span style="color: #657b83; font-weight: bold;">echo</span> <span style="color: #2aa198;">"disable wifi:phone connect:phone disconnect"</span> | rofi -dpi 0 -dmenu -sep <span style="color: #2aa198;">":"</span> -p <span style="color: #2aa198;">"Select"</span>) <span style="color: #859900; font-weight: bold;">in</span>
    <span style="color: #2aa198;">"disable wifi"</span>)
        sudo -A service wifibox stop
        ;;
    <span style="color: #2aa198;">"phone connect"</span>)
        sudo -A service netif stop em0
        sudo -A service wifibox stop
        sudo -A service netif restart ue0
        sudo -A service dhclient restart ue0
        ;;
    <span style="color: #2aa198;">"phone disconnect"</span>)
        sudo -A service netif restart
        sudo -A service wifibox restart
        sudo -A service dhclient restart em0
        sudo -A service dhclient restart wifibox0
        ;;
<span style="color: #859900; font-weight: bold;">esac</span>
</pre>
</div>

<p>
This code displays a rofi menu with the three items and runs the appropriate
commands with sudo. The sudo will ask for a password using the askpass facility and
then execute the necessary set of commands to enable/disable network
interfaces.
</p>
</div>
</div>
</div>
<div id="outline-container-storage" class="outline-2">
<h2 id="storage">Storage</h2>
<div class="outline-text-2" id="text-storage">
<p>
Let's review my storage-specific configuration. As you can see from the <a href="#etc-rc-conf">/etc/rc.conf</a> section, I'm using the <a href="https://man.freebsd.org/cgi/man.cgi?query=autofs&amp;sektion=5&amp;format=html">autofs(5)</a> to automount the removable USB
drives with the next (default) configuration in the <code>/etc/auto_master</code>:
</p>
<pre class="example">
#
# Automounter master map, see auto_master(5) for details.
#
/net		-hosts		-nobrowse,nosuid,intr
# When using the -media special map, make sure to edit devd.conf(5)
# to move the call to "automount -c" out of the comments section.
/media		-media		-nosuid
</pre>

<p>
As you can see from the output of the <code>zpool status zroot</code> command at the top of
the post — I am using two disks in a pool for the root filesystem. Some data
is written to the 500 Gb SSD and some is written to the 150 Gb SSD:
</p>
<pre class="example">
# zpool iostat -v zroot
                capacity     operations     bandwidth
pool          alloc   free   read  write   read  write
------------  -----  -----  -----  -----  -----  -----
zroot         97.1G   482G     59     17  6.26M   622K
  ada0p3.eli  35.3G  99.7G     21      7  2.26M   231K
  ada2p3.eli  61.9G   382G     38     10  3.99M   391K
------------  -----  -----  -----  -----  -----  -----
</pre>

<p>
There is no redundancy — if one disk fails, the entire root filesystem
fails. So backups a very important to me.
</p>

<p>
ZFS comes to the rescue here! To make a snapshot of the root filesystem, I use
the next command (after the <code>@</code> symbol you can add any string you like, usually
the timestamp):
</p>
<pre class="example">
# zfs snapshot -r zroot@2025-03-09
</pre>

<p>
To check which snapshot was created, I use the next command for the <code>zroot</code>
mounted on the <code>/</code>:
</p>
<pre class="example">
% s ls -ls /.zfs/snapshot
total 255
17 drwxr-xr-x  20 root wheel   26B Jun 26  2024 2024-06-26-21:56:36-0/
17 drwxr-xr-x  20 root wheel   26B Jun 26  2024 2024-06-26-22:36:03-0/
17 drwxr-xr-x  20 root wheel   26B Jun 26  2024 2024-06-26-22:39:36-0/
17 drwxr-xr-x  20 root wheel   26B Jun 27  2024 2024-06-26-22:48:38-0/
17 drwxr-xr-x  20 root wheel   26B Aug 23  2024 2024-08-23-17:11:49-0/
17 drwxr-xr-x  20 root wheel   26B Sep  5  2024 2024-09-05-08:32:00-0/
17 drwxr-xr-x  20 root wheel   26B Oct 10 10:29 2024-10-10-10:58:23-0/
17 drwxr-xr-x  22 root wheel   28B Oct 30 20:09 2024-10-30-21:48:22-0/
17 drwxr-xr-x  22 root wheel   28B Jan 26 14:59 2025-01-26-17:15:24-0/
17 drwxr-xr-x  22 root wheel   28B Jan 26 17:17 2025-01-26-17:18:53-0/
17 drwxr-xr-x  22 root wheel   28B Feb  4 21:18 2025-02-04-21:20:58-0/
17 drwxr-xr-x  22 root wheel   28B Feb 10 01:32 2025-02-10-02:16:57-0/
17 drwxr-xr-x  22 root wheel   28B Feb 25 00:30 2025-02-25-00:45:45-0/
17 drwxr-xr-x  22 root wheel   28B Mar  9 10:40 2025-03-09/
17 drwxr-xr-x  21 root wheel   27B Oct 27 01:45 backup_recursive_2024-10-27/
</pre>

<p>
As you can see, there are a lot of outdated backups, mostly created by the
<code>freebsd-update</code> utility. I remove them with the <code>zfs destroy</code> command:
</p>
<pre class="example">
# zfs destroy -R zroot@backup_recursive_2024-10-27
# zfs destroy -R zroot/ROOT/default@2024-06-26-21:56:36-0
# zfs destroy -R zroot/ROOT/default@2024-06-26-22:36:03-0
# zfs destroy -R zroot/ROOT/default@2024-06-26-22:39:36-0
...
</pre>

<p>
After that, the only one (current) snapshot remains in the system:
</p>
<pre class="example">
# zfs list -r -t snapshot
NAME                            USED  AVAIL  REFER  MOUNTPOINT
zroot@2025-03-09                  0B      -    96K  -
zroot/ROOT@2025-03-09             0B      -    96K  -
zroot/ROOT/default@2025-03-09     0B      -  43.6G  -
zroot/home@2025-03-09             0B      -  49.9G  -
zroot/tmp@2025-03-09              0B      -   224K  -
zroot/usr@2025-03-09              0B      -    96K  -
zroot/usr/ports@2025-03-09        0B      -  2.65G  -
zroot/usr/src@2025-03-09          0B      -   857M  -
zroot/var@2025-03-09              0B      -    96K  -
zroot/var/audit@2025-03-09        0B      -   360K  -
zroot/var/crash@2025-03-09        0B      -    96K  -
zroot/var/log@2025-03-09          0B      -  3.93M  -
zroot/var/mail@2025-03-09         0B      -   576K  -
zroot/var/tmp@2025-03-09          0B      -   104K  -
# ls -ls /.zfs/snapshot
total 17
17 drwxr-xr-x  22 root wheel   28B Mar  9 10:40 2025-03-09/
</pre>

<p>
Restoring from this snapshot can be done with the:
</p>
<pre class="example">
# zfs rollback zroot@2025-03-09
</pre>

<p>
Snapshot can also be sent anywhere with the:
</p>
<pre class="example">
# zfs send zroot@2025-03-09 | send_it_somewhere
</pre>

<p>
or:
</p>

<pre class="example">
# zfs send zroot@2025-03-09 &gt; /backup/2025-03-09-zroot.snap
</pre>

<p>
To check the health of my disks and to verify the checksums of the files in my
pools, here are the next set of commands:
</p>
<pre class="example">
 $ zpool status -x
all pools are healthy
# zpool scrub zroot
# zpool scrub hdd
</pre>

<p>
The last two commands start a lot of heavy I/O operations, so don't launch
them if the system is already using the disks intensively! Estimates and
results of the scrubbing operation can be viewed using the <code>zpool status</code>
command.
</p>

<p>
The FreeBSD Handbook recommends launch scrubbing at least once a month.
</p>
</div>
</div>
<div id="outline-container-fingerprint-scanner" class="outline-2">
<h2 id="fingerprint-scanner">Fingerprint scanner</h2>
<div class="outline-text-2" id="text-fingerprint-scanner">
<p>
Some day, some time, I decided to configure fingerprint scanner on my
laptop. Many years ago I wrote an article about libfprint for IBM Portal, so I
thought that setting up fingerprint service will not be so difficult.
</p>


<div class="figure">
<p><img src="/assets/static/fingerprint_scanner.jpg" alt="fingerprint scanner with turned on green LED on the left" align="center" width="50%" />
</p>
<p style="text-align: center"><i>Thinkpad X220 fingerprint scanner</i></p>
</div>

<p>
As a starting documentation I take the next blog post:
<a href="https://hauweele.net/~gawen/blog/?p=408">https://hauweele.net/~gawen/blog/?p=408</a> and slightly modify some steps to fit
them to my system:
</p>

<ol class="org-ol">
<li><p>
First, I install all the necessary packages:
</p>
<pre class="example">
pkg install fprintd libfprint
</pre></li>
<li><p>
Then, I add my user to the <code>fprint</code> group to access the scanner device
without elevating to root:
</p>
<pre class="example">
pw groupadd fprint
pw groupmod fprint -m drag0n
</pre></li>
<li><p>
To get the correct permissions on the device file itself, I play with
<code>devd</code> — create the file <code>/usr/local/etc/devd/fingerprint.conf</code> and add the
following lines:
</p>
<pre class="example">
notify 100 {
    match "system"      "USB";
    match "subsystem"   "DEVICE";
    match "type"        "ATTACH";
    match "vendor"      "0x147e";
    match "product"     "0x2016";
    action "chown drag0n:fprint /dev/$cdev &amp;&amp; chmod 660 /dev/$cdev";
};
</pre>

<p>
After that I reboot the system to apply the new settings.
</p></li>
<li><p>
Then, I ran into the D-Bus-related problems🤮. The <code>libfprint</code> utilities
communicate with the daemon via D-Bus and my user can't connect to the
daemon via it.
</p>

<p>
I don't use D-Bus in my system — I only have it to work with the <a href="https://dunst-project.org/">dunst
notification daemon</a>. There is a lightweight replacement for the big
notification daemons of a large desktop environments, which I obviously
don't use either. It works fine for me out of the box.
</p>

<p>
But it is not a case of <code>libfprint</code> utilities. So I've added the next lines
to <code>/usr/local/share/dbus-1/system.d/net.reactivated.Fprint.conf</code>:
</p>

<pre class="example">
&lt;policy user="drag0n"&gt;
  &lt;allow own="net.reactivated.Fprint"/&gt;
&lt;/policy&gt;
</pre></li>
<li><p>
And finally it's time to use fingerprints instead of passwords! Because I'm
a bit paranoid, I don't want to use fingerprints instead of a login
password or any other high-value passwords (like a password to unlock a GPG
key). Obviously, if I do that, then <i>some</i> bad actors can forcibly roll my
finger on the scanner and get access to my system.
</p>

<p>
So, I decide to use fingerprint instead of password only with <code>sudo</code>. If I'm
already logged in and someone catches me and forcibly rolls my finger —
then I'm <b>already</b> <i>sooo fucked up</i> before that event!
</p>

<p>
To use the fingerprint scanner with <code>sudo</code>, I've just added this line to the
top of the file <code>/usr/local/etc/pam.d/sudo</code>:
</p>

<pre class="example">
auth       sufficient  /usr/local/lib/security/pam_fprintd.so
</pre></li>
<li>Finally, I soft reboot the system with <code>reboot -r</code> and enroll my finger with
the <code>sudo fprintd-enroll drag0n</code> command. To verify that the finger was
successfully scanned, I killed the <code>fprintd</code> daemon and verified the finger
with the <code>fprintd-verify</code> command.</li>
</ol>

<p>
Now, <code>sudo</code> asks me for my finger first and then asks for the password after
three failed attempts to get a proper fingerprint:
</p>
<pre class="example">
~ % sudo uname
Swipe your right index finger across the fingerprint reader
Your finger was not centered, try swiping your finger again
FreeBSD
</pre>
</div>
</div>
<div id="outline-container-files-to-download" class="outline-2">
<h2 id="files-to-download">Files to download</h2>
<div class="outline-text-2" id="text-files-to-download">
<ul class="org-ul">
<li><a href="/assets/static/loader.conf.txt">/boot/loader.conf</a></li>
<li><a href="/assets/static/rc.conf.txt">/etc/rc.conf</a></li>
<li><a href="/assets/static/sysctl.conf.txt">/etc/sysctl.conf</a></li>
<li><a href="/assets/static/10-intel.conf.txt">/usr/local/etc/X11/xorg.conf.d/10-intel.conf</a></li>
<li><a href="/assets/static/20-ibm.conf.txt">/usr/local/etc/X11/xorg.conf.d/20-ibm.conf</a></li>
<li><a href="/assets/static/30-touchpad.conf.txt">/usr/local/etc/X11/xorg.conf.d/30-touchpad.conf</a></li>
<li><a href="/assets/static/bsdfan.conf.txt">/usr/local/etc/bsdfan.conf</a></li>
<li><a href="/assets/static/phone-connect.sh.txt">phone-connect.sh</a></li>
</ul>
</div>
</div>
<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2" id="text-notes">
</div>
</div>
<div id="footnotes">

<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.modesetting-wiki" class="footnum" href="#fnr.modesetting-wiki" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://en.wikipedia.org/wiki/Mode_setting">https://en.wikipedia.org/wiki/Mode_setting</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.dtrace-internal" class="footnum" href="#fnr.dtrace-internal" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
For example, it is possible to call <code>panic()</code> via DTrace.
</p></div></div>

<div class="footdef"><sup><a id="fn.slackware" class="footnum" href="#fnr.slackware" role="doc-backlink">3</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
In these times I used Slackware (MOPSLinux) and <code>Xconfigure</code>
generates wrong <code>/etc/X11/xorg.conf</code> for my AGP video card and CRT monitor, so I
was forced to write it by hands with proper monitor description and
proprietary driver's section included.
</p>

<p class="footpara">
<a href="https://eugene-andrienko.com/en/it/2024/01/02/life-in-console">https://eugene-andrienko.com/en/it/2024/01/02/life-in-console</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.4" class="footnum" href="#fnr.4" role="doc-backlink">4</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
TL-8260D2W
</p></div></div>

<div class="footdef"><sup><a id="fn.freebsd-wifi" class="footnum" href="#fnr.freebsd-wifi" role="doc-backlink">5</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://freebsdfoundation.org/blog/why-laptop-support-why-now-freebsds-strategic-move-toward-broader-adoption/">Why laptop support, why now: FreeBSD’s strategic move toward
broader adoption</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.tethering-modules" class="footnum" href="#fnr.tethering-modules" role="doc-backlink">6</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
See the documentation:
<a href="https://docs.freebsd.org/en/books/handbook/advanced-networking/#network-usb-tethering">https://docs.freebsd.org/en/books/handbook/advanced-networking/#network-usb-tethering</a>
</p></div></div>


</div>
</div>]]></content><author><name>Eugene Andrienko</name></author><category term="it" /><category term="freebsd" /><category term="thinkpad" /><summary type="html"><![CDATA[Since I've wrote post about my specific FreeBSD settings for Thinkpad X220 near 5 years have passed. That post has a lot of additions and become a bit messy. So, after I updated FreeBSD on my laptop up to 14.2 version and finally found some time to carefully read a "FreeBSD handbook", I decided to write a new article about my configuration and about few useful utilities and tricks.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://eugene-andrienko.com/assets/static/freebsd14-2-thinkpad.jpg" /><media:content medium="image" url="https://eugene-andrienko.com/assets/static/freebsd14-2-thinkpad.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="en"><title type="html">LineageOS 21 on the Motorola Defy (2021)</title><link href="https://eugene-andrienko.com/en/it/2025/02/08/motorola-defy-2021-lineage-os.html" rel="alternate" type="text/html" title="LineageOS 21 on the Motorola Defy (2021)" /><published>2025-02-08T00:00:00+03:00</published><updated>2025-02-08T00:00:00+03:00</updated><id>https://eugene-andrienko.com/it/2025/02/08/motorola-defy-2021-lineage-os</id><content type="html" xml:base="https://eugene-andrienko.com/it/2025/02/08/motorola-defy-2021-lineage-os.html"><![CDATA[<p>
I have been using the <a href="https://www.gsmarena.com/motorola_defy_(2021)-10969.php">Motorola Defy (2021)</a> smartphone for almost 3
years. There is one of the rugged phones that has an <a href="https://en.wikipedia.org/wiki/IP_code#Code_breakdown">IP68</a> and a decent
thickness — it fits perfectly in my pocket. It looks like a normal phone in
the case, but there is no case — there is a phone body.
</p>

<p>
I've "tested" this rugged phone a lot:
</p>
<ul class="org-ul">
<li>I dropped it on its side on the tiled floor and on the asphalt pavement.</li>
<li>I used the phone in the rain and in high humidity environment.</li>
<li>Dropped it display side down on the tiled floor.</li>
<li>Dropped it display side down onto a pond on the asphalt road.</li>
</ul>

<p>
Nevertheless, the only injury of the phone — a small dent on the corner where
I dropped it when I got out of the car.
</p>

<p>
Unfortunately, I can't say the same for the phone's software. There are the
unnecessary for me (and undeletable) weather forecast application from
Motorola and a full set of undeletable applications from Google. These
applications are unsuitable for me, or I can't even use them — because the
corresponding services aren't available in Russia (for example, Google Pay
app).
</p>

<p>
Also, after I signed in to my Google account, Google Play went crazy and
started installing a lot of Russian applications that are unnecessary for me:
Gosuslugi, VK, Odnoklassniki, almost all Yandex apps, MirPay and something
from the Sberbank. Fortunately, these applications were installed as usual
applications and I was able to delete them.
</p>

<p>
Most of the time I used FOSS applications from F-Droid and never felt a
grief. But, as it usually happens, after another update from Google, I got
problems. Sometimes, when I'm was installing or updating the application from
F-Droid, the OS shows me the next "warning" window for me (it comes from
Google "Safety" Net):
</p>


<div class="figure">
<p><img src="/assets/static/google_play_protect.png" alt="Google safety warning than installing applications from F-Droid" align="center" width="25%" />
</p>
</div>

<p>
As a result, I get rid of such "caring" behavior from Google. In addition, I
want to remove some pre-installed applications and take the ability to install
applications from F-Droid with one button and no dialog: "Do you really want
to install this application from unknown source?"
</p>

<p>
I knew, what I can get all I want from the some opensource Android
distribution. The most important thing for me — this distribution should
support the phones hardware and allow root access. Since my phone is not so
popular among the hackers — there is no support from <a href="https://grapheneos.org/">GrapheneOS</a>, <a href="https://postmarketos.org/">postmarketOS</a>
or the same operating systems.
</p>

<p>
Fortunately, I found some posts on the XDA Developers forum, <a href="https://xdaforums.com/f/motorola-defy-2021.12369/">in the topic</a>
about Motorola Defy (2021).
</p>
<div class="outline-2">
<h2>TOC&#xa0;&#xa0;&#xa0;<span class="tag"></span></h2>
<div class="outline-text-2">
<ul class="org-ul">
<li><a href="#preparations">Preparations before flashing the phone's memory</a></li>
<li><a href="#bootloader-unlock">Bootloader unlock</a></li>
<li><a href="#system-software-reflash">Rewriting the system software</a></li>
<li><a href="#lineage-os-install">Lineage OS install</a></li>
<li><a href="#android-root">Root user access</a></li>
<li><a href="#4g-calls-sms">4G calls and SMS</a></li>
<li><a href="#disable-floating-shit-on-copy">Disabling nonsensical popup when copying text</a></li>
<li><a href="#turn-off-usb-debugging">Turn off USB debugging</a></li>
<li><a href="#root-apps">Applications with root access</a>
<ul class="org-ul">
<li><a href="#appstores">Application stores</a></li>
<li><a href="#firewall">Firewall (AFWall+)</a></li>
<li><a href="#adblocker">System-wide ad blocker (AdAway)</a></li>
<li><a href="#acca">AccA — to control accumulator (dis)charging</a></li>
<li><a href="#colorblendr">System theme color change (ColorBlendr)</a></li>
<li><a href="#sdmaid2se">System cleaner (SD Maid 2/SE)</a></li>
</ul></li>
<li><a href="#backups">Backups</a>
<ul class="org-ul">
<li><a href="#neobackup">Neo Backup</a></li>
<li><a href="#flash-memory-backup">Flash memory backup</a></li>
</ul></li>
<li><a href="#bugs">BUGS</a></li>
<li><a href="#notes">Notes</a></li>
</ul>
</div>
</div>
<div id="outline-container-preparations" class="outline-2">
<h2 id="preparations">Preparations before flashing the phone's memory</h2>
<div class="outline-text-2" id="text-preparations">
<p>
First, I made a list of all the necessary applications, installed on my
phone. Then I made a backup of all the valuable data — fortunately, almost all
FOSS applications allow me to backup user data and settings.
</p>

<p>
Also, just in case, I wrote down my IMEI — I didn't need it afterwards, but
this note saved me a lot of nerve cells.
</p>

<p>
To flash the phone's flash memory I only needed two utilities:
</p>
<ol class="org-ol">
<li><a href="https://developer.android.com/tools/adb">adb</a> (<code>dev-util/android-tools</code> for Gentoo) — it is needed to access the
settings, hidden from users. And to reboot the phone not in Android, but in
various service programs that are also stored in the phone's flash memory.</li>
<li><a href="https://en.wikipedia.org/wiki/Fastboot">fastboot</a> (in the Gentoo it is installed with the same package) — it is
necessary to write binary files to the phone's flash memory.</li>
</ol>

<p>
To successfully complete the next steps, I've double-checked the phone model
code and the localization code in the phone settings. <b>NB!</b> All actions were
performed for the phone with model code XT2083-9 and with localization code
RETEU!
</p>
</div>
</div>
<div id="outline-container-bootloader-unlock" class="outline-2">
<h2 id="bootloader-unlock">Bootloader unlock</h2>
<div class="outline-text-2" id="text-bootloader-unlock">
<p>
Factory new Android smartphones shipped with a locked bootloader — it
prohibits to write to some areas of the flash memory (usually there are areas
with OS and the bootloader itself). From the one side, this is a useful thing,
because anyone with a physical access to your phone simply can't write
anything into the corresponding flash regions. From another side, this thing
forbids me to do whatever I want with the phone, as its full owner.
</p>

<p>
To install Lineage OS I had to unlock the bootloader to be able to write the
necessary files to the flash memory. The main steps are described here:
<a href="https://source.android.com/docs/core/architecture/bootloader/locking_unlocking">https://source.android.com/docs/core/architecture/bootloader/locking_unlocking</a>.
</p>

<p>
First, I need to get access to "Developer Options" in the Settings. Here the
everything as usual — I just opened "System⇒About Phone" and after a few taps
on the Android version menu item — I've got the necessary access. After, I
enabled "USB debugging" via "System⇒Advanced⇒Developer options" submenu. Then
I rebooted the phone to the bootloader UI with the next steps:
</p>

<ol class="org-ol">
<li>I connected the phone to the PC using USB cable with data lanes in it.</li>
<li>I pressed "USB Preferences" in the notification bar and selected "Use USB
for: PTP".</li>
<li>Then, in the window that popped up, I allowed "debug connection to the PC".</li>
<li><p>
Then, I checked that <code>adb</code> can see the connected phone:
</p>
<pre class="example">
% adb devices
List of devices attached
ZY32DG32K2      device
</pre></li>
<li>Finally, I reboot the phone with the command: <code>adb reboot bootloader</code>.</li>
</ol>

<p>
As a result, the phone screen shows the next interface:
</p>


<div class="figure">
<p><img src="/assets/static/bootloader.jpg" alt="Motorola Defy (2021) in the bootloader mode" align="center" />
</p>
<p style="text-align: center"><i>Motorola Defy (2021), booted in the bootloader</i></p>
</div>

<p>
Then, it's time for the <code>fastboot</code>. In my case this utility didn't see the
connected phone, but after I changed the permissions for <code>/dev/bus/usb/001/018</code>,
the <code>fastboot</code> started to see the phone:
</p>

<pre class="example">
% fastboot devices -l
% lsusb
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 001 Device 002: ID 8087:0024 Intel Corp. Integrated Rate Matching Hub
Bus 001 Device 003: ID 046d:c24e Logitech, Inc. G500s Laser Gaming Mouse
Bus 001 Device 018: ID 22b8:2e80 Motorola PCS Fastboot bathena S
% ls -l /dev/bus/usb/001/
total 0
crw-rw-r-- 1 root usb     189,  0 Dec 31 00:09 001
crw-rw-r-- 1 root usb     189,  1 Dec 31 00:09 002
crw-rw-r-- 1 root usb     189,  2 Dec 31 00:09 003
crw-rw---- 1 root android 189, 17 Dec 31 17:28 018
% sudo chown -R drag0n:drag0n /dev/bus/usb/001/018
% fastboot devices
ZY32DG32K2       fastboot
</pre>

<p>
To prevent inexperienced users from unlocking the bootloader out of ignorance
and get a less secure phone. And to prevent experienced users from doing
anything what they want with their phones — different phone manufacturers
require extra steps to unlock the bootloader. In my case, the <code>fastboot</code> asked
me for an "unlock code":
</p>

<pre class="example">
% fastboot flashing unlock
(bootloader) usage: fastboot oem unlock &lt; unlock code &gt;
FAILED (remote: '')
fastboot: error: Command failed
% fastboot flashing get_unlock_ability
(bootloader) use "oem get_unlock_data" and web portal
(bootloader)     http://motorola.com/unlockbootloader
OKAY [  0.001s]
Finished. Total time: 0.001s
% fastboot oem get_unlock_data
(bootloader) Unlock data:
(bootloader) ███████████████████████████████
(bootloader) ███████████████████████████████
(bootloader) ███████████████████████████████
(bootloader) ███████████████████████████████
(bootloader) ██████████████████
OKAY [  0.017s]
Finished. Total time: 0.017s
</pre>

<p>
Fortunately, the Motorola has not invented some kind of Torment Nexus in this
case and just use a special form on their site. This form accepts some kind of
"unlock data" and sends an "unlock code" to the email. This unlock code is
unique for each phone.
</p>

<p>
Unfortunately, the link from <code>get_unlock_ability</code> returns 404 (as
usual). However after some searching on the Internet, I managed to find the
necessary form on the American version of the Motorola site:
<a href="https://en-us.support.motorola.com/app/standalone/bootloader/unlock-your-device-a">https://en-us.support.motorola.com/app/standalone/bootloader/unlock-your-device-a</a>. And
through this form I was able to receive an email with the unlock code.
</p>

<p>
After that I simply unlocked the bootloader with command:
</p>

<pre class="example">
% fastboot oem unlock ███████████████████████████████
(bootloader) Bootloader is unlocked!
OKAY [ 22.503s]
Finished. Total time: 22.503s
</pre>
</div>
</div>
<div id="outline-container-system-software-reflash" class="outline-2">
<h2 id="system-software-reflash">Rewriting the system software</h2>
<div class="outline-text-2" id="text-system-software-reflash">
<p>
First, I need to download an archive containing "factory" dumps of some flash
memory regions for the phone — according to instruction on installing Lineage
OS from the XDA forum. And then install them.
</p>

<p>
As I think, this is necessary to have the same <code>boot.img</code> both on the hard disk
and in the phone. This file is needed to get the root access on the phone.
</p>

<p>
Based <a href="https://xdaforums.com/t/flash-stock-rom-via-fastboot.4524845/">on this post</a>, I found <a href="https://www.getdroidtips.com/motorola-defy-2021-stock-firmware/">a link</a> to the mirror, suitable for my phone model
(XT2083-9, build number RZD31.31). Inside this server is the archive
<code>XT2083-9_BATHENA_RETEU_11_RZD31.31_subsidy-DEFAULT_regulatory-XT2083-9-EUROPE-SAR_CFC.xml.zip</code>
from the path <code>/firmware/lenomola/2021/bathena/official/RETEU/</code>:
</p>

<pre class="example">
% unzip XT2083-9_BATHENA_RETEU_11_RZD31.31_subsidy-DEFAULT_regulatory-XT2083-9-EUROPE-SAR_CFC.xml.zip
Archive:  XT2083-9_BATHENA_RETEU_11_RZD31.31_subsidy-DEFAULT_regulatory-XT2083-9-EUROPE-SAR_CFC.xml.zip
inflating: recovery.img
inflating: gpt.bin
inflating: boot.img
inflating: dspso.bin
inflating: BTFM.bin
inflating: vbmeta.img
inflating: radio.img
inflating: dtbo.img
inflating: logo.bin
inflating: bootloader.img
inflating: super.img_sparsechunk.0
inflating: super.img_sparsechunk.1
inflating: super.img_sparsechunk.2
inflating: super.img_sparsechunk.3
inflating: super.img_sparsechunk.4
inflating: super.img_sparsechunk.5
inflating: super.img_sparsechunk.6
inflating: super.img_sparsechunk.7
inflating: super.img_sparsechunk.8
inflating: flashfile.xml
inflating: servicefile.xml
extracting: slcf_rev_d_default_v1.0.nvm
inflating: regulatory_info_xt2083_9_europe_sar.png
inflating: signing-info.txt
inflating: BATHENA_RETAIL_RZD31.31_subsidy-DEFAULT_regulatory-XT2083-9-EUROPE-SAR_CFC.info.txt
</pre>

<p>
Phone's flash memory is divided into mutliple regions and some of them are
unique for different phone models. At least on my Motorola Defy (2021) I can
see the complete list of regions by rebooting the phone to the bootloader and
running the command <code>fastboot oem partition</code>:
</p>

<pre class="example">
~ % fastboot oem partition
(bootloader) xbl_a: offset=65536KB, size=5120KB
(bootloader) xbl_b: offset=70656KB, size=5120KB
(bootloader) xbl_config_a: offset=75776KB, size=128KB
(bootloader) xbl_config_b: offset=75904KB, size=128KB
(bootloader) tz_a: offset=76032KB, size=4096KB
(bootloader) tz_b: offset=80128KB, size=4096KB
(bootloader) rpm_a: offset=84224KB, size=512KB
(bootloader) rpm_b: offset=131072KB, size=512KB
(bootloader) hyp_a: offset=196608KB, size=512KB
(bootloader) hyp_b: offset=197120KB, size=512KB
(bootloader) cmnlib_a: offset=197632KB, size=512KB
(bootloader) cmnlib_b: offset=198144KB, size=512KB
(bootloader) cmnlib64_a: offset=198656KB, size=512KB
(bootloader) cmnlib64_b: offset=199168KB, size=512KB
(bootloader) keymaster_a: offset=199680KB, size=512KB
(bootloader) keymaster_b: offset=200192KB, size=512KB
(bootloader) prov_a: offset=200704KB, size=256KB
(bootloader) prov_b: offset=200960KB, size=256KB
(bootloader) abl_a: offset=201216KB, size=1024KB
(bootloader) abl_b: offset=202240KB, size=1024KB
(bootloader) uefisecapp_a: offset=203264KB, size=2048KB
(bootloader) uefisecapp_b: offset=205312KB, size=2048KB
(bootloader) devcfg_a: offset=207360KB, size=128KB
(bootloader) devcfg_b: offset=207488KB, size=128KB
(bootloader) qupfw_a: offset=207616KB, size=80KB
(bootloader) qupfw_b: offset=207696KB, size=80KB
(bootloader) storsec_a: offset=207776KB, size=128KB
(bootloader) storsec_b: offset=207904KB, size=128KB
(bootloader) ddr: offset=208032KB, size=1024KB
(bootloader) modem_a: offset=209056KB, size=184320KB
(bootloader) modem_b: offset=393376KB, size=184320KB
(bootloader) bluetooth_a: offset=577696KB, size=1024KB
(bootloader) bluetooth_b: offset=578720KB, size=1024KB
(bootloader) dsp_a: offset=579744KB, size=65536KB
(bootloader) dsp_b: offset=645280KB, size=65536KB
(bootloader) boot_a: offset=710816KB, size=98304KB
(bootloader) boot_b: offset=809120KB, size=98304KB
(bootloader) dtbo_a: offset=907424KB, size=24576KB
(bootloader) dtbo_b: offset=932000KB, size=24576KB
(bootloader) recovery_a: offset=983040KB, size=102400KB
(bootloader) recovery_b: offset=1085440KB, size=102400KB
(bootloader) ssd: offset=1245184KB, size=8KB
(bootloader) utags: offset=1310720KB, size=512KB
(bootloader) utagsBackup: offset=1311232KB, size=512KB
(bootloader) kpan: offset=1311744KB, size=8192KB
(bootloader) dhob: offset=1319936KB, size=32KB
(bootloader) msadp: offset=1376256KB, size=256KB
(bootloader) persist: offset=1441792KB, size=32768KB
(bootloader) prodpersist: offset=1474560KB, size=8192KB
(bootloader) metadata: offset=1482752KB, size=16384KB
(bootloader) misc: offset=1499136KB, size=1024KB
(bootloader) frp: offset=1500160KB, size=512KB
(bootloader) cid: offset=1507328KB, size=128KB
(bootloader) logo_a: offset=1507456KB, size=16384KB
(bootloader) logo_b: offset=1523840KB, size=16384KB
(bootloader) carrier: offset=1572864KB, size=16384KB
(bootloader) devinfo: offset=1638400KB, size=4KB
(bootloader) apdp: offset=1638404KB, size=256KB
(bootloader) spunvm: offset=1703936KB, size=8192KB
(bootloader) logfs: offset=1769472KB, size=8192KB
(bootloader) vbmeta_a: offset=1777664KB, size=64KB
(bootloader) vbmeta_b: offset=1777728KB, size=64KB
(bootloader) vbmeta_system_a: offset=1777792KB, size=64KB
(bootloader) vbmeta_system_b: offset=1777856KB, size=64KB
(bootloader) limits: offset=1777920KB, size=4KB
(bootloader) uefivarstore: offset=1777924KB, size=512KB
(bootloader) modemst1: offset=1835008KB, size=2560KB
(bootloader) modemst2: offset=1837568KB, size=2560KB
(bootloader) fsg_a: offset=1840128KB, size=65536KB
(bootloader) fsg_b: offset=1905664KB, size=65536KB
(bootloader) fsc: offset=1971200KB, size=128KB
(bootloader) hw: offset=2031616KB, size=8192KB
(bootloader) sp: offset=2097152KB, size=8192KB
(bootloader) padA: offset=2105344KB, size=640KB
(bootloader) super: offset=2105984KB, size=11631616KB
(bootloader) padB: offset=13737600KB, size=384KB
(bootloader) userdata: offset=13737984KB, size=47333359KB
(bootloader) system_a: offset=2105984KB, size=2376024KB
(bootloader) system_b: offset=2105984KB, size=165052KB
(bootloader) vendor_a: offset=2105984KB, size=585820KB
(bootloader) vendor_b: offset=2105984KB, size=0KB
(bootloader) product_b: offset=2105984KB, size=0KB
(bootloader) product_a: offset=2105984KB, size=4KB
OKAY [  0.015s]
Finished. Total time: 0.015s
</pre>

<p>
Fortunately, I don't need to rewrite all of these partitions. First, because
<a href="https://source.android.com/docs/core/ota/virtual_ab">A/B-partitions</a> is used on the device, there are a lot of partitions in the
output of the above command repeated two times: with <code>_a</code> suffix and with <code>_b</code>
suffix. To install Lineage OS, I only need to use partitions with the <code>_a</code>
suffix, according to the instructions.
</p>

<p>
Second, I only need to use the following partitions, according to the list of
files from the archive:
</p>

<table border="2" cellspacing="0" cellpadding="6" frame="void">
<caption class="t-above"><span class="table-number">Table 1:</span> Description of partitions, there to write dumps to</caption>

<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Partition</th>
<th scope="col" class="org-left">Binary file from archive</th>
<th scope="col" class="org-left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">gpt.bin</td>
<td class="org-left">General Partition Table (GPT).</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">bootloader.img</td>
<td class="org-left">Splitted to the few files, which is described below.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">radio.img</td>
<td class="org-left">The same.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">bluetooth_a</td>
<td class="org-left">BTFM.bin</td>
<td class="org-left">Binary blob with Bluetooth firmware.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">dsp_a</td>
<td class="org-left">dspso.bin</td>
<td class="org-left">Binary blob with graphical accelerator firmware.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">logo_a</td>
<td class="org-left">logo.bin</td>
<td class="org-left">Boot logo.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">boot_a</td>
<td class="org-left">boot.img</td>
<td class="org-left">The main Linux kernel, ramdisk and other files necessary to boot the system.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">recovery_a</td>
<td class="org-left">recovery.img</td>
<td class="org-left">The additional Linux kernel plus other necessary files. It is used in system updates, on factory resets, etc.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">dbto_a</td>
<td class="org-left">dtbo.img</td>
<td class="org-left">Device Tree Blobs Overlay — device descriptions for Linux kernel<sup><a id="fnr.device_tree" class="footref" href="#fn.device_tree" role="doc-backlink">1</a></sup>.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">vbmeta_a</td>
<td class="org-left">vbmeta.img</td>
<td class="org-left">Information to check the authenticity of the some partitions, before they will be loaded to the memory.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">super</td>
<td class="org-left">super.img_sparsechunk.0</td>
<td class="org-left">This and the next 8 files will be written to the area with dynamic partitions. I don't found any information about contents of these partitions. Additional information is <a href="https://source.android.com/docs/core/ota/dynamic_partitions/implement">here</a>.</td>
</tr>

<tr>
<td class="org-left">super</td>
<td class="org-left">super.img_sparsechunk.1</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">super</td>
<td class="org-left">super.img_sparsechunk.2</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">super</td>
<td class="org-left">super.img_sparsechunk.3</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">super</td>
<td class="org-left">super.img_sparsechunk.4</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">super</td>
<td class="org-left">super.img_sparsechunk.5</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">super</td>
<td class="org-left">super.img_sparsechunk.6</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">super</td>
<td class="org-left">super.img_sparsechunk.7</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">super</td>
<td class="org-left">super.img_sparsechunk.8</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">userdata</td>
<td class="org-left">/dev/null</td>
<td class="org-left">Partition with user data and applications. Should be cleared according to the instruction.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">ddr</td>
<td class="org-left">/dev/null</td>
<td class="org-left">Looks like the device RAM will be mapped here. Should be cleared according to the instruction.</td>
</tr>
</tbody>
</table>

<table border="2" cellspacing="0" cellpadding="6" frame="void">
<caption class="t-above"><span class="table-number">Table 2:</span> bootloader.img files and corresponding partitions description</caption>

<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Partition</th>
<th scope="col" class="org-left">Binary file</th>
<th scope="col" class="org-left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">keymaster</td>
<td class="org-left">keymaster.mbn</td>
<td class="org-left">Some data for Qualcomm Secure (Verified) Boot.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">hyp</td>
<td class="org-left">hyp.mbn</td>
<td class="org-left"><a href="https://en.wikipedia.org/wiki/Hypervisor">Hypervisor</a> from Qualcomm. The Linux is running under this hypervisor.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">tz</td>
<td class="org-left">tz.mbn</td>
<td class="org-left"><a href="https://research.checkpoint.com/2019/the-road-to-qualcomm-trustzone-apps-fuzzing/">TrustZone</a> firmware.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">devcfg</td>
<td class="org-left">devcfg.mbn</td>
<td class="org-left">Not found any information about this partition.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">storsec</td>
<td class="org-left">storsec.mbn</td>
<td class="org-left">Not found any information about this partition.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">prov</td>
<td class="org-left">prov64.mbn</td>
<td class="org-left">Not found any information about this partition.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">rpm</td>
<td class="org-left">rpm.mbn</td>
<td class="org-left">Resource Power Management — blob with firmware to control modem's power.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">abl</td>
<td class="org-left">abl.elf</td>
<td class="org-left">Android BootLoader — second stage loader to verify and load Android or recovery.img contents.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">uefisecapp</td>
<td class="org-left">uefi_sec.mbn</td>
<td class="org-left">Not found any information about this partition.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">qupfw</td>
<td class="org-left">qupfw.elf</td>
<td class="org-left">Not found any information about this binary file.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">xbl_config</td>
<td class="org-left">xbl_config.elf</td>
<td class="org-left">Looks like there is something like HAL for the bootloader<sup><a id="fnr.xbl" class="footref" href="#fn.xbl" role="doc-backlink">2</a></sup>.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">xbl</td>
<td class="org-left">xbl.elf</td>
<td class="org-left">Described above.</td>
</tr>
</tbody>
</table>

<table border="2" cellspacing="0" cellpadding="6" frame="void">
<caption class="t-above"><span class="table-number">Table 3:</span> radio.img files and corresponding partitions description</caption>

<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Partition</th>
<th scope="col" class="org-left">Biinary file</th>
<th scope="col" class="org-left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">modem</td>
<td class="org-left">NON-HLOS.bin</td>
<td class="org-left">Blog with regional settings/frequences for the radio module.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">fsg</td>
<td class="org-left">fsg.mbn</td>
<td class="org-left">Modem File System Golden copy. Contains firmware blob for the modem, calibration data and IMEI. Rewrite necessity is unknown<sup><a id="fnr.fsg" class="footref" href="#fn.fsg" role="doc-backlink">3</a></sup>.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">modemst1</td>
<td class="org-left">/dev/null</td>
<td class="org-left">Will be cleared while writing radio.img. Here will be saved fsg contents after first launch of the system.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">modemst2</td>
<td class="org-left">/dev/null</td>
<td class="org-left">modemst1 backup. Also will be cleared during radio.img flashing.</td>
</tr>
</tbody>
</table>

<p>
The next steps were simple:
</p>
<ol class="org-ol">
<li>I rebooted the phone into bootloader again using <code>adb</code> as I described above.</li>
<li><p>
Then I wrote the unpacked binaries to the phone with the next commands:
</p>
<pre class="example">
fastboot flash partition gpt.bin
fastboot flash bootloader bootloader.img
fastboot reboot-bootloader
fastboot flash radio radio.img
fastboot reboot-bootloader
fastboot flash bluetooth BTFM.bin
fastboot flash dsp dspso.bin
fastboot flash logo logo.bin
fastboot flash boot boot.img
fastboot flash recovery recovery.img
fastboot flash dtbo dtbo.img
fastboot flash vbmeta vbmeta.img
fastboot flash super super.img_sparsechunk.0
fastboot flash super super.img_sparsechunk.1
fastboot flash super super.img_sparsechunk.2
fastboot flash super super.img_sparsechunk.3
fastboot flash super super.img_sparsechunk.4
fastboot flash super super.img_sparsechunk.5
fastboot flash super super.img_sparsechunk.6
fastboot flash super super.img_sparsechunk.7
fastboot flash super super.img_sparsechunk.8
fastboot erase userdata
fastboot erase ddr
fastboot oem fb_mode_clear
fastboot reboot
</pre></li>
</ol>

<p>
My log of this process <a href="/assets/static/bathena-flash.txt">is here</a>.
</p>

<p>
After this operation, I got a stock Android from Motorola, without any user
programs or settings.
</p>
</div>
</div>
<div id="outline-container-lineage-os-install" class="outline-2">
<h2 id="lineage-os-install">Lineage OS install</h2>
<div class="outline-text-2" id="text-lineage-os-install">
<p>
To install Lineage OS I used <a href="https://xdaforums.com/t/flash-gsi-rom-arm64-ab.4524895/#post-88309263">this comment</a> from the XDA forum — here the user
HUN_Gyuszi wrote about the successful installation of LineageOS 20.0 with
Google apps and without root on the Motorola Defy phone.
</p>

<p>
I found the newer builds of LineageOS <a href="https://sourceforge.net/projects/andyyan-gsi/files/">in the repository</a> from that
comment. There were LineageOS 21.0 builds that I obviously wanted to
install. But it wasn't that simple and I did some checking:
</p>
<ul class="org-ul">
<li>I don't want to use a build with Google apps installed
(<code>bgN</code><sup><a id="fnr.gsi_naming_conventions" class="footref" href="#fn.gsi_naming_conventions" role="doc-backlink">4</a></sup> code). But I installed it for testing and it
started and worked fine.</li>
<li><p>
Then I tried to use build without Google apps and with root access (<code>bvS</code>). I
have root access, but I've "lost" the IMEI — the OS used the zero IMEI
instead of the valid one. As a result, the phone couldn't connect to the
cellular network.
</p>

<p>
Luckily, I saved my original IMEI. Unfortunately, it wasn't so easy to
forcibly set my IMEI in Android working on the Qualcomm Snapdragon
chipset. And I wasn't able to set my IMEI back. After that, I've checked the
"Barcodes" menu on the bootloader and found what my original IMEI still
stored somewhere in the phone.
</p>

<p>
Just to be sure, I reflashed the binaries from the <a href="#system-software-reflash">"Rewriting the system software"</a> section and found that in stock
Android my original IMEI is still visible.
</p>

<p>
Looks like there is a bug in the <code>bvS</code> build that prevents the IMEI from being
read from the right place.
</p></li>
<li>Finally, I've tested the build without Google apps and without root access
(<code>bvN</code> code). There were no problems and I'm using this build.</li>
</ul>

<p>
The installation process itself is simple:
</p>
<ol class="org-ol">
<li>As I wrote before, after reflashing all the system software my phone has
old stock Android. And I should get access the "Developer options", enable
USB debugging and reboot the phone with the command <code>adb reboot fastboot</code>
again.</li>
<li><p>
After rebooting the phone screen looks like this:
</p>

<div class="figure">
<p><img src="/assets/static/fastbootd.jpg" alt="Phone rebooted to fastbootd" align="center" />
</p>
</div></li>
<li><p>
And now I could to flash the downloaded LineageOS image:
</p>
<pre class="example">
motorola_defy/LineageOS % fastboot flash system lineage-21.0-20241118-UNOFFICIAL-arm64_bvN.img
</pre>

<p>
The successfull log of operation <a href="/assets/static/lineage-os-flash.txt">is here</a>.
</p></li>
<li><p>
<i>In my case</i> the flashing process failed with the next error:
</p>
<pre class="example">
motorola_defy/LineageOS % fastboot flash system lineage-21.0-20241118-UNOFFICIAL-arm64_bvN.img
Resizing 'system_a'                                FAILED (remote: 'Not enough space to resize partition')
fastboot: error: Command failed
</pre>

<p>
The <code>system_a</code> partition with 2.3 Gb size is not enough for LineageOS. I
found the solution on the XDA Forum — I should delete the <code>product_a</code>
partition, resize the <code>system_a</code> partition up to 4.2 Gb and create a new
<code>product_a</code> partition with 1 byte size:
</p>
<pre class="example">
motorola_defy/LineageOS % fastboot set_active a
Setting current slot to 'a'                        OKAY [  0.139s]
Finished. Total time: 0.140s
motorola_defy/LineageOS % fastboot delete-logical-partition product_a
Deleting 'product_a'                               OKAY [  0.045s]
Finished. Total time: 0.045s
motorola_defy/LineageOS % fastboot resize-logical-partition system_a 4200000000
Resizing 'system_a'                                OKAY [  0.006s]
Finished. Total time: 0.049s
motorola_defy/LineageOS % fastboot create-logical-partition product_a 1
Creating 'product_a'                               OKAY [  0.045s]
Finished. Total time: 0.045s
</pre>

<p>
The <code>product_a</code> partition <a href="https://source.android.com/docs/core/architecture/partitions/product-partitions">is used by the stock Android OS</a> to store various
vendor specific things. The LineageOS doesn't use this partition, so I
resized it to one byte.
</p></li>
<li><p>
According to the forum instructions, I should to clear partitions
containing user data after the system installation:
</p>
<pre class="example">
motorola_defy/LineageOS % fastboot -w
Erasing 'userdata'                                 OKAY [  0.511s]
Erase successful, but not automatically formatting.
File system type raw not supported.
wipe task partition not found: cache
Erasing 'metadata'                                 OKAY [  0.007s]
Erase successful, but not automatically formatting.
File system type raw not supported.
Finished. Total time: 0.527s
</pre></li>
<li>Finally, I selected the menu item "Reboot system now", pressed the power
button and rebooted to my LineageOS.</li>
</ol>
</div>
</div>
<div id="outline-container-android-root" class="outline-2">
<h2 id="android-root">Root user access</h2>
<div class="outline-text-2" id="text-android-root">
<p>
This was easy — I just use the well-known <a href="https://topjohnwu.github.io/Magisk/">Magisk project</a>, which replaces the
standard Linux <code>init</code> with it's own <code>magiskinit</code>. Users can get root-access on the
phone by communicating with this <code>magiskinit</code>.
</p>

<p>
Installing Magisk and getting the <code>root</code> access is extremely easy. I just follow
<a href="https://topjohnwu.github.io/Magisk/install.html">the instructions</a> and use the previously saved <code>boot_a</code> partition dump (the
<code>boot.img</code> file).
</p>

<p>
After installation, I hide Magisk from the other applications on the
system. Also, I forbid access to <code>root</code> privileges for <b>all applications</b> on the
phone. Except for some favorite apps, which I write about below.
</p>


<div class="figure">
<p><img src="/assets/static/magisk.png" alt="Magisk settings for hiding itself: Zygisk and DenyList" align="center" width="50%" />
</p>
<p style="text-align: center"><i>Magisk settings to hide itself from the other applications</i></p>
</div>
</div>
</div>
<div id="outline-container-4g-calls-sms" class="outline-2">
<h2 id="4g-calls-sms">4G calls and SMS</h2>
<div class="outline-text-2" id="text-4g-calls-sms">
<p>
After some time I noticed the strange behaviour of the phone. When I connect
to the mobile network via 4G instead of 3G, the phone stops receiving any SMS
and calls.
</p>

<p>
As I found out, the next things are happened. Before 4G, the calls were made
the "old-fashioned way" — the phone connects to the base station through the
radio and through the some telephone exchanges connects to the other caller's
phone. That is, with the same principle that were usual landline phones used —
when two callers were connected via <a href="https://en.wikipedia.org/wiki/Circuit_switching">circuit switch network</a> — when the
dedicated channel for phone call between two people was created<sup><a id="fnr.pstn" class="footref" href="#fn.pstn" role="doc-backlink">5</a></sup>.
</p>

<p>
But after 4G, things changed. The telephony became the <a href="https://en.wikipedia.org/wiki/Voice_over_IP">IP-telephony</a> — there
are no dedicated channels between different callers. The caller's voice is
encoded and broken into packets, and these packets are sent to the other phone
via the Internet. Like any other packets on the Internet.
</p>

<p>
The standardized access to the such <a href="https://en.wikipedia.org/wiki/Packet_switching">packet-switching network</a> for mobile phones
is through <a href="https://en.wikipedia.org/wiki/IP_Multimedia_Subsystem">IP Multimedia Subsystem</a> (IMS). There should be a special
application on the phone to use IMS. This application is installed by default
on the stock Android from Motorola (as in other manufacturers phones, I
think). But there is no such application in my version of LineageOS, possibly
because of licensing issues.
</p>

<p>
Fortunately, there is an option to download an IMS application from the vendor
(Qualcomm in my case): "Settings⇒Phh Treble Settings⇒IMS features".
</p>


<div class="figure">
<p><img src="/assets/static/ims.png" alt="IMS features in the LineageOS, &quot;Force IMS&quot; is enabled" align="center" width="50%" />
</p>
</div>

<p>
After installing the necessary app via the "Install IMS APK for Qualcomm
vendor" menu item and enabling the "Request IMS network" option — 4G calls and
SMS started working as usual.
</p>
</div>
</div>
<div id="outline-container-disable-floating-shit-on-copy" class="outline-2">
<h2 id="disable-floating-shit-on-copy">Disabling nonsensical popup when copying text</h2>
<div class="outline-text-2" id="text-disable-floating-shit-on-copy">
<p>
I found the <i>another "innovation"</i> from Google in Android 14. When I copy text
to the clipboard, a nonsensical popup appears in the bottom left corner of the
screen. It shows everything I copied as <b>plain-text</b>! Of course, when I copy
password from <a href="https://www.passwordstore.org/">pass</a> — this password is shown as plain-text in this popup.
</p>


<div class="figure">
<p><img src="/assets/static/clipboard_bubble.png" alt="Clipboard bubble with &quot;Hello&quot; string inside" align="center" width="25%" />
</p>
</div>

<p>
This "feature" is sold under "user experience and convenience" — the user
should be sure that something has been copied. But in my opinion, this feature
was not created for "user comfort", but for the comfort of any perpetrator. It
becomes easy to see the user's password just by looking at the bottom left
corner of someone else's phone screen. Especially since this popup can't be
disabled in the settings — there's no such item in the "Settings" menu.
</p>

<p>
Luckily, I found that I can easily disable this popup on the phone with root
access:
</p>
<ol class="org-ol">
<li>Open the terminal.</li>
<li>Switch to the root with <code>su</code>.</li>
<li>Execute the command <code>appops set com.android.systemui READ_CLIPBOARD ignore</code>.</li>
</ol>

<p>
All done! This popup is now and <b>forever</b> disabled and won't re-enable itself
even after reboot.
</p>
</div>
</div>
<div id="outline-container-turn-off-usb-debugging" class="outline-2">
<h2 id="turn-off-usb-debugging">Turn off USB debugging</h2>
<div class="outline-text-2" id="text-turn-off-usb-debugging">
<p>
Pretty quickly, I found that USB debugging somehow ended up turned on after
every reboot. Obviously, I don't want to leave a hole like that in the system
for any trickster with an USB cable. In the case of an unlocked bootloader,
enabling USB debugging will allow anyone to write anything to the phone's
flash memory after rebooting into the bootloader.
</p>

<p>
I've found the fixes for this bug in the LineageOS bugtracker. But they were
for LineageOS <a href="https://review.lineageos.org/c/LineageOS/android_device_xiaomi_sdm845-common/+/253967">version 16.0</a> and <a href="https://review.lineageos.org/c/LineageOS/android_device_oneplus_sdm845-common/+/330486">version 19.1</a> and only for Xiaomi phones. The
"default solution" via <code>setprop persist.vendor.usb.config ""</code> command doesn't
work for me — this option resets to <code>"adb"</code> after reboot. And USB debugging was
still on.
</p>

<p>
I looked for files, mentioned in the bugtracker records and found them in the
<code>/vendor/</code> catalog:
</p>
<pre class="example">
:/ # find / -type f -name init.qcom.usb.sh
/vendor/bin/init.qcom.usb.sh
:/ # find / -type f -name default.prop
/vendor/default.prop
</pre>

<p>
The <code>/vendor</code> catalog is the mountpoint for the <code>/dev/block/dm-5</code> device. Of
course, I first tried to remount it in RW mode (unsuccessfully):
</p>
<pre class="example">
:/ # mount | grep 'on /vendor'
/dev/block/dm-5 on /vendor type ext4 (ro,seclabel,relatime)
:/ # mount -o remount,rw /vendor
'/dev/block/dm-5' is read-only
</pre>

<p>
After that, I go to the <code>/etc/init</code> catalog to look at the system initialization
scripts. There I found something like <code>systemd</code> unit files🤮 and tried to add a
new file to disable USB debugging every time, when <code>persist.vendor.usb.config</code>
equals to <code>"adb"</code>:
</p>
<pre class="example">
on property:persist.vendor.usb.config="adb"
    settings put global adb_enabled 0
    setprop persist.vendor.usb.config ""
</pre>

<p>
Unfortunately, the root filesystem was mounted in read-only mode, and I
couldn't remount it with <code>mount -o remount,rw /</code>.
</p>

<p>
Fortunately, when I tried to run the above two commands<sup><a id="fnr.disable_usb" class="footref" href="#fn.disable_usb" role="doc-backlink">6</a></sup> in the
terminal, just in case — the problem was solved! USB debugging was disabled
and didn't turn on even after rebooting.
</p>
</div>
</div>
<div id="outline-container-root-apps" class="outline-2">
<h2 id="root-apps">Applications with root access</h2>
<div class="outline-text-2" id="text-root-apps">
<p>
In this section I write about special applications that definitely need the
root access on my phone.
</p>
</div>
<div id="outline-container-appstores" class="outline-3">
<h3 id="appstores">Application stores</h3>
<div class="outline-text-3" id="text-appstores">
<p>
First, it's naturally <a href="https://f-droid.org/">F-Droid</a>.
</p>


<div class="figure">
<p><img src="/assets/static/f-droid.png" alt="F-Droid main window" align="center" />
</p>
</div>

<p>
The application doesn't need the <code>root</code> itself. But it is needed for the
<a href="https://github.com/entr0pia/Fdroid-Priv">Fdroid-Priv</a> Magisk extension. This extension allows me to install and update
applications with a single tap, without the "Install this application?" popup.
</p>

<p>
Second, there is <a href="https://f-droid.org/en/packages/com.aurora.store/">Aurora Store</a> — the FOSS app to replace Google Play. Unlike
Google Play this application doesn't show ads on every screen and is not
overloaded with different screens and settings. There are only three tabs on
the main screen:
</p>
<ol class="org-ol">
<li>List of applications from Google Play.</li>
<li>List of games from Google Play.</li>
<li>List of installed apps to update.</li>
</ol>


<div class="figure">
<p><img src="/assets/static/aurora-store.png" alt="Aurora Store main window" align="center" width="50%" />
</p>
</div>

<p>
Installing and updating applications from the Aurora Store with a single tap
is easy:
</p>
<ul class="org-ul">
<li>Just add "<a href="https://apt.izzysoft.de/fdroid/">IzzyOnDroid F-Droid Repository</a>" to the F-Droid.</li>
<li>Install the <a href="https://shizuku.rikka.app/">Shizuku</a> application, which creates the standardized interface
for the <code>root</code> access.</li>
<li>Open the "Installation⇒Installation method" screen in the Aurora Store
settings and allow <code>root</code> access <b>once</b>.</li>
<li><p>
On the next screen select "Shizuku" as the application installation method.
</p>


<div class="figure">
<p><img src="/assets/static/aurora-store-shizuku.png" alt="Installation methods from Aurora Store. Shizuku method is selected" align="center" width="50%" />
</p>
</div></li>
</ul>

<p>
Third there is <a href="https://f-droid.org/en/packages/dev.imranr.obtainium.fdroid/">Obtainium</a> — it can download and install APKs from GitHub,
GitLab, etc.
</p>


<div class="figure">
<p><img src="/assets/static/obtainium.png" alt="Obtainium main window with ForkGram, LawnIcons and Shattered Pixel Dungeon" align="center" />
</p>
</div>

<p>
Some FOSS applications can only be installed through Google Play and don't
exist in the F-Droid<sup><a id="fnr.no-in-fdroid" class="footref" href="#fn.no-in-fdroid" role="doc-backlink">7</a></sup>. I prefer to install such applications via
Obtainium, because I prefer to use Aurora Store only for proprietary
applications.
</p>
</div>
</div>
<div id="outline-container-firewall" class="outline-3">
<h3 id="firewall">Firewall (AFWall+)</h3>
<div class="outline-text-3" id="text-firewall">
<p>
I am using <a href="https://f-droid.org/en/packages/dev.ukanth.ufirewall/">AFWall+</a> as my firewall. It uses <code>iptables</code> as a backend and doesn't
occupy the single VPN slot in the system, like the other Android firewalls
(which operate without <code>root</code> access).
</p>


<div class="figure">
<p><img src="/assets/static/afwall.png" alt="AFWall+ firewall main windows with two profiles: Default and special profile for some apps" align="center" />
</p>
</div>

<p>
AFWall+ provides a flexible set of Internet access rules for both system and
userland applications. I'm able to prohibit Internet access for some apps
completely, or prohibit only <i>some types</i> of connections — WiFi, cellular,
cellular while roaming, VPN and so on. As you can see from the screenshot
above, there is profile support exists, so I created a separate profile with
Internet access allowed for <i>some apps</i> and enable it only when I need it.
</p>

<p>
Sadly, there are also one drawback — AFWall+ (version 3.6.0) allows to export
firewall rules to the file without any warning. But, when I want to import
rules from file (to check my backup), then I found out that I need to pay
money to the developer to unlock this feature. For now, I can't pay to the
people in the outside world because MasterCard/Visa/PayPal/etc <a href="https://en.wikipedia.org/wiki/Discrimination_based_on_nationality">discriminate me
based on my nationality and location</a>😒.
</p>

<p>
IMHO, the export screen lacks the notification text to warn the user of the
need to pay to re-import exported rules.
</p>

<p>
One nuance (I can't call it a drawback) you should know about: if you
configure the firewall properly — by denying Internet access to everything not
explicitly allowed by the rules — then checking for Internet access using the
"knocking on Google servers after connecting to the network" method will not
work. I didn't bother to find out which system process is responsible for this
and how to change the address <a href="http://clients3.google.com/">http://clients3.google.com/</a> to something more
decent — and just disabled the captive portal check <a href="https://github.com/ukanth/afwall/wiki/FAQ#61-what-is-androids-captive-portal-check">according to the
instructions in the AFWall+ FAQ</a>. I can't say that this is an AFWall+
drawback for me, but for other people — who knows?
</p>
</div>
</div>
<div id="outline-container-adblocker" class="outline-3">
<h3 id="adblocker">System-wide ad blocker (AdAway)</h3>
<div class="outline-text-3" id="text-adblocker">
<p>
Here I used the same principle as above — the ad blocker shouldn't use my
single VPN slot. So I found an <a href="https://f-droid.org/en/packages/org.adaway/">AdAway</a> that uses <code>root</code> access to modify the
system <code>hosts</code> file with blacklists' data.
</p>


<div class="figure">
<p><img src="/assets/static/adaway.png" alt="AdAway main window" align="center" />
</p>
</div>

<p>
I import some of my favorite blacklists into the app, such as well known <a href="https://someonewhocares.org/hosts/hosts">Dan
Pollocks hosts file</a> or <a href="https://raw.githubusercontent.com/mtxadmin/ublock/master/hosts.txt">the hosts file</a> to block Russian-language ads.
</p>
</div>
</div>
<div id="outline-container-acca" class="outline-3">
<h3 id="acca">AccA — to control accumulator (dis)charging</h3>
<div class="outline-text-3" id="text-acca">
<p>
I have always been bothered by the "turbo charging" supported by my
phone. This charging mode is activated every time I connect the phone to
something relatively new. This "feature" can't be disabled in stock
Android. And if it is enabled all the time — the battery is charged with
higher current and overheats. Of course it charges faster but at the same time
<a href="https://batteryuniversity.com/article/bu-808-how-to-prolong-lithium-based-batteries">the battery lifetime decreases</a>.
</p>

<p>
And then I found an <a href="https://github.com/MatteCarra/AccA">AccA application</a> with an <a href="https://github.com/VR-25/acc">acc daemon</a>. The daemon can do all
the necessary things:
</p>
<ul class="org-ul">
<li>it doesn't allow to charge the battery to 100%, it stops charging at 70%
(the default value)</li>
<li>it doesn't allow to use the battery in the last percent of the charge, the
phone will be switched off at 10% of the charge (the default value)</li>
<li>it can pause the charging process if the battery is heated up to 60°C, to
cool this thing down</li>
<li>it completely disables the "turbo charge" feature.</li>
</ul>

<p>
The AccA is just the daemon frontend, which simplifies the installation and
initial setup of the daemon.
</p>


<div class="figure">
<p><img src="/assets/static/acca.png" alt="AccA main window with battery realtime parameters" align="center" />
</p>
</div>

<p>
I'm comfortable using the phone all day and charging it at night as usual,
with the settings from the screenshot. If I need to quickly charge it to 100%
and fully use the battery — there is a button "Charge once to #% without
restrictions".
</p>
</div>
</div>
<div id="outline-container-colorblendr" class="outline-3">
<h3 id="colorblendr">System theme color change (ColorBlendr)</h3>
<div class="outline-text-3" id="text-colorblendr">
<p>
This simple application can change colors for the currently used theme. After
some setup I created something like my favorite Solarized Light theme:
</p>


<div class="figure">
<p><img src="/assets/static/colorblendr.png" alt="ColorBlendr main window" align="center" />
</p>
</div>

<p>
<a href="https://f-droid.org/en/packages/com.drdisagree.colorblendr/">Link to the ColorBlendr application</a>.
</p>
</div>
</div>
<div id="outline-container-sdmaid2se" class="outline-3">
<h3 id="sdmaid2se">System cleaner (SD Maid 2/SE)</h3>
<div class="outline-text-3" id="text-sdmaid2se">
<p>
I have used this app many times before. It helped me to clear the flash memory
and the SD card of some garbage that fills up over time: application logs,
empty catalogs, file duplicates, various caches, "remnants" of already deleted
applications, etc.
</p>


<div class="figure">
<p><img src="/assets/static/sdmaid2se.png" alt="SD Maid 2/SE main window" align="center" />
</p>
</div>

<p>
With the <code>root</code> access the SD Maid 2/SE capable to do the bigger things. It is
able to delete the cached APKs of already installed apps, clear the system
caches and logs, remove the old bug report files, etc.
</p>

<p>
The SD Maid 2/SE has deleted nearly 10 Gb of garbage since the last few
months. Otherwise, these garbage files just took up space on the flash
memory.
</p>

<p>
<a href="https://f-droid.org/en/packages/eu.darken.sdmse/">Link to the SD Maid 2/SE</a>.
</p>
</div>
</div>
</div>
<div id="outline-container-backups" class="outline-2">
<h2 id="backups">Backups</h2>
<div class="outline-text-2" id="text-backups">
<blockquote>
<p>
There are two types of people: those who do backups and those who will do
backups.
</p>
</blockquote>
</div>
<div id="outline-container-neobackup" class="outline-3">
<h3 id="neobackup">Neo Backup</h3>
<div class="outline-text-3" id="text-neobackup">
<p>
I use the FOSS <a href="https://f-droid.org/packages/com.machiav3lli.backup/">Neo Backup</a> application to backup the phone.
</p>


<div class="figure">
<p><img src="/assets/static/neobackup.png" alt="Neo Backup application's backup tab with list of applications on it" align="center" />
</p>
</div>

<p>
This application, of course, needs <code>root</code> access. And it can:
</p>
<ol class="org-ol">
<li>Make backups of applications (APK files).</li>
<li>Create backups of user data and settings for these applications.</li>
<li>Compress the resulting files with zstd or gzip.</li>
<li>Encrypt the resulting backup.</li>
</ol>

<p>
In return, it puts a heavy IO load on the media used for the backup. This is
why it is recommended to backup to the SD card — it can be easily swapped to
the new one after end of life (instead of the internal flash memory).
</p>

<p>
Backup of the <a href="https://eugene-andrienko.com/en/uses">the mine</a> application takes nearly an hour with compression and
encrypion enabled. The size of the resulting backup was nearly 3.6 Gb.
</p>
</div>
</div>
<div id="outline-container-flash-memory-backup" class="outline-3">
<h3 id="flash-memory-backup">Flash memory backup</h3>
<div class="outline-text-3" id="text-flash-memory-backup">
<p>
By the time, I thought about backup of the main partitions from
flash. Ideally, this could be done with the <code>fastboot fetch</code> command. But
suddenly I found out that this command is not supported on the phone side:
</p>

<pre class="example">
phone_backup/fastboot % fastboot fetch partition gpt.bin
(bootloader) max-fetch-size: not found
fastboot: error: Unable to get max-fetch-size. Device does not support fetch command.
</pre>

<p>
On the one hand, this prevents me from making a backup of the flash memory. On
the other hand, this disallows <i>anyone</i> to read the flash memory contents of my
phone without disassembling it.
</p>
</div>
</div>
</div>
<div id="outline-container-bugs" class="outline-2">
<h2 id="bugs">BUGS</h2>
<div class="outline-text-2" id="text-bugs">
<p>
Of course there are bugs!
</p>

<ul class="org-ul">
<li><p>
The "Phh Treble Settings⇒Misc features⇒Set rounded corner diameter" and "Phh
Treble Settings⇒Misc features⇒Set forced/faked rounded corners diameter"
settings don't work. After searching in the Internet, I found out that these
settings don't work for everyone.
</p>

<p>
Fortunately, this problem doesn't affect the usability of my phone. Only
were the next things that bothered me:
</p>
<ul class="org-ul">
<li>The left part of the mobile network name in the notification panel on the
lock screen is slightly cropped.</li>
<li>The small left part of the far left icon on the notification panel is also
cropped.</li>
<li>The buttons at the bottom of the game panel in Shattered Pixel Dungeon are
also cropped in the album orientation.</li>
</ul></li>
<li>The NFC doesn't work completely. There is no mention of NFC in the system
settings at all. I haven't researched this issue because I don't use the
NFC. I found the only one proper use of this technology — to pay with the
phone via Google/Apple Pay. But both companies participate in the
"discrimination based on nationality" party, so I can't use this technology
(the local substitute application: MirPay, works with different payment
terminals in 50% of cases — i.e. unusable).</li>
</ul>
</div>
</div>
<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2" id="text-notes">
</div>
</div>
<div id="footnotes">

<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.device_tree" class="footnum" href="#fnr.device_tree" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://elinux.org/Device_Tree_Reference">https://elinux.org/Device_Tree_Reference</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.xbl" class="footnum" href="#fnr.xbl" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://xdaforums.com/t/location-and-function-of-xbl-elf-qupv3fw-elf-cmnlib-mbn-in-the-aosp-output-build.4351213/#post-88989497">https://xdaforums.com/t/location-and-function-of-xbl-elf-qupv3fw-elf-cmnlib-mbn-in-the-aosp-output-build.4351213/#post-88989497</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.fsg" class="footnum" href="#fnr.fsg" role="doc-backlink">3</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
But netherless the <code>fastboot</code> clears this partition when flashing
<code>radio.img</code>.
</p></div></div>

<div class="footdef"><sup><a id="fn.gsi_naming_conventions" class="footnum" href="#fnr.gsi_naming_conventions" role="doc-backlink">4</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://github.com/phhusson/treble_experimentations/wiki/Frequently-Asked-Questions-(FAQ)#naming-conventions-that-some-gsi-buildermaintainer-uses">Naming conventions that some GSI builder/maintainer
uses</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.pstn" class="footnum" href="#fnr.pstn" role="doc-backlink">5</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
See the <a href="https://en.wikipedia.org/wiki/Public_switched_telephone_network">PSTN</a> (Public switched telephone network) article.
</p></div></div>

<div class="footdef"><sup><a id="fn.disable_usb" class="footnum" href="#fnr.disable_usb" role="doc-backlink">6</a></sup> <div class="footpara" role="doc-footnote"><pre class="example">
:/ # settings put global adb_enabled 0
:/ # setprop persist.vendor.usb.config ""
</pre></div></div>

<div class="footdef"><sup><a id="fn.no-in-fdroid" class="footnum" href="#fnr.no-in-fdroid" role="doc-backlink">7</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Probably because F-Droid requires reproducible builds or has
<a href="https://f-droid.org/en/docs/Inclusion_Policy/">clear requirements</a> for apps that can be published in it.
</p></div></div>


</div>
</div>]]></content><author><name>Eugene Andrienko</name></author><category term="it" /><summary type="html"><![CDATA[I have been using the Motorola Defy (2021) smartphone for almost 3 years. There is one of the rugged phones that has an IP68 and a decent thickness — it fits perfectly in my pocket. It looks like a normal phone in the case, but there is no case — there is a phone body.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://eugene-andrienko.com/assets/static/header-lineageos.jpg" /><media:content medium="image" url="https://eugene-andrienko.com/assets/static/header-lineageos.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="en"><title type="html">How I installed opensource firmware instead of BIOS to Thinkpad X220</title><link href="https://eugene-andrienko.com/en/it/2024/12/21/thinkpad-x220-libreboot.html" rel="alternate" type="text/html" title="How I installed opensource firmware instead of BIOS to Thinkpad X220" /><published>2024-12-21T00:00:00+03:00</published><updated>2024-12-21T00:00:00+03:00</updated><id>https://eugene-andrienko.com/it/2024/12/21/thinkpad-x220-libreboot</id><content type="html" xml:base="https://eugene-andrienko.com/it/2024/12/21/thinkpad-x220-libreboot.html"><![CDATA[<p>
I think almost everyone who reads my blog knows that the BIOS is the first
program that runs when the computer is turned on. Usually, the only actions
user can do with this program — open the BIOS menu and change the boot order,
change date/time, change peripheral settings and so on. Or, if the user is
lucky, he can find and install the BIOS modified by hackers (but he can't look
inside this BIOS without reverse engineering skills). Unfortunately, the BIOS
source code is closed and initialization of <i>your</i> computer should rely on the
forbearance of some companies that develop BIOS binaries (for example, <a href="https://en.wikipedia.org/wiki/American_Megatrends">AMI</a> or
<a href="https://en.wikipedia.org/wiki/Award_Software">Award Software International</a>) and forbearance of computer hardware vendors.
</p>

<p>
As long as the computer is used "as is", there are no problems. But, as is
usually the case with proprietary software, any unusual change leads to such
extreme tricks that building the Linux kernel looks like a child's prank.
</p>

<p>
In my case, I upgraded my Thinkpad X220 with an extension board for a new
2K screen and added some new peripherals — then the BIOS became the
problem. First, Lenovo's whitelist disallowed the use of new peripherals,
because they weren't "approved by the
manufacturer"<sup><a id="fnr.manufacturer_approve" class="footref" href="#fn.manufacturer_approve" role="doc-backlink">1</a></sup>. Second, the original proprietary BIOS was
made with the intention that the original display would <b>always</b> be connected
via the LVDS bus. Even if it is changed to a new display connected via the
Display Port (or via an extension board soldered to the DP-3 line). An
unfortunate omission, made in the hope that the user doesn't want to modify
his own computer and will be happy just to change the hard drive or RAM!
</p>

<p>
Fortunately, the open source community comes to the rescue! There is the
<a href="https://www.coreboot.org/">coreboot</a> project — an open source realization of the BIOS for some
motherboards.
</p>
<div class="outline-2">
<h2>Table of Contents&#xa0;&#xa0;&#xa0;<span class="tag"></span></h2>
<div class="outline-text-2">
<ul class="org-ul">
<li><a href="#coreboot">Coreboot</a></li>
<li><a href="#libreboot">Libreboot</a>
<ul class="org-ul">
<li><a href="#libreboot-preparations">Preparations</a></li>
<li><a href="#get-libreboot-binary">Downloading Libreboot binary</a></li>
<li><a href="#prepare-libreboot-binary">Preparing Libreboot binary for flashing</a></li>
<li><a href="#libreboot-flashing">Flashing prepared Libreboot binary</a></li>
<li><a href="#mac-address">MAC address</a></li>
</ul></li>
<li><a href="#libreboot-customization">Libreboot customization</a></li>
<li><a href="#notes">Notes</a></li>
</ul>
</div>
</div>
<div id="outline-container-coreboot" class="outline-2">
<h2 id="coreboot">Coreboot</h2>
<div class="outline-text-2" id="text-coreboot">
<p>
Coreboot was created as a project for computer clusters. At that time it was
called LinuxBIOS. One of it's authors (Ron Minnich) found that he needed to
connect each handmande cluster node to a KVM switch — to manually press F1 and
continue the boot process if something went wrong. Ron Minnich also wanted to
speed up BIOS loading and remove user interaction as much as
possible<sup><a id="fnr.linuxbios" class="footref" href="#fn.linuxbios" role="doc-backlink">2</a></sup>. Later, support for many <a href="https://doc.coreboot.org/mainboard/index.html">motherboards</a> and <a href="https://doc.coreboot.org/soc/index.html">SoCs</a> was added
to the project. Including the Thinkpad X220 motherboard.
</p>

<p>
I started using coreboot after I found out that the original BIOS only works
with the original laptop display. If I connect an additinal 2K screen via the
soldered expansion board, then the BIOS won't display on that screen.
</p>

<p>
I remembered, that people, who modified Thinkpads, also changed the original
BIOS to coreboot. And on the photos of their laptops after the modification,
there was a framebuffer visible, not the usual text console. I also found that
there are notes about the open source library libgfxinit in the coreboot
documentation. This library is used inside coreboot to initialize video when
the computer is turned on. And I hope that this library will work with my new
display on the DP-3 bus. Especially after reading it's source code&#x2026;
</p>

<p>
Of course, nothing works the first time. First, the coreboot doesn't show up
on the 2K screen, no configuration options matter. Second, I accidentally
burned the motherboard, when I incorrectly disconnected it from the battery.
</p>

<p>
With the new motherboard, I did the broken BIOS dump first. Both binaries have
the same MD5-hash, but the same wrong data inside. How did I notice this?
First, I flashed the old coreboot binary from the old motherboard to see if it
would work? When that program didn't work (as expected), I flashed the
"original" BIOS back. And the laptop <b>suddenly</b> won't turn on. Alas, when I
found this out, the original BIOS was lost.
</p>

<p>
However, I was able to use a corrupted BIOS dump to retrieve binary blobs
needed for coreboot on a Thinkpad X220:
</p>
<ul class="org-ul">
<li>Intel Flash Descriptor — 4 Kb with data about regions on the chip, including
it's read/write flags (for CPU).</li>
<li><p>
Intel ME blob — there is some unknown data for Intel ME. <a href="https://en.wikipedia.org/wiki/Intel_Management_Engine">It is claimed</a> that
the technology is useful for remote management in data centers. But on a
personal laptop such a <a href="https://www.fsf.org/blogs/sysadmin/the-management-engine-an-attack-on-computer-users-freedom">security hole</a> shouldn't exist. I don't need the CPU
inside the CPU, where unknown program with closed sources is running even
when the laptop is turned off (but while the power is supplied to the
motherboard); with access to DMA controller, with access to network card
(and with its own MAC address), with reserved memory in RAM and embedded JVM
with cryptography classes<sup><a id="fnr.intel_me" class="footref" href="#fn.intel_me" role="doc-backlink">3</a></sup>.
</p>

<p>
Unfortunately, without this blob in the BIOS chip — the laptop won't start
or will power itself off after some time, for the user's "safety".
</p></li>
<li>GbE blob — Ethernet controller configuration, including it's MAC address.</li>
</ul>

<p>
The coreboot I built booted successfully on my laptop and even displays itself
on the new 2K screen. As I now understand, everything works because at that
moment the original display module was disconnected from the LVDS bus and the
new display was the one connected to the video core via the DP-3 bus.
</p>

<p>
As I can see without the knowledge of Ada language, the coreboot (if the
motherboard is in good working order) checks each port connected to the video
core and outputs framebuffer to the first display found (if there is no
<code>Primary</code> display, connected to the motherboard):
</p>

<div class="org-src-container">
<label class="org-src-name">List of video outputs for X220 from src/mainboard/lenovo/x220/gma-mainboard.ads</label><pre class="src src-ada">private package GMA.Mainboard is

   ports : constant Port_List :=
     (DP1,
      DP2,
      DP3,
      HDMI1,
      HDMI2,
      HDMI3,
      Analog,
      LVDS,
      others =&gt; Disabled);

end GMA.Mainboard;
</pre>
</div>

<div class="org-src-container">
<label class="org-src-name">Video core initialization from src/drivers/intel/gma/hires_fb/gma-gfx_init.adb</label><pre class="src src-ada">HW.GFX.GMA.Display_Probing.Scan_Ports (configs, ports);

if configs (Primary).Port /= Disabled then
   for i in Pipe_Index loop
      exit when configs (i).Port = Disabled;

      min_h := pos32'min (min_h, configs (i).Mode.H_Visible);
      min_v := pos32'min (min_v, configs (i).Mode.V_Visible);
   end loop;

   fb := configs (Primary).Framebuffer;
   fb.Width    := Width_Type (min_h);
   fb.Height   := Height_Type (min_v);
   fb.Stride   := Div_Round_Up (fb.Width, 16) * 16;
   fb.V_Stride := fb.Height;

   for i in Pipe_Index loop
      exit when configs (i).Port = Disabled;

      configs (i).Framebuffer := fb;
   end loop;
</pre>
</div>

<p>
Therefore, while the original display (<code>Primary</code> display in coreboot
configuration) was connected to LVDS — the coreboot worked with it and ignored
the new display connected via DP-3. When I disconnected the original display,
the boot log appeared on the new display.
</p>
</div>
</div>
<div id="outline-container-libreboot" class="outline-2">
<h2 id="libreboot">Libreboot</h2>
<div class="outline-text-2" id="text-libreboot">
<p>
I used the laptop with coreboot for a while. But it didn't work stable
enough — looks like because Intel ME blob was corrupted. Sometimes the laptop
would randomly freeze and reboot was only possible by long pressing the Power
button. Sometimes the laptop doesn't turn on at all — the LED and the display
backlight are blinking and that's all. These are the symptoms described in the
<a href="https://doc.coreboot.org/northbridge/intel/sandybridge/me_cleaner.html">coreboot documentation</a> and in various guides about "why is it impossible to
completely remove Intel ME from Thinkpad X220?"
</p>

<p>
Also, when configuring coreboot, I set framebuffer resolution to 1366x768 for
my 2K screen. As a result, framebuffer did not use the whole screen (but
X-server did):
</p>


<div class="figure">
<p><img src="/assets/static/broken_framebuffer.jpg" alt="Broken framebuffer due to wrong configuration" align="center" />
</p>
<p style="text-align: center"><i>Framebuffer used the part of the screen inside the green frame</i></p>
</div>

<p>
As a result, I pissed them all off and it was time for coreboot tinkering. My
main problem was a completely lost BIOS dump — and I didn't know from where to
get the "right" binary blobs with the necessasry binary code inside.
</p>

<p>
So I start reading about <a href="https://libreboot.org/">libreboot</a>. This is something like a coreboot
distribution with the urge to minimise proprietary blobs usage. If there is an
opensource implementation, for example for memory initialization, it will be
used. Of course, <a href="https://libreboot.org/news/policy.html">for now it is impossible</a> to use opensource realizations for
everything for ThinkPad X220. But, as I understand:
</p>
<ul class="org-ul">
<li>IFD is generated by script during build. Fortunately, the Intel Firmware
Descriptor format is well known.</li>
<li>Intel ME downloaded from vendor and immediately disabled with <a href="https://github.com/corna/me_cleaner">me_cleaner</a>.</li>
<li>GbE — also generated by special script.</li>
</ul>

<p>
In other words, the original BIOS dump is not required to set up Libreboot on
the Thinkpad X220! All I need is the right serial memory programmer that
doesn't burn the BIOS memory chip and the southern bridge. Fortunately, I have
the Chinese CH341 programmer with a jumper to select the necessary logic level
(5V TTL or 3.3V CMOS):
</p>


<div class="figure">
<p><img src="/assets/static/ch341-1.jpg" alt="CH341 programmer with jumper to select logical level (at the bottom)" align="center" />
</p>
<p style="text-align: center"><i>CH341 serial programmer with jumper to select logic level (yellow, at the bottom)</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/ch341-2.jpg" alt="1-2 jumper position enables CMOS logical level, 2-3 enables TTL level" align="center" />
</p>
<p style="text-align: center"><i>Silkscreen printing with Chinese hierogrlyphs on the CH341 PCB (position 1-2 enables CMOS logical level, 2-3: TTL level)</i></p>
</div>

<p>
<b>Disclaimer!</b> All actions, described below, have been tested on my Thinkpad
only. Some actions were performed due to "historical background" of the laptop
modification process. Anyway, you should read the official documentation
first!
</p>

<p>
So, I started to bring my laptop to unattainable perfection, armed with
screwdriver, serial memory programmer and some free time.
</p>
</div>
<div id="outline-container-libreboot-preparations" class="outline-3">
<h3 id="libreboot-preparations">Preparations</h3>
<div class="outline-text-3" id="text-libreboot-preparations">
</div>
<div id="outline-container-reading-docs" class="outline-4">
<h4 id="reading-docs">Careful (haha, no) reading of the documentation</h4>
<div class="outline-text-4" id="text-reading-docs">
<p>
First of all, it is necessary to read a lot of documentation at
<a href="https://libreboot.org">https://libreboot.org</a>. There is a list of useful link that will give you some
knowledge:
</p>
<ul class="org-ul">
<li><a href="https://libreboot.org/docs/install/">https://libreboot.org/docs/install/</a> — here it is written, that Libreboot
supports my Thinkpad.</li>
<li><a href="https://libreboot.org/news/safety.html">https://libreboot.org/news/safety.html</a> — documentation about the necessary
binary blobs.</li>
<li><a href="https://libreboot.org/docs/install/ivy_has_common.html">https://libreboot.org/docs/install/ivy_has_common.html</a> — commands to prepare
the libreboot binary before flashing it.</li>
<li><a href="https://libreboot.org/docs/maintain/#environmental-variables">https://libreboot.org/docs/maintain/#environmental-variables</a>,
<a href="https://libreboot.org/docs/build/">https://libreboot.org/docs/build/</a> and <a href="https://libreboot.org/git.html">https://libreboot.org/git.html</a> — lbmk
build system manual.</li>
</ul>
</div>
</div>
<div id="outline-container-mac-addr-saving" class="outline-4">
<h4 id="mac-addr-saving">Storing MAC address of internal Ethernet card</h4>
<div class="outline-text-4" id="text-mac-addr-saving">
<p>
The original MAC address is erased during Libreboot installation, because it
is stored inside GbE blob. So I just recorded the <code>ifconfig em0</code> output to
restore my original MAC address and write it back to the GbE blob before
flashing Libreboot.
</p>
</div>
</div>
<div id="outline-container-coreboot-backup" class="outline-4">
<h4 id="coreboot-backup">Firmware backup</h4>
<div class="outline-text-4" id="text-coreboot-backup">
<p>
Backup of currently running firmware — may be the one that helps to keep the
laptop from bricking if something goes wrong. In my case, the backup of the
coreboot firmware is necessary.
</p>

<p>
This is why the serial memory programmer is necessary. As I found out, reading
the coreboot dump with the laptop turned on returns different dumps on each
read<sup><a id="fnr.coreboot_readings" class="footref" href="#fn.coreboot_readings" role="doc-backlink">4</a></sup>.
</p>

<p>
Required steps:
</p>
<ol class="org-ol">
<li>Disconnect the laptop from 220V.</li>
<li>Remove the battery.</li>
<li>Remove the 7 screws on the bottom of the laptop to remove the keyboard and
palm rest.</li>
<li>Remove the keyboard and palm rest.</li>
<li>Remove the RTC CMOS battery (and don't forget to check its voltage).</li>
<li>Peel off the corner of the protective waterproof film from the left bottom
corner of the motherboard. The desired chip will be underneath it.</li>
</ol>

<p>
After these steps, the clip from the programmer is connected to the laptop:
</p>


<div class="figure">
<p><img src="/assets/static/ch341_on_winbond.jpg" alt="CH341 programmer connected to Winbond W23Q64CV" align="center" />
</p>
<p style="text-align: center"><i>CH341 programmer, connected to the Winbond W25Q64CV chip</i></p>
</div>

<p>
Command to read chip contents:
</p>
<pre class="example">
sudo flashrom -p ch341a_spi -c "W25Q64BV/W25Q64CV/W25Q64FV" -r coreboot_original1.rom -V
</pre>

<p>
It should print something like the following lines, not the error messages:
</p>
<pre class="example">
thinkpad/libreboot % sudo flashrom -p ch341a_spi -c "W25Q64BV/W25Q64CV/W25Q64FV" -r coreboot_original1.rom -V

flashrom v1.3.0 on Linux 6.1.57-gentoo-x86_64 (x86_64)
flashrom is free software, get the source code at https://flashrom.org

Using clock_gettime for delay loops (clk_id: 1, resolution: 1ns).
flashrom was built with GCC 13.3.1 20241024, little endian
Command line (7 args): flashrom -p ch341a_spi -c W25Q64BV/W25Q64CV/W25Q64FV -r coreboot_original1.rom -V
Initializing ch341a_spi programmer
Device revision is 3.0.4
The following protocols are supported: SPI.
Probing for Winbond W25Q64BV/W25Q64CV/W25Q64FV, 8192 kB: compare_id: id1 0xef, id2 0x4017
Added layout entry 00000000 - 007fffff named complete flash
Found Winbond flash chip "W25Q64BV/W25Q64CV/W25Q64FV" (8192 kB, SPI) on ch341a_spi.
Chip status register is 0x00.
This chip may contain one-time programmable memory. flashrom cannot read
and may never be able to write it, hence it may not be able to completely
clone the contents of this chip (see man page for details).
Reading flash... done.
</pre>

<p>
I read the chip three times and then compare the resulting files, because I've
already lost a BIOS during a simultaneous process. But the MD5 sums of the
files don't match, because the programmer was plugged into the USB-hub on the
front panel of the PC:
</p>
<pre class="example">
thinkpad/libreboot % md5sum *
115b37ab22dbe43bc7ff746bf174ac1f  coreboot_original1.rom
840cc3456aa5b0b3ba96353165f2ee3e  coreboot_original2.rom
ee978f3ed5fb4aab34b1d0a79cef455c  coreboot_original3.rom
</pre>

<p>
All errors are gone after I plug the programmer directly into the USB port on
the motherboard:
</p>
<pre class="example">
thinkpad/libreboot % md5sum *
ee978f3ed5fb4aab34b1d0a79cef455c  coreboot_original1.rom
ee978f3ed5fb4aab34b1d0a79cef455c  coreboot_original2.rom
ee978f3ed5fb4aab34b1d0a79cef455c  coreboot_original3.rom
</pre>

<p>
This is enough to make a backup. But I go a lot further because of sentimental
considerations. I want the serial memory chip from the old (broken)
motherboard — Macronix MX25L6406E:
</p>


<div class="figure">
<p><img src="/assets/static/macronix.jpg" alt="Macronix MX25L6406E" align="center" />
</p>
<p style="text-align: center"><i>Macronix MX25L6406E</i></p>
</div>

<p>
First, I desoldered the chip from the old motherboard in two steps:
</p>
<ol class="org-ol">
<li>I mixed the lead-free solder on the chip contacts with normal lead
solder. The melting temperature of this mixture is lower than the melting
temperature of the lead-free solder.</li>
<li>I removed the serial memory chip with a solder dryer set to 380°C ("chinese
°C", so the temperature was determined by eye, by the speed of melting the
solder rod from the spool).</li>
</ol>

<p>
Place on the motherboard for the chip looks like this:
</p>


<div class="figure">
<p><img src="/assets/static/chip_footprint.jpg" alt="BIOS chip footprint" align="center" />
</p>
</div>

<p>
Four contacts in the middle are obviously not used — because the BIOS memory
chip is on a SOIC 8 package.
</p>

<p>
With the same two steps, I desoldered the Winbond memory chip from the working
motherboard and put it in an antistatic bag. After that I had the reliable
hardware backup for the bad times 🙃.
</p>

<p>
After that, I checked my backup, just in case. I soldered the Macronix chip to
the working motherboard:
</p>


<div class="figure">
<p><img src="/assets/static/soldered_macronix.jpg" alt="Macronix chip on the working motherboard" align="center" />
</p>
<p style="text-align: center"><i>Macronix chip on the working motherboard</i></p>
</div>

<p>
And flashed my backup of the coreboot to it using the command:
</p>
<pre class="example">
sudo flashrom -p ch341a_spi -c "MX25L6406E/MX25L6408E" -w coreboot_original1.rom -V
</pre>

<p>
Which successfully writes all necessary bits to the chip:
</p>
<pre class="example">
Erase/write done.
Verifying flash... VERIFIED.
</pre>

<p>
As a result, the laptop booted — so the new chip has been successfully
soldered and the backup copy of the coreboot has been properly read.
</p>
</div>
</div>
</div>
<div id="outline-container-get-libreboot-binary" class="outline-3">
<h3 id="get-libreboot-binary">Downloading Libreboot binary</h3>
<div class="outline-text-3" id="text-get-libreboot-binary">
<p>
Easy way:
</p>
<ol class="org-ol">
<li>Select the project mirror: <a href="https://libreboot.org/download.html">https://libreboot.org/download.html</a></li>
<li>Download archive with binary from the path
<code>/pub/libreboot/stable/20240612/roms</code> (for now it is the latest release).</li>
</ol>

<p>
The <del>not so easy</del> way for crypto-paranoics:
</p>
<ol class="org-ol">
<li>Download GPG-key from developers to verify the signed archive with the
binary: <a href="https://mirror.math.princeton.edu/pub/libreboot/lbkey.asc">https://mirror.math.princeton.edu/pub/libreboot/lbkey.asc</a></li>
<li><p>
Download the next 3 files from selected project mirror:
</p>
<pre class="example">
libreboot-20240612_x220_8mb.tar.xz
libreboot-20240612_x220_8mb.tar.xz.sha512
libreboot-20240612_x220_8mb.tar.xz.sig
</pre></li>
<li><p>
After that check SHA512 sum of archive:
</p>
<pre class="example">
thinkpad/libreboot % sha512sum -c libreboot-20240612_x220_8mb.tar.xz.sha512
./libreboot-20240612_x220_8mb.tar.xz: OK
</pre></li>
<li><p>
And the last step — import GPG-key from developers:
</p>
<pre class="example">
thinkpad/libreboot % gpg --show-keys --with-fingerprint lbkey.asc
pub   rsa4096 2023-12-28 [SC] [expires: 2028-12-26]
8BB1 F7D2 8CF7 696D BF4F  7192 5C65 4067 D383 B1FF
uid                      Leah Rowe &lt;info@minifree.org&gt;
sub   rsa4096 2023-12-28 [E] [expires: 2028-12-26]

thinkpad/libreboot % gpg --import lbkey.asc
gpg: key 5C654067D383B1FF: public key "Leah Rowe &lt;info@minifree.org&gt;" imported
gpg: Total number processed: 1
gpg:               imported: 1
</pre>

<p>
After running the first command, I compared the printed key fingerprint
with the fingerprint provided on the <a href="https://libreboot.org/download.html">download page</a>. Both fingerprints
should match. Otherwise, <i>someone</i> gave you a wrong key.
</p>

<p>
If all is OK, it is time to check the sign:
</p>
<pre class="example">
thinkpad/libreboot % gpg --verify libreboot-20240612_x220_8mb.tar.xz.sig libreboot-20240612_x220_8mb.tar.xz
gpg: Signature made Wed 12 Jun 2024 12:55:03 PM MSK
gpg:                using RSA key 8BB1F7D28CF7696DBF4F71925C654067D383B1FF
gpg: Good signature from "Leah Rowe &lt;info@minifree.org&gt;" [unknown]
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 8BB1 F7D2 8CF7 696D BF4F  7192 5C65 4067 D383 B1FF
</pre></li>
</ol>
</div>
</div>
<div id="outline-container-prepare-libreboot-binary" class="outline-3">
<h3 id="prepare-libreboot-binary">Preparing Libreboot binary for flashing</h3>
<div class="outline-text-3" id="text-prepare-libreboot-binary">
<p>
Obviously, it is impossible to remove all blobs from the Libreboot for X220
motherboard. For example, Intel ME has a cryptographic sign that checked every
CPU startup. And if this sign is wrong, the CPU won't start.
</p>

<p>
At the same time, distributing this proprietary blob within the Libreboot
distribution is impossible because of licensing issues. Developers got around
this situation with a special script that downloads Intel ME binary from a
vendor and insert it into the Libreboot binary with the correct offset. The
process is described on the Libreboot page:
<a href="https://libreboot.org/docs/install/ivy_has_common.html">https://libreboot.org/docs/install/ivy_has_common.html</a>. All the necessary
scripts are included in lbmk — the build system for coreboot. The lbmk can be
cloned from this repository: <a href="https://codeberg.org/libreboot/lbmk">https://codeberg.org/libreboot/lbmk</a>.
</p>

<p>
After installing the necessary dependencies, the downloaded tarball can be fed
to the script — it will unpack it and insert the necessary blobs to each
binary:
</p>
<pre class="example">
./vendor inject libreboot-20240612_x220_8mb.tar.xz
</pre>

<p>
The process will not be so fast — lbmk will clone necessary repositories,
build necessary utilitie, and so on. Successful completion will look like
this:
</p>
<pre class="example">
File tmp/romdir/bin/x220_8mb/seabios_withgrub_x220_8mb_libgfxinit_txtmode_usqwerty_grubfirst.rom is 8388608 bytes
File vendorfiles/xx20/me.bin is 86016 bytes
Adding vendorfiles/xx20/me.bin as the Intel ME section of tmp/romdir/bin/x220_8mb/seabios_withgrub_x220_8mb_libgfxinit_txtmode_usqwerty_grubfirst.rom
Writing new image to tmp/romdir/bin/x220_8mb/seabios_withgrub_x220_8mb_libgfxinit_txtmode_usqwerty_grubfirst.rom
ROM image successfully patched: tmp/romdir/bin/x220_8mb/seabios_withgrub_x220_8mb_libgfxinit_txtmode_usqwerty_grubfirst.rom
</pre>

<p>
Prepared binaries will be inside the lbmk catalog, in this path:
<code>./bin/release/x220_8mb/</code>.
</p>
</div>
</div>
<div id="outline-container-libreboot-flashing" class="outline-3">
<h3 id="libreboot-flashing">Flashing prepared Libreboot binary</h3>
<div class="outline-text-3" id="text-libreboot-flashing">
<p>
Of all the prepared binaries in the archive, the necessary binaries should
match the keyboard type on the laptop:
</p>


<div class="figure">
<p><img src="/assets/static/list-of-binaries.png" alt="List of binaries with added blobs" align="center" />
</p>
<p style="text-align: center"><i>List of binaries with added blobs</i></p>
</div>

<p>
In my case there is a keyboard with US keymap was installed in the laptop. So,
I need these two files:
</p>
<ul class="org-ul">
<li>seabios_withgrub_x220_8mb_libgfxinit_txtmode_usqwerty.rom</li>
<li>seabios_withgrub_x220_8mb_libgfxinit_corebootfb_usqwerty.rom</li>
</ul>

<p>
Libreboot in the first file will use text mode to display information on the
screen. Highly likely that libreboot will not display on the display from DP-3
bus. And in the second file uses the necessary libgfxinit.
</p>

<p>
It can be flashed to memory chip with command:
</p>
<pre class="example">
sudo flashrom -p ch341a_spi -c "MX25L6406E/MX25L6408E" -w seabios_withgrub_x220_8mb_libgfxinit_corebootfb_usqwerty.rom -V
</pre>


<div class="figure">
<p><img src="/assets/static/libreboot-flashing.jpg" alt="Flashing Libreboot" align="center" />
</p>
</div>

<p>
After this action my laptop finally works without freezing. And the system
loads in fullscreen mode:
</p>


<div class="figure">
<p><img src="/assets/static/framebuffer.jpg" alt="Laptop booting at fullscreen" align="center" />
</p>
</div>

<p>
All other notebook systems worked as before because I had previously
configured everything for coreboot:
<a href="https://eugene-andrienko.com/en/it/2020/09/26/thinkpad-x220-freebsd#update-2024-04-28">https://eugene-andrienko.com/it/2020/09/26/thinkpad-x220-freebsd#update-2024-04-28</a>
</p>
</div>
</div>
<div id="outline-container-mac-address" class="outline-3">
<h3 id="mac-address">MAC address</h3>
<div class="outline-text-3" id="text-mac-address">
<p>
Those, who read the Libreboot documentation, can see that I didn't add my MAC
address to the binary before flashing. As a result, I has a funny default
address:
</p>


<div class="figure">
<p><img src="/assets/static/default-mac.png" alt="Default Libreboot MAC address" align="center" />
</p>
</div>

<p>
I changed it by patching the binary with script from lbmk:
</p>
<pre class="example">
libreboot/lbmk % ./vendor inject -r bin/release/x220_8mb/seabios_withgrub_x220_8mb_libgfxinit_corebootfb_usqwerty.rom -b x220_8mb -m ██:██:██:██:██:██
</pre>

<p>
After that, I just flashed the modified libreboot to the motherboard again.
</p>
</div>
</div>
</div>
<div id="outline-container-libreboot-customization" class="outline-2">
<h2 id="libreboot-customization">Libreboot customization</h2>
<div class="outline-text-2" id="text-libreboot-customization">
<p>
Now, everything was just right. Almost everything. There is no separate set of
libreboot binaries for the Thinkpad X220 with the Ctrl and Fn keys swapped. I
tried for a while to get used to the standard key layout, but didn't
succeeded.
</p>

<p>
First, I tried to rebuild Libreboot with the necessary option to swap the
keys:
</p>
<pre class="example">
Chipset:
  Swap Fn and Ctrl keys=y
</pre>

<p>
It would seem that since I have already built coreboot and have all the
necessary documentation, there should be no problems. Just set the necessary
settings via the <code>./mk -m coreboot x220_8mb</code> and build the binary:
</p>
<pre class="example">
export XBMK_THREADS=3
./mk -b coreboot x220_8mb
</pre>

<p>
But <b>suddenly</b>, libreboot became the first opensource program in 16 years that I
couldn't build properly. Although the configuration and build process worked,
the binaries were always built with the default configuration (from the
Libreboot developers).
</p>

<p>
Fortunately, <i>some</i> options can be changed with the <code>nvramtool</code> utility. It comes
with coreboot. And in the list of those options there was an option to swap
the Ctrl and Fn keys:
</p>

<pre class="example">
% ../../coreboot/build/util/nvramtool/nvramtool -C seabios_withgrub_x220_8mb_libgfxinit_corebootfb_usqwerty.rom -a
boot_option = Fallback
reboot_counter = 0x0
debug_level = Debug
nmi = Enable
power_on_after_fail = Disable
first_battery = Primary
bluetooth = Enable
wwan = Enable
touchpad = Enable
wlan = Enable
trackpoint = Enable
fn_ctrl_swap = Disable
sticky_fn = Disable
power_management_beeps = Disable
sata_mode = AHCI
usb_always_on = Disable
me_state = Disabled
me_state_prev = 0x0
gfx_uma_size = 224M
volume = 0x3
</pre>

<p>
The next steps were the same as for setting the MAC address:
</p>
<ol class="org-ol">
<li><p>
Binary file with Libreboot should be changed with command:
</p>
<pre class="example">
% ../../coreboot/build/util/nvramtool/nvramtool -C seabios_withgrub_x220_8mb_libgfxinit_corebootfb_usqwerty.rom -w fn_ctrl_swap=Enable
</pre></li>
<li>And the modified file should be flashed to the laptop.</li>
</ol>

<p>
As a result, keys are swapped and the laptop works as intended without
freezing.
</p>
</div>
</div>
<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2" id="text-notes">
</div>
</div>
<div id="footnotes">

<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.manufacturer_approve" class="footnum" href="#fnr.manufacturer_approve" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Since IBM sold its own laptop business to the Lenovo,
the soul of the old Thinkpads is slowly but inexorably dissapearing from the
new Lenovo laptops.
</p>

<p class="footpara">
There is nothing surprising in this process — just a usual corporate
<a href="https://web.archive.org/web/20240208152542/https://www.ft.com/content/6fb1602d-a08b-4a8c-bac0-047b7d64aba5">enshittification</a>. One of it's manifestations — whitelist in Lenovo X220
BIOS. There are two PCI Express slots on the motherboard, with WiFi and WWAN
cards (or WiFi card and SSD) connected. These peripherals can be removed and
on their place can be installed some other peripherals supporting PCI
Express. The rest of the hardware will work with these new peripherals. But
not a software — during system startup, BIOS checks what ID of devices on the
bus are not listed in whitelist and refuse to start with system and refuse to
work with "not allowed" devices.
</p>

<p class="footpara">
This is usually justified by the fact that the user is supposedly "protected"
from "low-quality" components. It turns out that even I bought a laptop, I
don't own it completely. Even if I have the necessary technical skills, I
can't replace the WiFi card with a more modern one, because the manufacturer
treats me like an idiot! What's happening is exactly what RMS has written
about many times in his essays — if your device has proprietary software, then
you don't fully own the computing power of the device you bought and the
manufacturer can dictate its terms to you. For example, forcing you to use
hardware only from an approved list.
</p>

<p class="footpara">
Obviously, from the <del>financial point of view</del> point of view of increasing the
profits of some corporations for the sake of a nice report to the board of
shareholders — such restrictions are very profitable — the buyer of a laptop
will be forced to use only those devices whose manufacturers have agreed to
include their devices in the whitelist. And when the hardware becomes
obsolete — he will have to buy a new laptop instead of a small and replaceable
piece of hardware. If something breaks and the replacement part is off the
market, then &#x2026; again, he'll have to buy a new laptop instead of using a
suitable replacement. No one is thinking about usability, reducing e-waste,
etc. at this point (except maybe <a href="https://frame.work">Framework</a>).
</p>

<p class="footpara">
That's why the battery whitelist was added to the ThinkPad X230
(<a href="http://zmatt.net/unlocking-my-lenovo-laptop-part-1/">http://zmatt.net/unlocking-my-lenovo-laptop-part-1/</a>), the display whitelist
to the ThinkPad X240
(<a href="https://www.reddit.com/r/thinkpad/comments/dgydnf/x240_right_to_repair_no_brightness_control_after/">https://www.reddit.com/r/thinkpad/comments/dgydnf/x240_right_to_repair_no_brightness_control_after/</a>),
and so on. Of course, enshittification process wasn't stopped:
</p>
<ul class="org-ul">
<li>The seven-row keyboard with pyramidal buttons was removed from
ThinkPad X230. It was swapped to six-row keyboard without the next buttons:
<ul class="org-ul">
<li><code>Print Screen/System Request</code> — it is impossible for now to make a
screenshot with one key press and the <a href="https://en.wikipedia.org/wiki/Magic_SysRq_key">magic SysRq keys</a> become
unaccessible.</li>
<li><code>Scroll Lock</code> — it was used to scroll the text in the text console. For
example, to scroll boot log (obviously, at this point the scrolling with
bash/zsh or tmux is unaccessible).</li>
<li><code>Pause/Break</code> — it can be used to pause applications via the <code>kill -17</code>:
<a href="https://vermaden.wordpress.com/2018/09/19/freebsd-desktop-part-16-configuration-pause-any-application/">https://vermaden.wordpress.com/2018/09/19/freebsd-desktop-part-16-configuration-pause-any-application/</a></li>
<li>2 buttons to go forward and backward in Internet browser. They had
<code>XF86Forward</code> and <code>XF86Back</code> keycodes — and they were very useful for
switching buffers in Emacs.</li>
</ul></li>
<li><p>
The <b>separate</b> buttons for TrackPoint is dissapeared in Thinkpad X240. They
were moved directly to the touchpad. The curved profile of the left and
right buttons, as well as the grooved surface of the middle button, allowed
you to press them without thinking, using muscle memory, knowing that your
finger wouldn't hit the touchpad. With the buttons underneath the flat
surface of the touchpad, there's <i>nothing to stop your finger</i> from sliding
further onto the touchpad.
</p>

<p>
Plus, with gloved hands, it was more comfortable to press just the
individual, <b>physical</b> buttons.
</p>

<p>
Fortunately, users outrage brought these buttons back, but Lenovo tried to
remove them again in the <a href="https://en.wikipedia.org/wiki/ThinkPad_X1_series#/media/File:Gladstone_ready_for_2017_Budget.jpg">Thinkpad X1 Carbon gen 2</a>. However, there were so
many inadequate “iNnOvAtIoNs” in this laptop model that it would take a
separate list to note them all.
</p></li>
<li><p>
Gradually, starting with the X200, the LEDs on the lid of the notebook
started to disappear. First, in X220 the NumLock indicator disappeared from
the display side (y64 need 5t t6 av65d ty*5ng l52e th5s and then fixing
everything), the sleep indicator (you need it to understand the state of the
notebook if it was left with the lid open) and the battery charging
indicator (you don't need a separate program indicator, the state of which
is visible only after OS booting). Then, in X230 the Bluetooth status
indicator disappeared (by it you can understand that rf killswitch is
switched to the off position), and in X240 they removed all status LEDs from
the display side (but brought back the glowing red dot in the logo).
</p>

<p>
In the end, the latest notebook in the X-series — ThinkPad X13 Gen 4 —
doesn't have a single status LED on either the front or back side🤷‍♂️ (except
for the CapsLock indicator).
</p></li>
<li><p>
The removable battery was disappeared in X280 — you can not change the
degraded battery to a new one by yourself. You have to take the laptop to a
service center to do it. Also, you will not be able to buy a more capacious
battery and connect it by yourself.
</p>

<p>
The unobvious advantage of using a high-capacity battery is also gone — the
X220 can be carried with the open lid around the office, simply by placing
it on your forearm and using four fingers to hold it on to the battery, so
the laptop doesn't fall over.
</p></li>
<li><p>
Replaced Display Port with HDMI.
</p>

<div class="figure">
<p><img src="/assets/static/display-port.png" alt="Fun fact. Display port is objectively better than HDMI. Royalty-free, baby" align="center" />
</p>
</div></li>
<li><p>
They replaced the round charging connector with a rectangular one to reduce
the thickness of the laptop, but now the plug has only two positions in
which to plug it in. The backlight for the keyboard was also mocked for a
long time. They're replacing the usual LED, built into the lid, to
retractable construction. Or remove it altogether and put the keyboard
backlight "like in everyone else's laptop". While the LED in the lid had an
undeniable advantage: it could be used to light up the desk if necessary.
</p>

<p>
A similar disaster happened with the ability to strap a docking station or
an extra battery to the bottom of the laptop, with separate buttons for
adjusting the volume, with LEDs to indicate that the speakers or microphone
are on mute and so on&#x2026;
</p></li>
</ul>

<p class="footpara">
As long as it is possible to increase profits by worsening usability of
laptops originally designed by the "engineers for engineers", by simply
increasing GHz and Gb and by copying the exterior of MacBooks, selling all
this to ordinary users as an "innovation" — such things will happen. There are
already voices in favor of removing TrackPoint from ThinkPads: "<a href="https://www.windowscentral.com/hardware/laptops/sorry-lenovo-but-its-time-to-kill-off-the-thinkpad-trackpoint-forever">Sorry Lenovo,
but it's time to kill off the ThinkPad TrackPoint FOREVER</a>" — although from
this article it's clear that the author just doesn't know how to use "blind
typing" and hasn't worked with gloves, so it seems to him that TrackPoint is
"an inconvenient thing that gets in the way".
</p></div></div>

<div class="footdef"><sup><a id="fn.linuxbios" class="footnum" href="#fnr.linuxbios" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://web.archive.org/web/20120916212555/http://www.h-online.com/open/features/The-Open-Source-BIOS-is-Ten-An-interview-with-the-coreboot-developers-746525.html?view=print">https://web.archive.org/web/20120916212555/http://www.h-online.com/open/features/The-Open-Source-BIOS-is-Ten-An-interview-with-the-coreboot-developers-746525.html?view=print</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.intel_me" class="footnum" href="#fnr.intel_me" role="doc-backlink">3</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Quote from <a href="https://libreboot.org/faq.html">https://libreboot.org/faq.html</a>:
</p>

<blockquote>
<p>
The ME consists of an ARC processor core (replaced with other processor cores
in later generations of the ME), code and data caches, a timer, and a secure
internal bus to which additional devices are connected, including a
cryptography engine, internal ROM and RAM, memory controllers, and a direct
memory access (DMA) engine to access the host operating system’s memory as
well as to reserve a region of protected external memory to supplement the
ME’s limited internal RAM. The ME also has network access with its own MAC
address through an Intel Gigabit Ethernet Controller. Its boot program, stored
on the internal ROM, loads a firmware “manifest” from the PC’s SPI flash
chip. This manifest is signed with a strong cryptographic key, which differs
between versions of the ME firmware. If the manifest isn’t signed by a
specific Intel key, the boot ROM won’t load and execute the firmware and the
ME processor core will be halted.
</p>

<p>
The ME firmware is compressed and consists of modules that are listed in the
manifest along with secure cryptographic hashes of their contents. One module
is the operating system kernel, which is based on a proprietary real-time
operating system (RTOS) kernel called “ThreadX”. The developer, Express Logic,
sells licenses and source code for ThreadX. Customers such as Intel are
forbidden from disclosing or sublicensing the ThreadX source code. Another
module is the Dynamic Application Loader (DAL), which consists of a Java
virtual machine and set of preinstalled Java classes for cryptography, secure
storage, etc. The DAL module can load and execute additional ME modules from
the PC’s HDD or SSD. The ME firmware also includes a number of native
application modules within its flash memory space, including Intel Active
Management Technology (AMT), an implementation of a Trusted Platform Module
(TPM), Intel Boot Guard, and audio and video DRM systems.
</p>
</blockquote></div></div>

<div class="footdef"><sup><a id="fn.coreboot_readings" class="footnum" href="#fnr.coreboot_readings" role="doc-backlink">4</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Once, I found an explanation of this on Reddit, but now I
can't find the link. The fact that flashrom returns different coreboot dumps
every time when using <code>-p internal</code> on Thinkpad X220 is completely normal and to
get a <i>correct</i> backup you <b>need</b> to use a programmer.
</p></div></div>


</div>
</div>]]></content><author><name>Eugene Andrienko</name></author><category term="it" /><category term="thinkpad" /><summary type="html"><![CDATA[I think almost everyone who reads my blog knows that the BIOS is the first program that runs when the computer is turned on. Usually, the only actions user can do with this program — open the BIOS menu and change the boot order, change date/time, change peripheral settings and so on. Or, if the user is lucky, he can find and install the BIOS modified by hackers (but he can't look inside this BIOS without reverse engineering skills). Unfortunately, the BIOS source code is closed and initialization of your computer should rely on the forbearance of some companies that develop BIOS binaries (for example, AMI or Award Software International) and forbearance of computer hardware vendors.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://eugene-andrienko.com/assets/static/header-libreboot.jpg" /><media:content medium="image" url="https://eugene-andrienko.com/assets/static/header-libreboot.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="en"><title type="html">Autumn photos (2024)</title><link href="https://eugene-andrienko.com/en/photo/2024/12/16/autumn-photos-2024.html" rel="alternate" type="text/html" title="Autumn photos (2024)" /><published>2024-12-16T00:00:00+03:00</published><updated>2024-12-16T00:00:00+03:00</updated><id>https://eugene-andrienko.com/photo/2024/12/16/autumn-photos-2024</id><content type="html" xml:base="https://eugene-andrienko.com/photo/2024/12/16/autumn-photos-2024.html"><![CDATA[<div class="outline-2">
<h2>Street photos</h2>
<div class="outline-text-2">

<div class="figure">
<p><img src="/assets/static/20240901_175512.JPG" alt="Cat in the bushes" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_172503.JPG" alt="Stairs and reflection of the stairs on the wall" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_180005.JPG" alt="Construction site" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_180049.JPG" alt="The house reflection in the water" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_180352.JPG" alt="The bridge, the river and the reflection of the bridge in the river" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_181003.JPG" alt="The black cat on the white car" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_183044.JPG" alt="20240901_183044.JPG" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_183448.JPG" alt="The plant behind the glass. The pipes are reflected on the glass" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_183504.JPG" alt="The pipes with the white winding on it" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_183735.JPG" alt="Turned on and rounded LED line" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_184537.JPG" alt="The white arc with people under it" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_184843.JPG" alt="Overexposured house entrance" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_185217.JPG" alt="Double exposured photo - the black dog and the empty street" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_185409.JPG" alt="Disfoqused flower and the wall of the house at the background" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_190652.JPG" alt="The oak leaves" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_190947.JPG" alt="The ornamental cabbage" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_211915.JPG" alt="Illuminated interior of the store at night" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240902_130540.JPG" alt="Backsides of the garages, filled with graffiti" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240902_130618.JPG" alt="Unknown cyclist in casual clothes" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240929_181202.JPG" alt="The rural house with blue roof" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240929_194649.JPG" alt="The green pond with concrete walls" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240929_195025.JPG" alt="The oaf brown leaf with green leaves around" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240929_195256.JPG" alt="Grocery store near the road at night" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240929_195606.JPG" alt="Backsides of grocery store at night. Illuminated by the red brake lights of the car." align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241016_150405.JPG" alt="Bird's wedge" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241023_170805.JPG" alt="Sunset with black city's roofs at the foreground" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241023_170913.JPG" alt="Sunset with black city's roofs at the foreground" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241024_221613.JPG" alt="Unfallen autumn leaves. Shot with flash" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241024_223031.JPG" alt="Brown colored lamp on the brown stone wall" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241024_223533.JPG" alt="Blue and orange colored pedestrian way" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241029_194625.JPG" alt="Road traffic shot with long exposure" align="center" />
</p>
<p style="text-align: center"><i>Road traffic. Shot with long exposure.</i></p>
</div>
</div>
</div>
<div class="outline-2">
<h2>Wheels</h2>
<div class="outline-text-2">

<div class="figure">
<p><img src="/assets/static/20240901_171707.JPG" alt="Electric scooter's wheel" align="center" />
</p>
<p style="text-align: center"><i>Electric scooter's wheel</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_184004.JPG" alt="Electric scooter's wheel" align="center" />
</p>
<p style="text-align: center"><i>Electric scooter's wheel</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_185920.JPG" alt="20240901_185920.JPG" align="center :alt: Scooter's mirror" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_185943.JPG" alt="Scooter's mirror" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_185950.JPG" alt="Scooter's dashboard" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/mercedes.jpg" alt="Black and white and colored photos of an old mercedes" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_192947.JPG" alt="Red stoplight of the sea green car" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240902_131757.JPG" alt="Black-red stoplight of the blue car" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241024_220136.JPG" alt="Foggy car window at night" align="center" />
</p>
</div>
</div>
</div>]]></content><author><name>Eugene Andrienko</name></author><category term="photo" /><summary type="html"><![CDATA[Street photos]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://eugene-andrienko.com/assets/static/header_autumn_photos2024.jpg" /><media:content medium="image" url="https://eugene-andrienko.com/assets/static/header_autumn_photos2024.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="en"><title type="html">How I wrote an Emacs plugin to build my blog</title><link href="https://eugene-andrienko.com/en/it/2024/12/01/emacs-plugin-jekyll-blog.html" rel="alternate" type="text/html" title="How I wrote an Emacs plugin to build my blog" /><published>2024-12-01T00:00:00+03:00</published><updated>2024-12-01T00:00:00+03:00</updated><id>https://eugene-andrienko.com/it/2024/12/01/emacs-plugin-jekyll-blog</id><content type="html" xml:base="https://eugene-andrienko.com/it/2024/12/01/emacs-plugin-jekyll-blog.html"><![CDATA[<div class="outline-2">
<h2>TOC&#xa0;&#xa0;&#xa0;<span class="tag"></span></h2>
<div class="outline-text-2">
<ul class="org-ul">
<li><a href="#preface">Introduction</a></li>
<li><a href="#generator-first-version">First version of OrgMode to HTML translator</a></li>
<li><a href="#emacs-lisp-jekyll-gen">Jekyll-blog generation with Emacs Lisp</a>
<ul class="org-ul">
<li><a href="#convert-org2html">Org to HTML conversion</a></li>
<li><a href="#copy-2-tmp-catalog">Custom function to copy files in temporary catalog</a></li>
<li><a href="#html-file-editing">HTML files patching</a></li>
<li><a href="#static-files-export">Static files export</a></li>
<li><a href="#jekyll-build-from-emacs">Call Jekyll from Emacs</a></li>
<li><a href="#create-new-post">New blogpost creation</a></li>
<li><a href="#jekyll-local-server">Local server start</a></li>
<li><a href="#jekyll-clean">Jekyll's working directory cleanup</a></li>
<li><a href="#transient-ui">UI (transient)</a></li>
<li><a href="#emacs-plugin">Emacs plugin specific code</a></li>
<li><a href="#loading-plugin-in-emacs">Loading plugin in Emacs</a></li>
</ul></li>
<li><a href="#source-code">Source code</a></li>
<li><a href="#plugin-improvement">What else could be improved?</a></li>
<li><a href="#notes">Notes</a></li>
</ul>
</div>
</div>
<div id="outline-container-preface" class="outline-2">
<h2 id="preface">Introduction</h2>
<div class="outline-text-2" id="text-preface">
<p>
In this post I'll tell you about my little Emacs plugin, that makes it easy to
work with a blog, built on top of a static site engine. It is possible to
write posts on OrgMode, although the almost all static site generators support
only Markdown, rarely reStructuredText, or HTML🌚.
</p>

<p>
I used a lot of things:
</p>
<ul class="org-ul">
<li>Wrote my blog in LiveJournal</li>
<li>Self-hosted Wordpress blog on top of LAMP</li>
<li>Wrote blog in Blogger.com</li>
<li>Self-hosted my blog again. In this iteration, it was built using the Pelican
static-site generator. Comments were added using Disqus.</li>
<li>Tried <a href="https://hackage.haskell.org/package/pencil">pencil</a></li>
<li>and so on&#x2026;</li>
</ul>

<p>
In the end, I was tired of administering Apache/Nginx, MySQL/PostgreSQL,
php-fpm and so on. Also, I was also tired of useless WYSIWYG editors and
unnecessary "updates" of blogging platforms. Almost at that time, various
"virtue signaling" came on the scene — and because of that I
lost<sup><a id="fnr.virtue_signaling" class="footref" href="#fn.virtue_signaling" role="doc-backlink">1</a></sup> my VPS (it provides the clear access to the Internet
for me — like before, in the 1990s and 2000s, when were the really global
network with possibility to communicate with different people around the
world, without the censorship, GeoIP blocks and DPI). Also, I almost lost my
domain name<sup><a id="fnr.namecheap" class="footref" href="#fn.namecheap" role="doc-backlink">2</a></sup>.
</p>

<p>
As a result I stared using <a href="https://jekyllrb.com/">Jekyll</a><sup><a id="fnr.jekyll" class="footref" href="#fn.jekyll" role="doc-backlink">3</a></sup>. Now, the copy of my blog, with
all HTML and CSS files, is stored on my computer, independent of third-party
CDN, libraries and other stuff, to which I can lose access at any moment. I
"slightly" modified the <a href="https://github.com/jeffreytse/jekyll-theme-yat">Yat</a> theme, to remove JavaScript from
it<sup><a id="fnr.javascript" class="footref" href="#fn.javascript" role="doc-backlink">4</a></sup>, and loading of third-party resources from CDN. The only
remaining dependency — from the Jekyll itself, and from it's plugins. But this
stuff is already on my hard drive and it's not going anywhere (don't forget
about backups!).
</p>

<p>
I also thought about how to achieve the next things:
</p>
<ol class="org-ol">
<li>My blog post sources should not be tightly coupled with a static site
generator. I should be able to switch from one generator to another,
without much pain. Or even write my own generator. This should be usable if
Jekyll developers <i>suddenly</i> decide to <a href="https://en.wikipedia.org/wiki/Discrimination_based_on_nationality">discriminate people by nationality or
location</a>.</li>
<li><p>
My blog should not be tightly coupled to a foreign infrastructure. One
dependency I still can't get rid of is the dependency on domain name
registar. For now, I can only evade registars, who discriminate clients or
who work under the jurisdiction of my current place of residence.
</p>

<p>
To host static blog — any microwave oven can be used, if it is placed in
the right place — in a place where where the connectivity of the global
network is not destroyed/destroing.
</p></li>
<li>I'll be able to edit blog posts my way — in Emacs with OrgMode. Not in a
WYSIWYG online editor or forced to use the Markdown markup language.</li>
<li>I'll be able to use my catalog structure to store blog post source, images
and other related files.</li>
</ol>

<p>
If I can't solve item #2 with some Emacs Lisp code, then over items can be
solved this way.
</p>
</div>
</div>
<div id="outline-container-generator-first-version" class="outline-2">
<h2 id="generator-first-version">First version of OrgMode to HTML translator</h2>
<div class="outline-text-2" id="text-generator-first-version">
<p>
First version of OrgMode to HTML translator was based on the bash, sed, pandoc
and my own Java filter for pandoc. I used it for almost a year.
</p>

<p>
All my posts that were processed by this translator were in the <code>articles/</code>
directory. Each post was stored in its own subdirectory:
</p>

<pre class="example">
rsync/blog (master) % tree --noreport articles
articles/
├── arms/
├── cycling/
│   ├── 2020-05-17-thanks-for-living/
│   │   ├── article-ru.org
│   │   ├── hate of car drivers.jpg
│   │   ├── kamennoostrovskii.jpg
│   │   ├── trollface.jpg
│   │   ├── truck.gif
│   │   └── ushakovski most.jpg
│   ├── 2021-04-08-vk-cyclist-types/
│   │   ├── article-ru.org
│   │   ├── hate of car drivers.jpg
│   │   ├── usual-seat-as-urbanist-thinks.jpg
│   │   └── usual-seat.jpg
├── it/
│   ├── 2020-09-09-thinkpad-x220-freebsd/
│   │   ├── article-en.org
│   │   ├── article-ru.org
│   │   └── freebsd_intel_glitches.jpg
│   ├── 2023-12-20-plain-text-accounting/
│   ├── 2024-01-02-life-in-console/
│   ├── 2024-07-07-thinkpad-x220-second-life/
│   ├── 2024-10-27-freebsd-bhyve-windows/
│   ├── 2024-11-09-emacs-plugin-jekyll-blog/
│   ├── draft-palm-tung-e2-archaeological/
│   │   ├── 20231223_141710.jpg
│   │   ├── 20231223_142550.jpg
│   │   ├── 20231230_200500.jpg
│   │   ├── 20231231_144949.jpg
│   │   ├── 20231231_205901.jpg
│   │   ├── 20240101_162620.jpg
│   │   ├── 20240101_215815.jpg
│   │   ├── 20240101_215908.jpg
│   │   ├── article-ru.org
├── leatherwork/
│   └── 2021-01-29-leatherwork-useful-links/
│       └── article-ru.org
└── photo/
</pre>

<p>
Today I still use this tree-like structure. It allows to see all related to
blog post files in one catalog. Also, I'm able to open an org-file with
blogpost text in Emacs and will see text almost as it will be in the blog
itself:
</p>


<div class="figure">
<p><img src="/assets/static/emacs-blog-post.png" alt="Post's draft, opened in Emacs" align="center" />
</p>
<p style="text-align: center"><i>Blogpost text, opened in Emacs</i></p>
</div>

<p>
Inside the catalog with the blog files there was a special <code>Makefile</code> that
executed <i>the special</i> bash script. This script scanned the <code>articles/</code> catalog
and put the found blogpost files to the next conveyor:
</p>


<div class="figure">
<p><img src="/assets/static/first_generator.png" alt="Conveyor for Org2HTML transformation" align="center" />
</p>
<p style="text-align: center"><i>Conveyor for OrgMode to HTML transformation</i></p>
</div>

<p>
You can see the code of this conveyor <a href="https://github.com/eugeneandrienko/eugeneandrienko.github.io/blob/3b70ec4997a063fdd3c1bf4c23c3c9a5d78b78e3/README.org">in the next commit</a>, in the <code>README.org</code>
file. Source code for pandoc's Java filter <a href="https://codeberg.org/evgandr/pandoc_jekyll">is in a separate repository</a>.
</p>

<p>
Obviously it was overcomplicated. It will be much simpler if the resulting
HTML file is generated by OrgMode functions, without unnecessary additional
transformations. By the way, there are a lot of functions in OrgMode to
convert org-files into different formats.
</p>

<p>
At that time I found <a href="https://mastodon.social/@fabrik42">Christian Dewein's</a> article in Mastodon: <a href="https://christiandewein.com/publishing-with-jekyll-emacs-org-mode">Publishing on the
web with Jekyll, Emacs and Org-Mode</a>&#x2026;
</p>
</div>
</div>
<div id="outline-container-emacs-lisp-jekyll-gen" class="outline-2">
<h2 id="emacs-lisp-jekyll-gen">Jekyll-blog generation with Emacs Lisp</h2>
<div class="outline-text-2" id="text-emacs-lisp-jekyll-gen">
<p>
As I realized, I can throw away my <code>sed</code> + <code>awk</code> + <code>pandoc</code> + <code>Java-фильтр</code> conveyor
and replace it with a single call to the
<code>org-publish-project</code><sup><a id="fnr.org-publish-project" class="footref" href="#fn.org-publish-project" role="doc-backlink">5</a></sup> function. And Markdown⇒HTML
conversion became unnecessary.
</p>

<p>
I had some experience in Lisp <code>programming</code> (I programmed few things with
Clojure<sup><a id="fnr.clojure" class="footref" href="#fn.clojure" role="doc-backlink">6</a></sup>). So I started to write my own plugin, using <a href="https://mastodon.social/@fabrik42">Christian
Dewein's</a> code as a reference.
</p>

<p>
Emacs Lisp programming in Emacs is such a joy! You have a built-in help system
via <code>C-h f</code>, <code>C-h v</code> and so on. And you have a built-in REPL (<code>M-x ielm</code>). And you
already have a built-in debugger. I can calmly play with <a href="https://www.s-expressions.org/home">S-expressions</a>,
immediately check how it works in REPL, and build my program "brick by brick".
</p>
</div>
<div id="outline-container-convert-org2html" class="outline-3">
<h3 id="convert-org2html">Org to HTML conversion</h3>
<div class="outline-text-3" id="text-convert-org2html">
<p>
The above-mentioned <code>org-publish-project</code> function is able to take files from a
specified catalog, convert them to a specified format and save new files to
another catalog. All <code>org-publish-project</code> settings are stored in the
<code>org-publish-project-alist</code> list.
</p>

<p>
For example, to convert org files from <code>~/test</code> to HTML files for Jekyll in
<code>~/results</code>, I can use the following code:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">let</span> ((org-publish-project-alist `((<span style="color: #2aa198;">"org-jekyll-org"</span>
                                    <span style="color: #657b83; font-weight: bold;">:base-directory</span> <span style="color: #2aa198;">"~/test"</span>
                                    <span style="color: #657b83; font-weight: bold;">:base-extension</span> <span style="color: #2aa198;">"org"</span>
                                    <span style="color: #657b83; font-weight: bold;">:publishing-directory</span> <span style="color: #2aa198;">"~/results"</span>
                                    <span style="color: #657b83; font-weight: bold;">:publishing-function</span> org-html-publish-to-html
                                    <span style="color: #657b83; font-weight: bold;">:html-extension</span> <span style="color: #2aa198;">"html"</span>
                                    <span style="color: #657b83; font-weight: bold;">:headline-levels</span> 5
                                    <span style="color: #657b83; font-weight: bold;">:html-toplevel-hlevel</span> 2
                                    <span style="color: #657b83; font-weight: bold;">:html-html5-fancy</span> t
                                    <span style="color: #657b83; font-weight: bold;">:html-table-attributes</span> (<span style="color: #657b83; font-weight: bold;">:border</span> <span style="color: #2aa198;">"2"</span> <span style="color: #657b83; font-weight: bold;">:cellspacing</span> <span style="color: #2aa198;">"0"</span> <span style="color: #657b83; font-weight: bold;">:cellpadding</span> <span style="color: #2aa198;">"6"</span> <span style="color: #657b83; font-weight: bold;">:frame</span> <span style="color: #2aa198;">"void"</span>)
                                    <span style="color: #657b83; font-weight: bold;">:section-numbers</span> nil
                                    <span style="color: #657b83; font-weight: bold;">:html-inline-images</span> t
                                    <span style="color: #657b83; font-weight: bold;">:htmlized-source</span> t
                                    <span style="color: #657b83; font-weight: bold;">:with-toc</span> nil
                                    <span style="color: #657b83; font-weight: bold;">:with-sub-superscript</span> nil
                                    <span style="color: #657b83; font-weight: bold;">:body-only</span> t
                                    <span style="color: #657b83; font-weight: bold;">:recursive</span> t))))
  (org-publish-project <span style="color: #2aa198;">"org-jekyll-org"</span> t nil))
</pre>
</div>

<p>
Here are the next important parameters:
</p>
<ul class="org-ul">
<li><code>:base-directory</code> — path to directory containing org files for export.</li>
<li><code>:base-extension</code> — extension(s) for source files.</li>
<li><code>:publishing-directory</code> — path to directory with export results.</li>
</ul>

<p>
There are some tweaks for HTML conversion in other parameters. I use it to get
HTML files suitable for use inside Jekyll.
</p>

<p>
It will be good to change some paths without editing the source code. To
achieve this, the <code>defcustom</code><sup><a id="fnr.defcustom" class="footref" href="#fn.defcustom" role="doc-backlink">7</a></sup> function from Emacs Lisp can be
used. This function allows you to describe the plugin's settings in a way that
they can be edited in generally accepted methods — via <code>M-x customize</code> or via
the <code>:custom</code> section in the <code>use-package</code>:
</p>


<div class="figure">
<p><img src="/assets/static/customize.png" alt="Emacs M-x customize" align="center" />
</p>
<p style="text-align: center"><i>M-x customize interface</i></p>
</div>

<p>
I have described the path to catalog with blog and the path to catalog with
blog's articles in the next way:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defgroup</span> <span style="color: #b58900;">org-jekyll</span> ()
  <span style="color: #2aa198;">"Emacs mode to write on OrgMode for Jekyll blog."</span>
  <span style="color: #657b83; font-weight: bold;">:group</span> 'local
  <span style="color: #657b83; font-weight: bold;">:prefix</span> <span style="color: #2aa198;">"org-jekyll-"</span>
  <span style="color: #657b83; font-weight: bold;">:link</span> '(url-link <span style="color: #657b83; font-weight: bold;">:tag</span> <span style="color: #2aa198;">"Source code"</span> <span style="color: #2aa198;">"https://github.com/eugeneandrienko/eugeneandrienko.github.io"</span>))

(<span style="color: #859900; font-weight: bold;">defgroup</span> <span style="color: #b58900;">org-jekyll-paths</span> nil
  <span style="color: #2aa198;">"Paths for emacs mode to write on OrgMode for Jekyll blog."</span>
  <span style="color: #657b83; font-weight: bold;">:group</span> 'org-jekyll
  <span style="color: #657b83; font-weight: bold;">:prefix</span> <span style="color: #2aa198;">"org-jekyll-paths-"</span>)

(<span style="color: #859900; font-weight: bold;">defcustom</span> <span style="color: #268bd2;">org-jekyll-paths-base-path</span>
  <span style="color: #2aa198;">"~/rsync/blog"</span>
  <span style="color: #2aa198;">"Path to the base directory of my blog."</span>
  <span style="color: #657b83; font-weight: bold;">:type</span> 'directory
  <span style="color: #657b83; font-weight: bold;">:group</span> 'org-jekyll-paths)

(<span style="color: #859900; font-weight: bold;">defcustom</span> <span style="color: #268bd2;">org-jekyll-paths-articles-path</span>
  (concat org-jekyll-paths-base-path <span style="color: #2aa198;">"/articles"</span>)
  <span style="color: #2aa198;">"Path to directory with original articles in Org format."</span>
  <span style="color: #657b83; font-weight: bold;">:type</span> 'directory
  <span style="color: #657b83; font-weight: bold;">:group</span> 'org-jekyll-paths)
</pre>
</div>

<p>
The first S-expression describes a new menu item in the Emacs settings. The
second S-expression creates a submenu item inside the previous menu
item. Inside the last item are two settings — path to directory with blog and
path to blogpost source files.
</p>

<p>
As a result, the <code>org-publish-project</code> call from above can be rewritten in the
next way:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">let</span> ((org-publish-project-alist `((<span style="color: #2aa198;">"org-jekyll-org"</span>
                                    <span style="color: #657b83; font-weight: bold;">:base-directory</span> ,org-jekyll-paths-articles-path
                                    <span style="color: #657b83; font-weight: bold;">:base-extension</span> <span style="color: #2aa198;">"org"</span>
                                    <span style="color: #657b83; font-weight: bold;">:publishing-directory</span> ,(concat org-jekyll-paths-base-path <span style="color: #2aa198;">"/_posts"</span>)
                                    <span style="color: #657b83; font-weight: bold;">:publishing-function</span> org-html-publish-to-html
</pre>
</div>

<p>
Here we have a special syntax for lists that contain executable code
inside. The normal list declaration can't evaluate the code inside:
</p>

<pre class="example">
&gt; '("a" (concat "b" "2") "c")

("a"
 (concat "b" "2")
 "c")
</pre>

<p>
But when backquoting is used<sup><a id="fnr.quoting" class="footref" href="#fn.quoting" role="doc-backlink">8</a></sup>, it becomes possible to include and
evaluate code within the list:
</p>

<pre class="example">
&gt; `("a" ,(concat "b" "2") "c")
("a" "b2" "c")
</pre>

<p>
The aforementioned <code>org-publish-project</code> call is enough to convert org-files to
HTML in an ideal case. But, <i>in my case,</i> I can't use it — all my blogpost org
files are not stored in one catalog, but in separate subdirectories!
</p>

<p>
This means, that I need to call <i>a special, custom function</i> before calling
<code>org-publish-project</code>. This <i>custom function</i> should copy all the org files from
the subdirectories to the temporary directory for <code>org-publilsh-project</code>.
</p>

<p>
To call this <i>custom function</i> before calling <code>org-publish-project</code> there is a
<code>:preparation-function</code> parameter:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">let</span> ((org-publish-project-alist `((<span style="color: #2aa198;">"org-jekyll-org"</span>
                                    <span style="color: #657b83; font-weight: bold;">:base-directory</span> ,(concat org-jekyll-paths-base-path <span style="color: #2aa198;">"/_articles"</span>)
                                    <span style="color: #657b83; font-weight: bold;">:base-extension</span> <span style="color: #2aa198;">"org"</span>
                                    <span style="color: #657b83; font-weight: bold;">:publishing-directory</span> ,(concat org-jekyll-paths-base-path <span style="color: #2aa198;">"/_posts"</span>)
                                    <span style="color: #657b83; font-weight: bold;">:preparation-function</span> org-jekyll--prepare-articles
</pre>
</div>

<p>
As you can see, here I change the <code>:base-directory</code> parameter to the path of the
temporary catalog containing the articles.
</p>
</div>
</div>
<div id="outline-container-copy-2-tmp-catalog" class="outline-3">
<h3 id="copy-2-tmp-catalog">Custom function to copy files in temporary catalog</h3>
<div class="outline-text-3" id="text-copy-2-tmp-catalog">
<p>
First, I need to get a list of org-files with blogposts from <code>articles/</code>
catalog. This list can be returned with the
<code>directory-files-recursively</code><sup><a id="fnr.directory-files-recursively" class="footref" href="#fn.directory-files-recursively" role="doc-backlink">9</a></sup> function:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(directory-files-recursively org-jekyll-paths-articles-path <span style="color: #2aa198;">"\\.org$"</span> nil nil nil)

(<span style="color: #2aa198;">"~/rsync/blog/articles/cycling/2020-05-17-thanks-for-living/article-ru.org"</span>
 <span style="color: #2aa198;">"~/rsync/blog/articles/cycling/2021-04-08-vk-cyclist-types/article-ru.org"</span>
 <span style="color: #2aa198;">"~/rsync/blog/articles/cycling/2021-04-12-balticstar-north-open-2021/article-ru.org"</span>
 <span style="color: #2aa198;">"~/rsync/blog/articles/cycling/2021-05-17-insled-open/article-ru.org"</span>
 <span style="color: #2aa198;">"~/rsync/blog/articles/cycling/draft-osmand-howto/article-ru.org"</span>
 <span style="color: #2aa198;">"~/rsync/blog/articles/cycling/draft-qmapshack-howto/article-ru.org"</span>
 ...
 <span style="color: #2aa198;">"~/rsync/blog/articles/_post_template.org"</span>)
</pre>
</div>

<p>
But there are a lot of unnecessary files in the result of this function —
drafts, hidden posts and template. It can be filtered using
<code>seq-filter</code><sup><a id="fnr.seq-filter" class="footref" href="#fn.seq-filter" role="doc-backlink">10</a></sup> function:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(seq-filter (<span style="color: #859900; font-weight: bold;">lambda</span> (path)
              (<span style="color: #859900; font-weight: bold;">and</span>
               (not (string-match org-jekyll-exclude-regex path))
               (not (string-match <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">draft-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">hidden-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">"</span> path))))
            (directory-files-recursively org-jekyll-paths-articles-path <span style="color: #2aa198;">"\\.org$"</span> nil nil nil))
</pre>
</div>

<p>
This function removes items from the list (second parameter) that do not match
the predicate (first parameter) check(s). The predicate — is just a lambda
function that checks whether the path is not a draft/hidden file or a template
file.
</p>

<p>
The <code>org-jekyll-exclude-regex</code> variable — is just a regular expression to throw
away inappropriate paths:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defcustom</span> <span style="color: #268bd2;">org-jekyll-exclude-regex</span>
  <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">_post_template\\.org</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">\\.project</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">"</span>
  <span style="color: #2aa198;">"Regex to exclude unwanted files."</span>
  <span style="color: #657b83; font-weight: bold;">:type</span> 'regexp
  <span style="color: #657b83; font-weight: bold;">:group</span> 'org-jekyll)
</pre>
</div>

<p>
Now we have <i>a right</i> list of paths and should pass each element of it to copy
files function. This can be achieved with the <code>mapc</code><sup><a id="fnr.mapc" class="footref" href="#fn.mapc" role="doc-backlink">11</a></sup> function, which
applies the lambda function from the first argument to each element of the
list that is passed as the seccond argument:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (article)
        (
         <span style="color: #93a1a1;">;; </span><span style="color: #93a1a1;">copy file in `</span><span style="color: #268bd2; font-weight: bold;">article</span><span style="color: #93a1a1;">' path here</span>
         )
        (seq-filter (<span style="color: #859900; font-weight: bold;">lambda</span> (path)
              (<span style="color: #859900; font-weight: bold;">and</span>
               (not (string-match org-jekyll-exclude-regex path))
               (not (string-match <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">draft-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">hidden-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">"</span> path))))
                    (directory-files-recursively org-jekyll-paths-articles-path <span style="color: #2aa198;">"\\.org$"</span> nil nil nil))
</pre>
</div>

<p>
I use path elements from <code>article</code> variable: date, URL and language
code<sup><a id="fnr.lang_code" class="footref" href="#fn.lang_code" role="doc-backlink">12</a></sup> — to create an unique filename for intermediate file. To
cut necessary chunks from string with path, the regexes with capturing groups
are used. For this purpose there are functions <code>string-match</code> and
<code>match-string</code><sup><a id="fnr.regex-search" class="footref" href="#fn.regex-search" role="doc-backlink">13</a></sup> in Emacs Lisp:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(string-match
 (concat org-jekyll-paths-articles-path
         <span style="color: #2aa198;">"/</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">\\w+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">/</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">[0-9-]+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">[[:alnum:]-]+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">/article-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">[[:lower:]]\\{</span><span style="color: #268bd2;">2\\</span><span style="color: #2aa198;">}</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">\\.org$"</span>)
 <span style="color: #2aa198;">"~/rsync/blog/articles/photo/2024-09-01-summer-photos-2024/article-en.org"</span>)
0 (#o0, #x0, ?\C-@)

(match-string 1 <span style="color: #2aa198;">"~/rsync/blog/articles/photo/2024-09-01-summer-photos-2024/article-en.org"</span>)
<span style="color: #2aa198;">"photo"</span>

(match-string 2 <span style="color: #2aa198;">"~/rsync/blog/articles/photo/2024-09-01-summer-photos-2024/article-en.org"</span>)
<span style="color: #2aa198;">"2024-09-01"</span>

(match-string 3 <span style="color: #2aa198;">"~/rsync/blog/articles/photo/2024-09-01-summer-photos-2024/article-en.org"</span>)
<span style="color: #2aa198;">"summer-photos-2024"</span>

(match-string 4 <span style="color: #2aa198;">"~/rsync/blog/articles/photo/2024-09-01-summer-photos-2024/article-en.org"</span>)
<span style="color: #2aa198;">"en"</span>
</pre>
</div>

<p>
Inside the lambda-function's code I wrap it all in <code>let*</code><sup><a id="fnr.let-star" class="footref" href="#fn.let-star" role="doc-backlink">14</a></sup> for
simplicity:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">lambda</span> (article)
          (<span style="color: #859900; font-weight: bold;">progn</span>
            (string-match
             (concat org-jekyll-paths-articles-path
                     <span style="color: #2aa198;">"/</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">\\w+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">/</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">[0-9-]+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">[[:alnum:]-]+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">/article-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">[[:lower:]]\\{</span><span style="color: #268bd2;">2\\</span><span style="color: #2aa198;">}</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">\\.org$"</span>)
             article)
            (<span style="color: #859900; font-weight: bold;">let*</span>
                ((article-category (match-string 1 article))
                 (article-date (match-string 2 article))
                 (article-slug (match-string 3 article))
                 (article-lang (match-string 4 article)))
              (
                                        <span style="color: #93a1a1;">;</span><span style="color: #93a1a1;">copy-file-here</span>
               )))
</pre>
</div>

<p>
For convenience I'll add two more variables:
</p>
<ol class="org-ol">
<li><p>
Variable with intermediate catalog name: path to <code>_articles/</code> +
<code>article-lang</code>. Path to <code>_articles/</code> is accessible from <code>"org-jekyll-org"</code>
project settings — list with these settings is passed as single parameter
to <code>org-jekyll--prepare-articles</code> function. By the name of parameter
(<code>:base-directory</code>) the necessary value can be taken<sup><a id="fnr.plist-get" class="footref" href="#fn.plist-get" role="doc-backlink">15</a></sup>:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(article-new-catalog (concat
                      (plist-get property-list '<span style="color: #657b83; font-weight: bold;">:base-directory</span>)
                      <span style="color: #2aa198;">"/"</span>
                      article-lang))
</pre>
</div></li>
<li><p>
Variable with unique path to file containing blogpost in intermediate
catalog:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(article-processed (concat article-new-catalog <span style="color: #2aa198;">"/"</span> article-date <span style="color: #2aa198;">"-"</span> article-slug <span style="color: #2aa198;">".org"</span>))
</pre>
</div></li>
</ol>

<p>
For example, if the <code>article</code> is equals to
<code>~/rsync/blog/articles/photo/2024-09-01-summer-photos-2024/article-en.org</code>, then
at the end of execution the <code>article-processed</code> variable is equal to:
<code>~/rsync/blog/_articles/en/2024-09-01-summer-photos-2024.org</code>.
</p>

<p>
Creating the new temporary catalog (if it does not already exists) and copying
the files can be done with the next two functions inside the <code>let*</code> body:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(make-directory article-new-catalog t)
(copy-file article article-processed t t t t)
</pre>
</div>

<p>
The resulting code of <code>org-jekyll--prepare-articles</code> function:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll--prepare-articles</span> (property-list)
  <span style="color: #2aa198;">"Copy articles to `</span><span style="color: #268bd2; font-weight: bold;">_articles/</span><span style="color: #2aa198;">' catalog before publishing. Rename</span>
<span style="color: #2aa198;">article file from `</span><span style="color: #268bd2; font-weight: bold;">article-LANG.org</span><span style="color: #2aa198;">' to</span>
<span style="color: #2aa198;">`</span><span style="color: #268bd2; font-weight: bold;">YYYY-MM-DD-short-url.org</span><span style="color: #2aa198;">'.</span>

<span style="color: #2aa198;">PROPERTY-LIST is a list of properties from</span>
<span style="color: #2aa198;">`</span><span style="color: #268bd2; font-weight: bold;">org-publish-project-alist</span><span style="color: #2aa198;">'."</span>
  (mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (article)
          (<span style="color: #859900; font-weight: bold;">progn</span>
            (string-match
             (concat org-jekyll-paths-articles-path
                     <span style="color: #2aa198;">"/</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">\\w+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">/</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">[0-9-]+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">[[:alnum:]-]+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">/article-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">[[:lower:]]\\{</span><span style="color: #268bd2;">2\\</span><span style="color: #2aa198;">}</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">\\.org$"</span>)
             article)
            (<span style="color: #859900; font-weight: bold;">let*</span>
                ((article-category (match-string 1 article))
                 (article-date (match-string 2 article))
                 (article-slug (match-string 3 article))
                 (article-lang (match-string 4 article))
                 (article-new-catalog (concat
                                       (plist-get property-list '<span style="color: #657b83; font-weight: bold;">:base-directory</span>)
                                       <span style="color: #2aa198;">"/"</span>
                                       article-lang))
                 (article-processed (concat article-new-catalog <span style="color: #2aa198;">"/"</span> article-date <span style="color: #2aa198;">"-"</span> article-slug <span style="color: #2aa198;">".org"</span>)))
              (make-directory article-new-catalog t)
              (copy-file article article-processed t t t t))))
        (seq-filter (<span style="color: #859900; font-weight: bold;">lambda</span> (path)
                      (<span style="color: #859900; font-weight: bold;">and</span>
                       (not (string-match org-jekyll-exclude-regex path))
                       (not (string-match <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">draft-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">hidden-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">"</span> path))))
                    (directory-files-recursively org-jekyll-paths-articles-path <span style="color: #2aa198;">"\\.org$"</span> nil nil nil))))
</pre>
</div>

<p>
This function works good in tandem with <code>org-publish-project</code>. But &#x2026; there are
broken links to images in the resulting HTML file. This happens, because in
the source file there are relative paths to images — relative to the
subdirectory containing the blogpost files. And these paths are passed
unchanged to HTML.
</p>

<p>
But in Jekyll these static files exist in <code>/assets/static</code> catalog. Solution is
simple — change paths inside copied temporary file after <code>copy-file</code> call. I
wrote a new function for this:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll--prepare-article</span> (article)
  <span style="color: #2aa198;">"Prepare article's text for Jekyll.</span>

<span style="color: #2aa198;">Modify OrgMode file before publish it. ARTICLE is a path to</span>
<span style="color: #2aa198;">OrgMode file with article. Files, stored in `</span><span style="color: #268bd2; font-weight: bold;">_articles/</span><span style="color: #2aa198;">' will be</span>
<span style="color: #2aa198;">modified, not original articles from `</span><span style="color: #268bd2; font-weight: bold;">org-jekyll-paths-articles-path</span><span style="color: #2aa198;">'</span>
<span style="color: #2aa198;">path.</span>

<span style="color: #2aa198;">ARTICLE is a path to intermediate org-file with article text"</span>
  (<span style="color: #859900; font-weight: bold;">with-temp-buffer</span>
    (insert-file-contents article)
    (goto-char (point-min))
    (<span style="color: #859900; font-weight: bold;">while</span> (search-forward <span style="color: #2aa198;">"[&#8206;file:"</span> nil t)
      (replace-match <span style="color: #2aa198;">"[&#8207;/assets/static/"</span> t t))
    (write-file article)))
</pre>
</div>

<p>
This function simply takes the org file with the path from the <code>article</code>
variable and replaces links like <code>[f‎ile:somefile.ext]</code> with
<code>[f‎ile://assets/static/somefile.ext]</code>.
</p>
</div>
</div>
<div id="outline-container-html-file-editing" class="outline-3">
<h3 id="html-file-editing">HTML files patching</h3>
<div class="outline-text-3" id="text-html-file-editing">
<p>
Unfortunately, <code>org-publish-project</code> inserts things into the HTML files that I
don't want to see:
</p>
<ul class="org-ul">
<li>Randomly generated IDs in HTML tags</li>
<li>Image numbering.</li>
<li>Tag <code>:TOC_2_blog:</code> after «TOC» heading. This tag is needed in the OrgMode file
to automatically generate the TOC with <a href="https://github.com/snosov1/toc-org/">toc-org</a><sup><a id="fnr.toc-org" class="footref" href="#fn.toc-org" role="doc-backlink">16</a></sup>.</li>
<li>Extra heading for annotations not in post language.</li>
</ul>

<p>
Solution is simple — we need one another function to delete all unnecessary
stuff from HTML files with regular expressions. We can specify such function
in settings of <code>org-publish-project</code> to call it right after export to HTML is
completed (see parameter <code>:completion-function</code>).
</p>

<p>
The function itself is quite simple. First, we get the path to the catalog
containing the exported HTML files from <code>org-publish-project</code> settings. Next, we
get a list of paths to HTML files, which we pass to the lambda function:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll--complete-articles</span> (property-list)
  <span style="color: #2aa198;">"Change published html-files via regular expressions.</span>

<span style="color: #2aa198;">Fix links to attached files. Remove \"Footnotes:\" section from</span>
<span style="color: #2aa198;">generated file. Remove autogenerated Org ids from html tags.</span>

<span style="color: #2aa198;">PROPERTY-LIST is a list of properties from</span>
<span style="color: #2aa198;">`</span><span style="color: #268bd2; font-weight: bold;">org-publish-project-alist</span><span style="color: #2aa198;">'."</span>
  (<span style="color: #859900; font-weight: bold;">let*</span>
      ((publishing-directory (plist-get property-list '<span style="color: #657b83; font-weight: bold;">:publishing-directory</span>)))
    (mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (html)
            <span style="color: #93a1a1;">; </span><span style="color: #93a1a1;">process `</span><span style="color: #268bd2; font-weight: bold;">html</span><span style="color: #93a1a1;">' file</span>
            )
          (directory-files-recursively publishing-directory <span style="color: #2aa198;">"\\.html$"</span> nil nil nil))))
</pre>
</div>

<p>
Inside this lambda function there is a <code>mapc</code> call what works with regular
expression list:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (x)
        (<span style="color: #859900; font-weight: bold;">progn</span>
          (goto-char (point-min))
          (<span style="color: #859900; font-weight: bold;">while</span> (re-search-forward (car x) nil t)
            (replace-match (cdr x) t nil))))
      '((<span style="color: #2aa198;">"/"</span> . <span style="color: #2aa198;">"/"</span>)
        (<span style="color: #2aa198;">"&lt;p&gt;&lt;span class=\"figure-number\"&gt;[[:alnum:] :]+&lt;/span&gt;</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">.+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">&lt;/p&gt;"</span> . <span style="color: #2aa198;">"&lt;p style=\"text-align: center\"&gt;&lt;i&gt;\\1&lt;/i&gt;&lt;/p&gt;"</span>)
        (<span style="color: #2aa198;">"&lt;h2 class=\"footnotes\"&gt;Footnotes: &lt;/h2&gt;"</span> . <span style="color: #2aa198;">""</span>)
        (<span style="color: #2aa198;">" id=\"org[[:xdigit:]]\\{</span><span style="color: #268bd2;">7\\</span><span style="color: #2aa198;">}\""</span> . <span style="color: #2aa198;">""</span>)
        (<span style="color: #2aa198;">" id=\"outline-container-org[[:xdigit:]]\\{</span><span style="color: #268bd2;">7\\</span><span style="color: #2aa198;">}\""</span> . <span style="color: #2aa198;">""</span>)
        (<span style="color: #2aa198;">" id=\"text-org[[:xdigit:]]\\{</span><span style="color: #268bd2;">7\\</span><span style="color: #2aa198;">}\""</span> . <span style="color: #2aa198;">""</span>)
        (<span style="color: #2aa198;">"&lt;span class=\"TOC_2_blog\"&gt;TOC_2_blog&lt;/span&gt;"</span> . <span style="color: #2aa198;">""</span>)))
</pre>
</div>

<p>
Here, each element of list is just another list of two elements. First element
is a regular expression to search for text to replace. Second element is some
replacement text. We retrieve these elements using <code>(car x)</code> and <code>(cdr x)</code>. The
text replacement is done using the standard Emacs Lisp functions for working
with regular expressions.
</p>

<p>
Resulting code of <code>org-jekyll--complete-articles</code>:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll--complete-articles</span> (property-list)
  <span style="color: #2aa198;">"Change published html-files via regular expressions.</span>

<span style="color: #2aa198;">Fix links to attached files. Remove \"Footnotes:\" section from</span>
<span style="color: #2aa198;">generated file. Remove autogenerated Org ids from html tags.</span>

<span style="color: #2aa198;">PROPERTY-LIST is a list of properties from</span>
<span style="color: #2aa198;">`</span><span style="color: #268bd2; font-weight: bold;">org-publish-project-alist</span><span style="color: #2aa198;">'."</span>
  (<span style="color: #859900; font-weight: bold;">let*</span>
      ((publishing-directory (plist-get property-list '<span style="color: #657b83; font-weight: bold;">:publishing-directory</span>)))
    (mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (html)
            (<span style="color: #859900; font-weight: bold;">with-temp-buffer</span>
              (insert-file-contents html)
              (mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (x)
                      (<span style="color: #859900; font-weight: bold;">progn</span>
                        (goto-char (point-min))
                        (<span style="color: #859900; font-weight: bold;">while</span> (re-search-forward (car x) nil t)
                          (replace-match (cdr x) t nil))))
                    '((<span style="color: #2aa198;">"/"</span> . <span style="color: #2aa198;">"/"</span>)
                      (<span style="color: #2aa198;">"&lt;p&gt;&lt;span class=\"figure-number\"&gt;[[:alnum:] :]+&lt;/span&gt;</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">.+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">&lt;/p&gt;"</span> . <span style="color: #2aa198;">"&lt;p style=\"text-align: center\"&gt;&lt;i&gt;\\1&lt;/i&gt;&lt;/p&gt;"</span>)
                      (<span style="color: #2aa198;">"&lt;h2 class=\"footnotes\"&gt;Footnotes: &lt;/h2&gt;"</span> . <span style="color: #2aa198;">""</span>)
                      (<span style="color: #2aa198;">" id=\"org[[:xdigit:]]\\{</span><span style="color: #268bd2;">7\\</span><span style="color: #2aa198;">}\""</span> . <span style="color: #2aa198;">""</span>)
                      (<span style="color: #2aa198;">" id=\"outline-container-org[[:xdigit:]]\\{</span><span style="color: #268bd2;">7\\</span><span style="color: #2aa198;">}\""</span> . <span style="color: #2aa198;">""</span>)
                      (<span style="color: #2aa198;">" id=\"text-org[[:xdigit:]]\\{</span><span style="color: #268bd2;">7\\</span><span style="color: #2aa198;">}\""</span> . <span style="color: #2aa198;">""</span>)
                      (<span style="color: #2aa198;">"&lt;span class=\"TOC_2_blog\"&gt;TOC_2_blog&lt;/span&gt;"</span> . <span style="color: #2aa198;">""</span>)))
              (write-file html)))
          (directory-files-recursively publishing-directory <span style="color: #2aa198;">"\\.html$"</span> nil nil nil))))
</pre>
</div>
</div>
</div>
<div id="outline-container-static-files-export" class="outline-3">
<h3 id="static-files-export">Static files export</h3>
<div class="outline-text-3" id="text-static-files-export">
<p>
Obviously HTML files are not enough for a blog. Images and other attachments
are necessary too.
</p>

<p>
These files can also be copied with <code>org-publish-project</code> call. And the settings
are much easier in this case:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">let</span> ((org-publish-project-alist `((<span style="color: #2aa198;">"org-jekyll-static"</span>
                                    <span style="color: #657b83; font-weight: bold;">:base-directory</span> ,(concat org-jekyll-paths-base-path <span style="color: #2aa198;">"/_static"</span>)
                                    <span style="color: #657b83; font-weight: bold;">:base-extension</span> <span style="color: #2aa198;">"jpg</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">JPG</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">jpeg</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">png</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">gif</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">webm</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">webp</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">gpx</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">tar.bz2</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">uxf"</span>
                                    <span style="color: #657b83; font-weight: bold;">:publishing-directory</span> ,(concat org-jekyll-paths-base-path <span style="color: #2aa198;">"/assets/static"</span>)
                                    <span style="color: #657b83; font-weight: bold;">:publishing-function</span> org-publish-attachment
                                    <span style="color: #657b83; font-weight: bold;">:preparation-function</span> org-jekyll--prepare-static
                                    <span style="color: #657b83; font-weight: bold;">:exclude</span> ,org-jekyll-exclude-regex
                                    <span style="color: #657b83; font-weight: bold;">:recursive</span> t)))))
</pre>
</div>

<p>
Here, the <code>:base-extension</code> parameter specifies extensions for exporting static
files.
</p>

<p>
Exporting HTML files and exporting static files can be combined under one
"project", to execute both tasks with one function call:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">let</span> ((org-publish-project-alist `((<span style="color: #2aa198;">"org-jekyll-org"</span>
                                    ...)
                                   (<span style="color: #2aa198;">"org-jekyll-static"</span>
                                    ...)
                                   (<span style="color: #2aa198;">"org-jekyll"</span> <span style="color: #657b83; font-weight: bold;">:components</span> (<span style="color: #2aa198;">"org-jekyll-org"</span> <span style="color: #2aa198;">"org-jekyll-static"</span>)))))
  (org-publish-project <span style="color: #2aa198;">"org-jekyll"</span> t nil))
</pre>
</div>


<p>
As you can see, we use another <code>:preparation-function</code> when copying static
files — <code>org-jekyll--prepare-static</code>. This function works the same as
<code>org-jekyll--prepare-articles</code> — it just copies static files from different
subdirectories to a temporary directory for the <code>org-jekyll-project</code> function.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll--prepare-static</span> (property-list)
  <span style="color: #2aa198;">"Copy static files to `</span><span style="color: #268bd2; font-weight: bold;">/_static</span><span style="color: #2aa198;">' directory.</span>

<span style="color: #2aa198;">PROPERTY-LIST is a list of properties from</span>
<span style="color: #2aa198;">`</span><span style="color: #268bd2; font-weight: bold;">org-publish-project-alist</span><span style="color: #2aa198;">'."</span>
  (<span style="color: #859900; font-weight: bold;">let</span>
      ((static-directory (plist-get property-list `<span style="color: #657b83; font-weight: bold;">:base-directory</span>)))
    (make-directory static-directory t)
    (mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (filename)
            (<span style="color: #859900; font-weight: bold;">progn</span>
              (string-match (concat org-jekyll-paths-articles-path <span style="color: #2aa198;">"/[[:alnum:]-/]+/</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">[[:alnum:][:blank:]-_.]+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">$"</span>) filename)
              (<span style="color: #859900; font-weight: bold;">let</span>
                  ((static-filename (match-string 1 filename)))
                (copy-file filename (concat static-directory <span style="color: #2aa198;">"/"</span> static-filename) t t t t))))
          (seq-filter (<span style="color: #859900; font-weight: bold;">lambda</span> (path)
                        (not (string-match
                              (concat org-jekyll-exclude-regex <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">article-[[:lower:]]+\\.org</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">"</span>)
                              path)))
                      (directory-files-recursively org-jekyll-paths-articles-path <span style="color: #2aa198;">"."</span> nil nil nil)))))
</pre>
</div>
</div>
</div>
<div id="outline-container-jekyll-build-from-emacs" class="outline-3">
<h3 id="jekyll-build-from-emacs">Call Jekyll from Emacs</h3>
<div class="outline-text-3" id="text-jekyll-build-from-emacs">
<p>
After we have prepared all necessary HTML and static files — we should call
Jekyll to build our static blog inside <code>_site/</code> catalog. Usually, the console
command <code>bundle exec jekyll build</code> is used for this.
</p>

<p>
In <a href="https://mastodon.social/@fabrik42">Christian Dewein's</a> article, the <a href="https://github.com/rejeep/prodigy.el">Prodigy</a> plugin is used to call this console
command. I decided that this is too complicated and just execute a new process
using the <code>make-process</code><sup><a id="fnr.make-process" class="footref" href="#fn.make-process" role="doc-backlink">17</a></sup> function:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(make-process
 <span style="color: #657b83; font-weight: bold;">:name</span> <span style="color: #2aa198;">"jekyll-build"</span>
 <span style="color: #657b83; font-weight: bold;">:buffer</span> <span style="color: #2aa198;">"jekyll-build"</span>
 <span style="color: #657b83; font-weight: bold;">:command</span> '(<span style="color: #2aa198;">"bundle"</span> <span style="color: #2aa198;">"exec"</span> <span style="color: #2aa198;">"jekyll"</span> <span style="color: #2aa198;">"build"</span>)
 <span style="color: #657b83; font-weight: bold;">:delete-exited-processes</span> t
 <span style="color: #657b83; font-weight: bold;">:sentinel</span> (<span style="color: #859900; font-weight: bold;">lambda</span> (process state)
             (<span style="color: #859900; font-weight: bold;">cond</span>
              ((<span style="color: #859900; font-weight: bold;">and</span> (eq (process-status process) 'exit)
                    (zerop (process-exit-status process)))
               (message <span style="color: #2aa198;">"%s"</span> (propertize <span style="color: #2aa198;">"Blog built"</span> 'face '(<span style="color: #657b83; font-weight: bold;">:foreground</span> <span style="color: #2aa198;">"blue"</span>))))
              ((eq (process-status process) 'run)
               (accept-process-output process))
              (t (<span style="color: #cb4b16; font-weight: bold;">error</span> (concat <span style="color: #2aa198;">"Jekyll Build: "</span> state))))))
</pre>
</div>

<p>
In this code, console command output is processed inside a lambda function,
which either prints message about successful execution or prints an error to
the user. User messages are printed to a minibuffer using the
<code>message</code><sup><a id="fnr.message" class="footref" href="#fn.message" role="doc-backlink">18</a></sup> function, with text colored blue (coloring is done using
<code>propertize</code><sup><a id="fnr.propertize" class="footref" href="#fn.propertize" role="doc-backlink">19</a></sup>):
</p>


<div class="figure">
<p><img src="/assets/static/message.png" alt="message function output" align="center" />
</p>
</div>

<p>
The output of the executed process is sent to the <code>jekyll-build</code> buffer. This
buffer is used to watch the build log, if necessary.
</p>

<p>
File export and <code>bundle exec</code> execution are combined in <code>org-jekyll--suffix-build</code>
function. This allows to build the static blog with single call of function.
</p>

<p>
Since the current directory for buffer with opened blog post is not an
<code>org-jekyll-path-base-path</code>, we should change directory before execute the build
process. After the build is finished, we should change the directory back to
continue editing the post.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll--suffix-build</span> ()
  <span style="color: #2aa198;">"Build the blog."</span>
  (<span style="color: #859900; font-weight: bold;">interactive</span>)
  (cd (expand-file-name org-jekyll-paths-base-path))
  (<span style="color: #859900; font-weight: bold;">let</span> ((org-publish-project-alist `((<span style="color: #2aa198;">"org-jekyll-org"</span>
                                      ...)
                                     (<span style="color: #2aa198;">"org-jekyll-static"</span>
                                      ...)
                                     (<span style="color: #2aa198;">"org-jekyll"</span> <span style="color: #657b83; font-weight: bold;">:components</span> (<span style="color: #2aa198;">"org-jekyll-org"</span> <span style="color: #2aa198;">"org-jekyll-static"</span>))))
        (current-path (file-name-directory buffer-file-name)))
    (cd (expand-file-name org-jekyll-paths-base-path))
    (org-publish-project <span style="color: #2aa198;">"org-jekyll"</span> t nil))
  (make-process
   <span style="color: #657b83; font-weight: bold;">:name</span> <span style="color: #2aa198;">"jekyll-build"</span>
   <span style="color: #657b83; font-weight: bold;">:buffer</span> <span style="color: #2aa198;">"jekyll-build"</span>
   <span style="color: #657b83; font-weight: bold;">:command</span> '(<span style="color: #2aa198;">"bundle"</span> <span style="color: #2aa198;">"exec"</span> <span style="color: #2aa198;">"jekyll"</span> <span style="color: #2aa198;">"build"</span>)
   <span style="color: #657b83; font-weight: bold;">:delete-exited-processes</span> t
   <span style="color: #657b83; font-weight: bold;">:sentinel</span> (<span style="color: #859900; font-weight: bold;">lambda</span> (process state)
               ...))
  (cd current-path))
</pre>
</div>
</div>
</div>
<div id="outline-container-create-new-post" class="outline-3">
<h3 id="create-new-post">New blogpost creation</h3>
<div class="outline-text-3" id="text-create-new-post">
<p>
I wanted to have a special function to semi-automatically create new post. I
don't want to create a new subdirectory for the post in the appropriate
directory, copy Jekyll's frontmatter, image for the post banner, etc. It will
be very useful if Emacs asks me all the necessary questions and creates all
the necessary directories and files itself.
</p>

<p>
There are a lot of functions to work with user input in Emacs. But it is
enough for me to use the four simple functions:
</p>
<ul class="org-ul">
<li><code>read-string</code>: prompts the user in a minibuffer and returns the string,
entered by the user.</li>
<li><code>completing-read</code>: prints menu to minibuffer and returns user's choice.</li>
<li><code>y-or-n-p</code>: prompts user in minibuffer and waits for user's "Yes" or "No"
answer. Returns <code>t</code> or <code>nil</code>.</li>
<li><code>read-file-name</code>: outputs a file selection menu and returns the path to the
selected file.</li>
</ul>

<p>
Quickly enough, I sketched out the following S-expressions, which ask
everything necessary and store the results in separate variables:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">let*</span> ((category (completing-read <span style="color: #2aa198;">"Enter category: "</span>
                                  (seq-filter
                                   (<span style="color: #859900; font-weight: bold;">lambda</span> (category) (string-match <span style="color: #2aa198;">"^[[:lower:]]+$"</span> category))
                                   (directory-files org-jekyll-paths-articles-path nil
                                                    directory-files-no-dot-files-regexp
                                                    nil nil))
                                  nil t))
       (name (read-string <span style="color: #2aa198;">"Enter title: "</span>))
       (summary (read-string <span style="color: #2aa198;">"Enter summary: "</span>))
       (tags (read-string <span style="color: #2aa198;">"Enter tags (space separated): "</span>))
       (permalink (read-string <span style="color: #2aa198;">"Enter permalink: "</span>))
       (language (completing-read <span style="color: #2aa198;">"Enter post language: "</span> org-jekyll-languages nil t))
       (use-banner (y-or-n-p <span style="color: #2aa198;">"Use banner?"</span>))
       (banner (<span style="color: #859900; font-weight: bold;">if</span> use-banner
                   (read-file-name <span style="color: #2aa198;">"Path to banner image: "</span> nil nil t nil nil)
                 nil))))
</pre>
</div>


<div class="figure">
<p><img src="/assets/static/create_new_post.jpg" alt="new post creation UI" align="center" />
</p>
<p style="text-align: center"><i>New post creation UI</i></p>
</div>

<p>
Within the same <code>let*</code> I compute:
</p>
<ul class="org-ul">
<li><p>
Part of the front matter with Jekyll's banner insertion code:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(additional (concat (<span style="color: #859900; font-weight: bold;">if</span> use-banner
                        (concat <span style="color: #2aa198;">"image: /assets/static/"</span> (file-name-nondirectory banner) <span style="color: #2aa198;">"\n"</span>
                                <span style="color: #2aa198;">"banner:\n"</span>
                                <span style="color: #2aa198;">"  image: /assets/static/"</span> (file-name-nondirectory banner) <span style="color: #2aa198;">"\n"</span>
                                <span style="color: #2aa198;">"  opacity: 0.6\n"</span>)
                      <span style="color: #2aa198;">""</span>)
                    (concat <span style="color: #2aa198;">"summary: "</span> summary <span style="color: #2aa198;">"\n"</span>)
                    (concat <span style="color: #2aa198;">"tags: "</span> tags)))
</pre>
</div></li>
<li><p>
Path to new post:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(dirname (concat path <span style="color: #2aa198;">"/"</span> category <span style="color: #2aa198;">"/"</span> date <span style="color: #2aa198;">"-"</span> permalink))
</pre>
</div></li>
<li><p>
Post's filename — concatenate <code>article</code> with entered language code:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(filename (concat dirname <span style="color: #2aa198;">"/"</span> <span style="color: #2aa198;">"article-"</span> language <span style="color: #2aa198;">".org"</span>))
</pre>
</div></li>
</ul>

<p>
After evaluating all variables, there are inside <code>let*</code> body:
</p>
<ol class="org-ol">
<li><p>
Create subdirectory with files for new post:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(make-directory dirname t)
</pre>
</div></li>
<li><p>
If we chose to use banner image for post, then copy appropriate image to
previously created directory:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">if</span> use-banner
    (copy-file banner (concat dirname <span style="color: #2aa198;">"/"</span> (file-name-nondirectory banner))))
</pre>
</div></li>
<li><p>
Replace template placeholders in <code>org-jekyll-paths-template-path</code> path and
save new file with <code>filename</code> name: 
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">with-temp-buffer</span>
  (insert-file-contents template)
  (mapc
   (<span style="color: #859900; font-weight: bold;">lambda</span> (x) (<span style="color: #859900; font-weight: bold;">progn</span>
                 (goto-char (point-min))
                 (<span style="color: #859900; font-weight: bold;">while</span> (search-forward (car x) nil t)
                   (replace-match (cdr x) t t))))
   `((<span style="color: #2aa198;">"{%NAME%}"</span> . ,name)
     (<span style="color: #2aa198;">"{%CATEGORY%}"</span> . ,category)
     (<span style="color: #2aa198;">"{%DATE%}"</span> . ,date)
     (<span style="color: #2aa198;">"{%LANG%}"</span> . ,language)
     (<span style="color: #2aa198;">"{%ADDITIONAL%}"</span> . ,additional)))
  (write-file filename))
</pre>
</div>
<p>

</p></li>
<li><p>
Previously created file is opened in current buffer and cursor is moved to
the end of file:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">with-current-buffer</span> (find-file filename)
  (goto-char (point-max)))
</pre>
</div></li>
</ol>

<p>
Path to template stored in <code>org-jekyll-paths-template-path</code> variable (copied to
<code>template</code> variable inside <code>let*</code> for convenience):
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defcustom</span> <span style="color: #268bd2;">org-jekyll-paths-template-path</span>
  (concat org-jekyll-paths-articles-path <span style="color: #2aa198;">"/_post_template.org"</span>)
  <span style="color: #2aa198;">"Path to post template."</span>
  <span style="color: #657b83; font-weight: bold;">:type</span> '(file <span style="color: #657b83; font-weight: bold;">:must-match</span> t)
  <span style="color: #657b83; font-weight: bold;">:group</span> 'org-jekyll-paths)
</pre>
</div>

<p>
In my settings this variable is <code>~/rsync/blog/articles/_post_template.org</code>. The
file itself looks like this:
</p>

<p>

</p>
<pre class="example">
#+BEGIN_EXPORT html
---
layout: post
title: {%NAME%}
category: {%CATEGORY%}
date: {%DATE%}
lang: {%LANG%}
comments: false
hidden:
  - related_posts
{%ADDITIONAL%}
---
#+END_EXPORT


</pre>
<p>

</p>

<p>
As you can see, there is only a Jekyll's front matter and nothing else.
</p>
</div>
</div>
<div id="outline-container-jekyll-local-server" class="outline-3">
<h3 id="jekyll-local-server">Local server start</h3>
<div class="outline-text-3" id="text-jekyll-local-server">
<p>
For new, blog building and new post creation via Emacs Lisp is ready. Among
the most frequently used actions, I still have the local server startup and
the Jekyll's working directory cleanup.
</p>

<p>
Starting the local server is easy — just call the <code>make-process</code> with the
necessary arguments:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(make-process
 <span style="color: #657b83; font-weight: bold;">:name</span> <span style="color: #2aa198;">"jekyll-serve"</span>
 <span style="color: #657b83; font-weight: bold;">:buffer</span> <span style="color: #2aa198;">"jekyll-serve"</span>
 <span style="color: #657b83; font-weight: bold;">:command</span> '(<span style="color: #2aa198;">"bundle"</span> <span style="color: #2aa198;">"exec"</span> <span style="color: #2aa198;">"jekyll"</span> <span style="color: #2aa198;">"serve"</span>)
 <span style="color: #657b83; font-weight: bold;">:delete-exited-processes</span> t
 <span style="color: #657b83; font-weight: bold;">:filter</span> (<span style="color: #859900; font-weight: bold;">lambda</span> (process text)
           (<span style="color: #859900; font-weight: bold;">if</span> (string-match <span style="color: #2aa198;">".*done in [0-9.]+ seconds.*"</span> text)
               (message <span style="color: #2aa198;">"%s"</span> (propertize <span style="color: #2aa198;">"Blog serve: running"</span> 'face '(<span style="color: #657b83; font-weight: bold;">:foreground</span> <span style="color: #2aa198;">"blue"</span>))))
           (internal-default-process-filter process text))
 <span style="color: #657b83; font-weight: bold;">:sentinel</span> (<span style="color: #859900; font-weight: bold;">lambda</span> (process state)
             (<span style="color: #859900; font-weight: bold;">cond</span>
              ((<span style="color: #859900; font-weight: bold;">and</span> (eq (process-status process) 'exit)
                    (zerop (process-exit-status process)))
               (message <span style="color: #2aa198;">"%s"</span> (propertize <span style="color: #2aa198;">"Blog serve: stopped"</span> 'face '(<span style="color: #657b83; font-weight: bold;">:foreground</span> <span style="color: #2aa198;">"blue"</span>))))
              ((eq (process-status process) 'run)
               (accept-process-output process))
              (t (<span style="color: #cb4b16; font-weight: bold;">error</span> (concat <span style="color: #2aa198;">"Jekyll Serve: "</span> state))))))
</pre>
</div>

<p>
For convenience, I want the one function to start and stop the local
server. The logic to achieve this is simple:
</p>
<ul class="org-ul">
<li>If <code>jekyll-serve</code> process exists, then kill it.</li>
<li>If process doesn't exist — start the server.</li>
</ul>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll--suffix-serve-toggle</span> ()
  <span style="color: #2aa198;">"Serve blog or stop serving the blog."</span>
  (<span style="color: #859900; font-weight: bold;">interactive</span>)
  (<span style="color: #859900; font-weight: bold;">let</span> ((current-path (file-name-directory buffer-file-name)))
    (<span style="color: #859900; font-weight: bold;">if</span> (eq (process-status <span style="color: #2aa198;">"jekyll-serve"</span>) ' run)
        (interrupt-process <span style="color: #2aa198;">"jekyll-serve"</span>)
      (cd (expand-file-name org-jekyll-paths-base-path))
      (make-process ...)
      (cd current-path))))
</pre>
</div>
</div>
</div>
<div id="outline-container-jekyll-clean" class="outline-3">
<h3 id="jekyll-clean">Jekyll's working directory cleanup</h3>
<div class="outline-text-3" id="text-jekyll-clean">
<p>
Cleanup of the working directory is not so simple. For the <code>bundle exec jekyl
clean</code>, a new call to <code>make-process</code> is enough:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(make-process
 <span style="color: #657b83; font-weight: bold;">:name</span> <span style="color: #2aa198;">"jekyll-clean"</span>
 <span style="color: #657b83; font-weight: bold;">:buffer</span> <span style="color: #2aa198;">"jekyll-clean"</span>
 <span style="color: #657b83; font-weight: bold;">:command</span> '(<span style="color: #2aa198;">"bundle"</span> <span style="color: #2aa198;">"exec"</span> <span style="color: #2aa198;">"jekyll"</span> <span style="color: #2aa198;">"clean"</span>)
 <span style="color: #657b83; font-weight: bold;">:delete-exited-processes</span> t
 <span style="color: #657b83; font-weight: bold;">:sentinel</span> (<span style="color: #859900; font-weight: bold;">lambda</span> (process state)
             (<span style="color: #859900; font-weight: bold;">cond</span>
              ((<span style="color: #859900; font-weight: bold;">and</span> (eq (process-status process) 'exit)
                    (zerop (process-exit-status process)))
               (message <span style="color: #2aa198;">"%s"</span> (propertize <span style="color: #2aa198;">"Blog cleaned"</span> 'face '(<span style="color: #657b83; font-weight: bold;">:foreground</span> <span style="color: #2aa198;">"blue"</span>))))
              ((eq (process-status process) 'run)
               (accept-process-output process))
              (t (<span style="color: #cb4b16; font-weight: bold;">error</span> (concat <span style="color: #2aa198;">"Jekyll Clean: "</span> state))))))
</pre>
</div>

<p>
But we also need to clean up the OrgMode export artifacts before the
<code>make-process</code> call. The <code>_articles/</code>, <code>_static/</code> and <code>_post/</code> catalogs should also be
cleaned up. I did this using the next S-expression:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (x)
        (mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (file)
                (delete-file file nil))
              (mapcan (<span style="color: #859900; font-weight: bold;">lambda</span> (directory)
                        (directory-files-recursively (concat org-jekyll-paths-base-path directory) (cdr x) nil nil nil))
                        (car x))))
      `(((<span style="color: #2aa198;">"/_posts/en"</span> <span style="color: #2aa198;">"/_posts/ru"</span>) . <span style="color: #2aa198;">"\\.html$"</span>)
        ((<span style="color: #2aa198;">"/assets/static"</span> <span style="color: #2aa198;">"/_static"</span>) . ,(concat <span style="color: #2aa198;">"\\.png</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.jpg$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.jpeg$"</span>
                                                  <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">"</span>
                                                  <span style="color: #2aa198;">"\\.JPG$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.svg$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.webm$"</span>
                                                  <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">"</span>
                                                  <span style="color: #2aa198;">"\\.webp$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.html$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.tar.bz2$"</span>
                                                  <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">"</span>
                                                  <span style="color: #2aa198;">"\\.org$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.gif$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.gpx$"</span>
                                                  <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">"</span>
                                                  <span style="color: #2aa198;">"\\.uxf$"</span>))
        ((<span style="color: #2aa198;">"/_articles"</span>) . <span style="color: #2aa198;">"\\.org$"</span>)))
</pre>
</div>

<p>
The code may look overly complicated at first glance, but all it does is
iterate through the specified directories and delete files that match with the
specified regular expression.
</p>

<p>
The first lambda function <code>(lambda (x) ...)</code> simply passes each element of the
main list (for example, the first element is: <code>(("/_posts/en" "/_posts/ru")
. "\\.html$")</code>) into the next S-expression:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (file)
        (delete-file file nil))
      (mapcan (<span style="color: #859900; font-weight: bold;">lambda</span> (directory)
                (directory-files-recursively (concat org-jekyll-paths-base-path directory) (cdr x) nil nil nil))
              (car x)))
</pre>
</div>

<p>
This is where things get complicated. The second <code>mapc</code> parameter is not just an
<code>x</code> variable with a list element inside, but one another S-expression. This
expression is evaluated first, and it's result (one another list of files) is
processed with a lambda function that simply deletes the file:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">lambda</span> (file)
  (delete-file file nil))
</pre>
</div>

<p>
<code>mapcan</code><sup><a id="fnr.mapcan" class="footref" href="#fn.mapcan" role="doc-backlink">20</a></sup> S-expression does the following:
</p>
<ol class="org-ol">
<li>Takes the first element of the list containing paths/regexes with <code>(car
   x)</code>. Result will be one another list with paths to directories, for example:
<code>("/_posts/en" "/_posts/ru")</code>.</li>
<li>Inside the lambda function, the <code>directory-files-recursively</code> function is
used to get list of files in the catalog that match the regular
expression. The regex is the last element of the <code>x</code> list and can be accessed
via <code>(cdr x)</code>.</li>
<li><p>
Result looks like this: <code>(("/_posts/en/article1/file.org"
   "/_posts/en/article2/file.org") ("/_posts/ru/article1/file.org"
   "/_posts/ru/article2/file.org"))</code>. If I were using <code>mapc</code>, then lambda
function for file deletion will cause error — because function will receive
list instead of string.
</p>

<p>
For example, the following code prints <code>file</code> variable contents in case of
using <code>mapc</code>:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (file)
        (print file))
      (mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (directory)
              directory)
            '((<span style="color: #2aa198;">"a"</span> <span style="color: #2aa198;">"b"</span>) (<span style="color: #2aa198;">"c"</span> <span style="color: #2aa198;">"d"</span>))))

(<span style="color: #2aa198;">"a"</span> <span style="color: #2aa198;">"b"</span>)
(<span style="color: #2aa198;">"c"</span> <span style="color: #2aa198;">"d"</span>)
</pre>
</div></li>
<li><p>
We need to flatten the list. And <code>mapcan</code> function can just do that. It can
transfrom list from item #3 to: <code>("/_posts/en/article1/file.org"
   "/_posts/en/article2/file.org" "/_posts/ru/article1/file.org"
   "/_posts/ru/article2/file.org")</code>. And returns the result to the upper <code>mapc</code>.
</p>

<p>
For example, there is the content of <code>file</code> variable inside lambda function
when we use <code>mapcan</code>:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (file)
        (print file))
      (mapcan (<span style="color: #859900; font-weight: bold;">lambda</span> (directory)
                directory)
              '((<span style="color: #2aa198;">"a"</span> <span style="color: #2aa198;">"b"</span>) (<span style="color: #2aa198;">"c"</span> <span style="color: #2aa198;">"d"</span>))))

<span style="color: #2aa198;">"a"</span>
<span style="color: #2aa198;">"b"</span>
<span style="color: #2aa198;">"c"</span>
<span style="color: #2aa198;">"d"</span>
</pre>
</div></li>
</ol>

<p>
The resulting code of the function to clean up Jekyll's working directory:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll--suffix-clear</span> ()
  <span style="color: #2aa198;">"Clear blog files."</span>
  (<span style="color: #859900; font-weight: bold;">interactive</span>)
  (<span style="color: #859900; font-weight: bold;">let</span> ((current-path (file-name-directory buffer-file-name)))
    (cd (expand-file-name org-jekyll-paths-base-path))
    (mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (x)
            (mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (file)
                    (delete-file file nil))
                  (mapcan (<span style="color: #859900; font-weight: bold;">lambda</span> (directory)
                            (directory-files-recursively (concat org-jekyll-paths-base-path directory) (cdr x) nil nil nil))
                          (car x))))
          `(((<span style="color: #2aa198;">"/_posts/en"</span> <span style="color: #2aa198;">"/_posts/ru"</span>) . <span style="color: #2aa198;">"\\.html$"</span>)
            ((<span style="color: #2aa198;">"/assets/static"</span> <span style="color: #2aa198;">"/_static"</span>) . ,(concat <span style="color: #2aa198;">"\\.png$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.jpg$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.jpeg$"</span>
                                                      <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">"</span>
                                                      <span style="color: #2aa198;">"\\.JPG$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.svg$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.webm$"</span>
                                                      <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">"</span>
                                                      <span style="color: #2aa198;">"\\.webp$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.html$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.tar.bz2$"</span>
                                                      <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">"</span>
                                                      <span style="color: #2aa198;">"\\.org$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.gif$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.gpx$"</span>
                                                      <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">"</span>
                                                      <span style="color: #2aa198;">"\\.svg$"</span>))
            ((<span style="color: #2aa198;">"/_articles"</span>) . <span style="color: #2aa198;">"\\.org$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.png$"</span>)))
    (make-process
     <span style="color: #657b83; font-weight: bold;">:name</span> <span style="color: #2aa198;">"jekyll-clean"</span>
     <span style="color: #657b83; font-weight: bold;">:buffer</span> <span style="color: #2aa198;">"jekyll-clean"</span>
     <span style="color: #657b83; font-weight: bold;">:command</span> '(<span style="color: #2aa198;">"bundle"</span> <span style="color: #2aa198;">"exec"</span> <span style="color: #2aa198;">"jekyll"</span> <span style="color: #2aa198;">"clean"</span>)
     <span style="color: #657b83; font-weight: bold;">:delete-exited-processes</span> t
     <span style="color: #657b83; font-weight: bold;">:sentinel</span> (<span style="color: #859900; font-weight: bold;">lambda</span> (process state)
                 (<span style="color: #859900; font-weight: bold;">cond</span>
                  ((<span style="color: #859900; font-weight: bold;">and</span> (eq (process-status process) 'exit)
                        (zerop (process-exit-status process)))
                   (message <span style="color: #2aa198;">"%s"</span> (propertize <span style="color: #2aa198;">"Blog cleaned"</span> 'face '(<span style="color: #657b83; font-weight: bold;">:foreground</span> <span style="color: #2aa198;">"blue"</span>))))
                  ((eq (process-status process) 'run)
                   (accept-process-output process))
                  (t (<span style="color: #cb4b16; font-weight: bold;">error</span> (concat <span style="color: #2aa198;">"Jekyll Clean: "</span> state))))))))
</pre>
</div>
</div>
</div>
<div id="outline-container-transient-ui" class="outline-3">
<h3 id="transient-ui">UI (transient)</h3>
<div class="outline-text-3" id="text-transient-ui">
<p>
I wanted to add <i>a comfortable for Emacs users</i> interface to all these set of
functions. Here I didn't reinvent the wheel and just used the <a href="https://jd.codes/posts/transient-emacs/">Transient</a>
library as in <a href="https://mastodon.social/@fabrik42">Christian Dewein's</a> code. The result looks like this:
</p>


<div class="figure">
<p><img src="/assets/static/transient_panel.png" alt="Panel with blog actions" align="center" />
</p>
<p style="text-align: center"><i>UI of org-jekyll plugin</i></p>
</div>

<p>
Some suffixes (functions that a called when the corresponding menu item is
selected) have already been described above. A prefix (code that describes the
panel) looks like this:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #93a1a1;">;; </span><span style="color: #93a1a1;">Transient keys description:</span>

(<span style="color: #859900; font-weight: bold;">transient-define-prefix</span> <span style="color: #268bd2;">org-jekyll-layout-descriptions</span> ()
  <span style="color: #2aa198;">"Transient layout with blog commands."</span>
  [<span style="color: #657b83; font-weight: bold;">:description</span> (<span style="color: #859900; font-weight: bold;">lambda</span> () (concat org-jekyll-url <span style="color: #2aa198;">" control panel"</span> <span style="color: #2aa198;">"\n"</span>))
                [<span style="color: #2aa198;">"Development"</span>
                 (<span style="color: #2aa198;">"b"</span> <span style="color: #2aa198;">"Build blog"</span> org-jekyll--suffix-build)
                 (<span style="color: #2aa198;">"s"</span> org-jekyll--suffix-serve-toggle
                  <span style="color: #657b83; font-weight: bold;">:description</span> (<span style="color: #859900; font-weight: bold;">lambda</span> () (<span style="color: #859900; font-weight: bold;">if</span> (eq (process-status <span style="color: #2aa198;">"jekyll-serve"</span>) 'run)
                                              <span style="color: #2aa198;">"Stop serving local blog"</span>
                                            <span style="color: #2aa198;">"Serve local blog"</span>)))
                 (<span style="color: #2aa198;">"o"</span> <span style="color: #2aa198;">"Open served blog"</span> org-jekyll--suffix-open-blog)
                 (<span style="color: #2aa198;">"O"</span> <span style="color: #2aa198;">"Open blog in Web"</span> org-jekyll--suffix-open-remote-blog)
                 (<span style="color: #2aa198;">"B"</span> <span style="color: #2aa198;">"Open build log"</span> org-jekyll--suffix-open-build-log)
                 (<span style="color: #2aa198;">"l"</span> <span style="color: #2aa198;">"Open serve log"</span> org-jekyll--suffix-open-serve-log)
                 (<span style="color: #2aa198;">"C"</span> <span style="color: #2aa198;">"Clear blog directory"</span> org-jekyll--suffix-clear)]
                [<span style="color: #2aa198;">"Actions"</span>
                 (<span style="color: #2aa198;">"n"</span> <span style="color: #2aa198;">"New blog post"</span> org-jekyll--suffix-create-post)]])

<span style="color: #93a1a1;">;; </span><span style="color: #93a1a1;">Function to call main menu:</span>

(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll-menu</span> ()
  <span style="color: #2aa198;">"Open blog control center."</span>
  (<span style="color: #859900; font-weight: bold;">interactive</span>)
  (org-jekyll-layout-descriptions))
</pre>
</div>

<p>
Functions-suffixes is just a usual functions without parameters, for example:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll--suffix-open-blog</span> ()
  <span style="color: #2aa198;">"Open locally served blog."</span>
  (<span style="color: #859900; font-weight: bold;">interactive</span>)
  (browse-url <span style="color: #2aa198;">"http://127.0.0.1:8000/"</span>))

(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll--suffix-open-remote-blog</span> ()
  <span style="color: #2aa198;">"Open remote blog."</span>
  (<span style="color: #859900; font-weight: bold;">interactive</span>)
  (browse-url org-jekyll-url))

(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll--suffix-create-post</span> ()
  <span style="color: #2aa198;">"Create new blog post."</span>
  (<span style="color: #859900; font-weight: bold;">interactive</span>)
  (cd (expand-file-name org-jekyll-paths-base-path))
  (org-jekyll--create-new-post))
</pre>
</div>

<p>
The start/stop local server menu item includes the code to check the status of
the local server via the check for process <code>"jekyll-serve"</code> status.
</p>

<p>
This panel can be displayed via the <code>org-jekyll-menu</code> function. Going a bit
further — this function is called by a hotkey in my plugin.
</p>
</div>
</div>
<div id="outline-container-emacs-plugin" class="outline-3">
<h3 id="emacs-plugin">Emacs plugin specific code</h3>
<div class="outline-text-3" id="text-emacs-plugin">
<p>
The only thing left to do is to make an Emacs plugin out of my code. I'm not
going to call <code>eval-buffer</code> every time, am I? Let Emacs itself load all the
necessary code at startup.
</p>

<p>
First, I checked the source code with <code>M-x checkdoc</code> and added missing
comments. Then, I added the necessary dependencies to the header:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">require</span> '<span style="color: #268bd2; font-weight: bold;">htmlize</span>)
(<span style="color: #859900; font-weight: bold;">require</span> '<span style="color: #268bd2; font-weight: bold;">ox-publish</span>)
(<span style="color: #859900; font-weight: bold;">require</span> '<span style="color: #268bd2; font-weight: bold;">transient</span>)
</pre>
</div>

<p>
<code>htmlize</code> is needed to color source code blocks in the resulting HTML,
<code>ox-publish</code> is an extension to OrgMode for publishing files. Why the <code>transient</code>
library is necessary, I've already described above.
</p>

<p>
I've also added necessary <code>provide</code> to the end of the file:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">provide</span> '<span style="color: #268bd2; font-weight: bold;">org-jekyll</span>)
</pre>
</div>

<p>
And I described the minor mode, which calls up the transient menu via the <code>C-c
b</code> hotkey:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #93a1a1;">;; </span><span style="color: #93a1a1;">Minor mode:</span>

<span style="color: #93a1a1;">;;;</span><span style="color: #93a1a1;">###</span><span style="color: #cb4b16; font-weight: bold;">autoload</span>
(<span style="color: #859900; font-weight: bold;">define-minor-mode</span> <span style="color: #268bd2;">org-jekyll-mode</span>
  <span style="color: #2aa198;">"Enable transient menu to operate with blog-related OrgMode files."</span>
  <span style="color: #657b83; font-weight: bold;">:lighter</span> <span style="color: #2aa198;">" oj"</span>
  <span style="color: #657b83; font-weight: bold;">:global</span> nil
  <span style="color: #657b83; font-weight: bold;">:init-value</span> nil
  <span style="color: #657b83; font-weight: bold;">:keymap</span> (list (cons (kbd <span style="color: #2aa198;">"C-c b"</span>) #'org-jekyll-menu)))
</pre>
</div>

<p>
Now, if minor mode is enabled with <code>M-x org-jekyll-mode</code>, then the build can be
started with <code>C-c b b</code> hotkey, new post can be created with <code>C-c b n</code> and so
on. The transient menu described above can be accessed with <code>C-c b</code>.
</p>
</div>
</div>
<div id="outline-container-loading-plugin-in-emacs" class="outline-3">
<h3 id="loading-plugin-in-emacs">Loading plugin in Emacs</h3>
<div class="outline-text-3" id="text-loading-plugin-in-emacs">
<p>
The last thing left — is to properly load this plugin into Emacs. The new
minor mode should only be enabled when I open a blogpost file, and shouldn't
interfere with other org files.
</p>

<p>
This can be achieved with the next function:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #93a1a1;">;;;</span><span style="color: #93a1a1;">###</span><span style="color: #cb4b16; font-weight: bold;">autoload</span>
(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll-init</span> ()
  (<span style="color: #859900; font-weight: bold;">if</span> (<span style="color: #859900; font-weight: bold;">and</span> buffer-file-name
           (string-match <span style="color: #2aa198;">"^/.+/article-[[:lower:]]\\{</span><span style="color: #268bd2;">2\\</span><span style="color: #2aa198;">}\\.org"</span> (buffer-file-name)))
      (org-jekyll-mode 1)))
</pre>
</div>

<p>
And with the next <code>use-package</code> configuration:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">use-package</span> org-jekyll
  <span style="color: #657b83; font-weight: bold;">:load-path</span> <span style="color: #2aa198;">"~/rsync/blog/"</span>
  <span style="color: #657b83; font-weight: bold;">:ensure</span> nil
  <span style="color: #657b83; font-weight: bold;">:commands</span> org-jekyll-init
  <span style="color: #657b83; font-weight: bold;">:hook</span> (org-mode . org-jekyll-init))
</pre>
</div>

<p>
Now every time I open an org file, my <code>org-jekyll-init</code> is called. When I opened
the blog post, <code>org-jekyll-mode</code> was enabled and custom hotkeys plus transient
menu became accessible.
</p>
</div>
</div>
</div>
<div id="outline-container-source-code" class="outline-2">
<h2 id="source-code">Source code</h2>
<div class="outline-text-2" id="text-source-code">
<p>
I didn't intend this plugin to be usable by others — after all, it has my
article directory structure and my file naming conventions hardcoded into
it. That's why I didn't publish it in MELPA or set up a separate repository
for it.
</p>

<p>
The source code is in the same repository as the files for my blog. You can
look at it <a href="https://github.com/eugeneandrienko/eugeneandrienko.github.io/blob/master/org-jekyll.el">at this link</a>.
</p>

<p>
As a result, if I need to switch to another static site generator, it will be
enough to tweak the functions involved in the export from OrgMode to make the
generated HTML fit the new engine. My article sources and the entire directory
structure for them will remain untouched.
</p>
</div>
</div>
<div id="outline-container-plugin-improvement" class="outline-2">
<h2 id="plugin-improvement">What else could be improved?</h2>
<div class="outline-text-2" id="text-plugin-improvement">
<p>
There are a few things in the current version of the plugin that are
definitely worth improving:
</p>
<ol class="org-ol">
<li><code>org-publish-project</code> call should be asynchronous — so it will not block
Emacs interface during evaluation, like now. <code>Org-publish-project</code> and
<code>make-process</code> calls should be sequental, instead Jekyll will try to build
the blog while files for it not ready yet.</li>
<li><p>
<code>org-publish-project</code> could operate with Org Babel block. I want to use these
blocks to describe different complicated schemes as code for <a href="https://github.com/plantuml/plantuml">PlantUML</a> right
in blogpost text. After <code>org-publish-project</code> call there are ready images
inside the <code>_articles/</code> catalog (see to <a href="https://hostsharing.coop/@dzu">@dsu</a> blogpost with details:
<a href="https://blog.lazy-evaluation.net/posts/orgmode-diagrams.html">https://blog.lazy-evaluation.net/posts/orgmode-diagrams.html</a>).
</p>

<p>
Needs to modify <code>org-jekyll--prepare-static</code> to copy necessary files from the
new place. And <code>org-jekyll--suffix-clear</code> function should delete these files.
</p>

<p>
<i>Already realised — look to the commit
<a href="https://github.com/eugeneandrienko/eugeneandrienko.github.io/commit/e919bd6d2b7f3a0b853fdf71f288f5c9f1749575">e919bd6d2b7f3a0b853fdf71f288f5c9f1749575</a>.</i>
</p></li>
</ol>
</div>
</div>
<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2" id="text-notes">
</div>
</div>
<div id="footnotes">

<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.virtue_signaling" class="footnum" href="#fnr.virtue_signaling" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
First, in mid-March 2022, Visa and Master Card cut me
off from just about everything what I could buy outside the country with fiat
money. Because of which I could neither transfer my domain to another
registrar nor pay for my VPS in Finland.
</p></div></div>

<div class="footdef"><sup><a id="fn.namecheap" class="footnum" href="#fnr.namecheap" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
That's a separate and utterly "beautiful" story. On 28th
February 2022 NameCheap sent me a notification letter that they will
undelegate my domain in 7 days because I am from the "wrong" country (this was
long before the ban on providing IT services to companies on the sanctions
list, to which I am in no way related — most likely the "happy letters" were
sent because of the registration/billing address for the sake of the
above-mentioned virtue signaling. They didn't even check the real citizenship
of they customers!):
</p>


<div class="figure">
<p><img src="/assets/static/namecheap1.png" alt="Namecheap services discontinuation" align="center" />
</p>
</div>

<p class="footpara">
In the next two letters they extended the deadline by two weeks. And offered
me to either leave the country before the deadline, or <del>get involved in protest
activities</del> go to jail for a dozen years if I wanted to continue using their
services🤡. I'm assuming these letters were composed by some not-so-smart
person from a first-world country whose only encounter with the repressive
apparatus of state was not being sold alcohol without an ID at a Wallmart
checkout; and who knows about life outside his well-established democracy
institutions from the Hunger Games movies. And who is sure that emigrating is
easy — you fill out some paperwork at customs upon entry, and wham — you're
already a citizen of of another country.
</p>


<div class="figure">
<p><img src="/assets/static/namecheap2.png" alt="Namecheap next emails about service shutdown" align="center" />
</p>
</div>

<p class="footpara">
I didn't have time to transfer my domain to another registrar at that time,
because my cards were quickly and suddenly disconnected from Visa/MasterCard —
and I couldn't pay another domain name registrar for the transfer. After a
<b>year (!)</b> it turned out that my domain was still being serviced by NameCheap —
after I received an email from them reminding me to drop off some of my
"dirty" money to renew the domain🤡🤡:
</p>


<div class="figure">
<p><img src="/assets/static/namecheap3.png" alt="Namecheap domain renewal" align="center" />
</p>
</div>

<p class="footpara">
Of course, the services of NameCheap since then I no longer use and bypass it
tenth road, having made a choice in favor of a more sane domain registrar,
located as far away as possible (on the other side of the planet) from
me. Moral of the story — don't trust corporations and all sorts of centralized
and closed services that you don't control. They will throw you out without a
second thought if it is to their advantage. You should always have a backup
plan in case something goes wrong.
</p></div></div>

<div class="footdef"><sup><a id="fn.jekyll" class="footnum" href="#fnr.jekyll" role="doc-backlink">3</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
It looks like simple enough and at the same time it proved to be
quite popular and was (and still is) often used by different hosting providers
as a pre-installed application.
</p></div></div>

<div class="footdef"><sup><a id="fn.javascript" class="footnum" href="#fnr.javascript" role="doc-backlink">4</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
I don't like JS, plus without it the blog is unimaginably fast
to open on my Thinkpad X220.
</p></div></div>

<div class="footdef"><sup><a id="fn.org-publish-project" class="footnum" href="#fnr.org-publish-project" role="doc-backlink">5</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html">https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.clojure" class="footnum" href="#fnr.clojure" role="doc-backlink">6</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
During my university days I was a bit interested in Lisp, read
"Structure and Interpretation of Computer Programs" and wrote various simple
programs in Clojure. The source code of some of them is still exists in
CodeBerg:
</p>
<ul class="org-ul">
<li><a href="https://codeberg.org/evgandr/jamendo-client">https://codeberg.org/evgandr/jamendo-client</a></li>
<li><a href="https://codeberg.org/evgandr/cs-alias-clj">https://codeberg.org/evgandr/cs-alias-clj</a></li>
</ul></div></div>

<div class="footdef"><sup><a id="fn.defcustom" class="footnum" href="#fnr.defcustom" role="doc-backlink">7</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/defcustom.html">https://www.gnu.org/software/emacs/manual/html_node/eintr/defcustom.html</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.quoting" class="footnum" href="#fnr.quoting" role="doc-backlink">8</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
See
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Quoting.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/Quoting.html</a> and
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.directory-files-recursively" class="footnum" href="#fnr.directory-files-recursively" role="doc-backlink">9</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Contents-of-Directories.html#index-directory_002dfiles_002drecursively">https://www.gnu.org/software/emacs/manual/html_node/elisp/Contents-of-Directories.html#index-directory_002dfiles_002drecursively</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.seq-filter" class="footnum" href="#fnr.seq-filter" role="doc-backlink">10</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Sequence-Functions.html#index-seq_002dfilter">https://www.gnu.org/software/emacs/manual/html_node/elisp/Sequence-Functions.html#index-seq_002dfilter</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.mapc" class="footnum" href="#fnr.mapc" role="doc-backlink">11</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Mapping-Functions.html#index-mapc">https://www.gnu.org/software/emacs/manual/html_node/elisp/Mapping-Functions.html#index-mapc</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.lang_code" class="footnum" href="#fnr.lang_code" role="doc-backlink">12</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
A separate directory for each language is necessary for the
plugin <a href="https://github.com/untra/polyglot">jekyll-polyglot</a>, which provides a JavaScript-free way to publish the
same article in different languages.
</p></div></div>

<div class="footdef"><sup><a id="fn.regex-search" class="footnum" href="#fnr.regex-search" role="doc-backlink">13</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Regexp-Search.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/Regexp-Search.html</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.let-star" class="footnum" href="#fnr.let-star" role="doc-backlink">14</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Local-Variables.html#index-let_002a">https://www.gnu.org/software/emacs/manual/html_node/elisp/Local-Variables.html#index-let_002a</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.plist-get" class="footnum" href="#fnr.plist-get" role="doc-backlink">15</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Plist-Access.html#index-plist_002dget">https://www.gnu.org/software/emacs/manual/html_node/elisp/Plist-Access.html#index-plist_002dget</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.toc-org" class="footnum" href="#fnr.toc-org" role="doc-backlink">16</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
My settings for the toc-org plugin, with which it starts to
understand the <code>:TOC_2_blog:</code> tag and generates section links, properly handled
when exported to HTML:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">use-package</span> toc-org
  <span style="color: #657b83; font-weight: bold;">:pin</span> melpa
  <span style="color: #657b83; font-weight: bold;">:hook</span> (org-mode . toc-org-mode)
  <span style="color: #657b83; font-weight: bold;">:config</span>
  (<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">toc-org-hrefify-blog</span> (str <span style="color: #b58900;">&amp;optional</span> hash)
    (concat <span style="color: #2aa198;">"* "</span> (toc-org-format-visible-link str))))
</pre>
</div></div></div>

<div class="footdef"><sup><a id="fn.make-process" class="footnum" href="#fnr.make-process" role="doc-backlink">17</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Asynchronous-Processes.html#index-make_002dprocess">https://www.gnu.org/software/emacs/manual/html_node/elisp/Asynchronous-Processes.html#index-make_002dprocess</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.message" class="footnum" href="#fnr.message" role="doc-backlink">18</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Displaying-Messages.html#index-message">https://www.gnu.org/software/emacs/manual/html_node/elisp/Displaying-Messages.html#index-message</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.propertize" class="footnum" href="#fnr.propertize" role="doc-backlink">19</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Properties.html#index-propertize">https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Properties.html#index-propertize</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.mapcan" class="footnum" href="#fnr.mapcan" role="doc-backlink">20</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Mapping-Functions.html#index-mapcan">https://www.gnu.org/software/emacs/manual/html_node/elisp/Mapping-Functions.html#index-mapcan</a>
</p></div></div>


</div>
</div>]]></content><author><name>Eugene Andrienko</name></author><category term="it" /><category term="emacs" /><summary type="html"><![CDATA[TOC&#xa0;&#xa0;&#xa0; Introduction First version of OrgMode to HTML translator Jekyll-blog generation with Emacs Lisp Org to HTML conversion Custom function to copy files in temporary catalog HTML files patching Static files export Call Jekyll from Emacs New blogpost creation Local server start Jekyll's working directory cleanup UI (transient) Emacs plugin specific code Loading plugin in Emacs Source code What else could be improved? Notes Introduction In this post I'll tell you about my little Emacs plugin, that makes it easy to work with a blog, built on top of a static site engine. It is possible to write posts on OrgMode, although the almost all static site generators support only Markdown, rarely reStructuredText, or HTML🌚.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://eugene-andrienko.com/assets/static/emacs-plugin-jekyll-blog-header.png" /><media:content medium="image" url="https://eugene-andrienko.com/assets/static/emacs-plugin-jekyll-blog-header.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="en"><title type="html">Launching Windows in FreeBSD bhyve hypervisor</title><link href="https://eugene-andrienko.com/en/it/2024/10/27/freebsd-bhyve-windows.html" rel="alternate" type="text/html" title="Launching Windows in FreeBSD bhyve hypervisor" /><published>2024-10-27T00:00:00+03:00</published><updated>2024-10-27T00:00:00+03:00</updated><id>https://eugene-andrienko.com/it/2024/10/27/freebsd-bhyve-windows</id><content type="html" xml:base="https://eugene-andrienko.com/it/2024/10/27/freebsd-bhyve-windows.html"><![CDATA[<p>
In this relatively small article I'll describe the steps required to run
Windows 7 as guest under the Bhyve hypervisor in a FreeBSD host. I will also
cover any pitfails I encountered.
</p>

<p>
This note is based on the Vermaden's article: <a href="https://vermaden.wordpress.com/2023/08/18/freebsd-bhyve-virtualization/">FreeBSD Bhyve
Virtualization</a>. When I followed the instructions in that article, I got
Windows, which hung on boot, with no network access and no remote access. So,
I wrote my version of the instruction, with two additional steps.
</p>

<p>
All started from an old Windows program, that I was needed. Before, I used to
use only Wine for this. But nowadays in 64-bit system I can install only
64-bit version of Wine — which simply can't run installer of necessary program
and ask for 32-bit version of Wine for the every action. Of course, I can do
it with <code>pkg32.sh</code> script from FreeBSD Wine maintainers. <i>But</i>, even with all the
necessary files installed, I can't run the installer of my program.
</p>

<p>
That's where the old tricks come in. A few years ago I'd just install Windows
inside the VirtualBox. It is worked fast and reliable enough — if I used
kernel module for VirtualBox and VirtualBox Guest Addons in the guest
system. But for now I can simply use «standard» FreeBSD capabilities — <a href="https://bhyve.org/">bhyve</a>
hypervisor and <a href="https://github.com/churchers/vm-bhyve">vm-bhyve</a> virtual machines manager, which supports Windows.
</p>
<div class="outline-2">
<h2>TOC&#xa0;&#xa0;&#xa0;<span class="tag"></span></h2>
<div class="outline-text-2">
<ul class="org-ul">
<li><a href="#zfs-dataset">ZFS dataset for my VMs (optional part)</a></li>
<li><a href="#bhyve-setup">Setup bhyve and vm-bhyve</a></li>
<li><a href="#vm-profile">Windows profile for VM</a></li>
<li><a href="#network-setup">Network setup</a></li>
<li><a href="#windows-setup">Windows installation</a></li>
<li><a href="#rdp-client">RDP client</a></li>
<li><a href="#main-bhyve-vm-commands">Basic commands to operate with VM</a></li>
</ul>
</div>
</div>
<div id="outline-container-zfs-dataset" class="outline-2">
<h2 id="zfs-dataset">ZFS dataset for my VMs (optional part)</h2>
<div class="outline-text-2" id="text-zfs-dataset">
<p>
I had an 2.5" hard drive on my shelf. It was in use and once I accidentally
dropped it, so I was afraid to use it to store valuable data. But it works
well for "experimental" virtual machines! I immediately connected this HDD to
my <a href="https://eugene-andrienko.com/en/it/2024/07/07/thinkpad-x220-second-life">Thinkpad X220</a> via OptiBay.
</p>

<p>
The next steps were standard. I've created separate zfs poll and dataset for
virtual machines:
</p>
<pre class="example">
# zpool create hdd /dev/ada1
# zfs create hdd/vms
# zfs set compression=gzip hdd/vms
# zpool status
  pool: hdd
 state: ONLINE
  scan: scrub repaired 0B in 00:00:01 with 0 errors on Sun Oct 27 01:51:43 2024
config:

        NAME        STATE     READ WRITE CKSUM
        hdd         ONLINE       0     0     0
          ada1      ONLINE       0     0     0

errors: No known data errors
# zfs list
NAME                                           USED  AVAIL  REFER  MOUNTPOINT
hdd                                           14.2G   435G    96K  /hdd
hdd/vms                                       14.2G   435G  8.07G  /hdd/vms
</pre>

<p>
The <code>hdd/vms</code> dataset is required for vm-bhyve to store all vm-bhyve-related
files on this hard drive, rather than on the two main system disks.
</p>
</div>
</div>
<div id="outline-container-bhyve-setup" class="outline-2">
<h2 id="bhyve-setup">Setup bhyve and vm-bhyve</h2>
<div class="outline-text-2" id="text-bhyve-setup">
<p>
Again, all the steps are standard:
</p>
<ol class="org-ol">
<li><p>
Setup necessary packages:
</p>
<pre class="example">
# pkg install bhyve-firmware vm-bhyve rdesktop
</pre></li>
<li><p>
Enable vm-bhyve in <code>/etc/rc.conf</code> and instruct it to use the previously
created dataset:
</p>
<pre class="example">
vm_enable="YES"
vm_dir="zfs:hdd/vms"
</pre></li>
<li><p>
Start vm-bhyve:
</p>
<pre class="example">
# /usr/local/etc/rc.d/vm start
</pre></li>
<li><p>
Initialize dataset with bm-bhyve data:
</p>
<pre class="example">
# vm init
</pre>

<p>
After this, there are should be vm-bhyve service catalogues in the <code>/hdd/vms</code>
path:
</p>
<pre class="example">
/hdd/vms % ls -la
total 12
drwxr-xr-x  7 root wheel    7B Oct 27 11:42 ./
drwxr-xr-x  3 root wheel    3B Oct 27 10:52 ../
drwxr-xr-x  2 root wheel    4B Oct 27 12:43 .config/
drwxr-xr-x  2 root wheel    2B Oct 27 01:46 .img/
drwxr-xr-x  2 root wheel    4B Oct 27 11:07 .iso/
drwxr-xr-x  2 root wheel    4B Oct 27 10:53 .templates/
</pre></li>
</ol>
</div>
</div>
<div id="outline-container-vm-profile" class="outline-2">
<h2 id="vm-profile">Windows profile for VM</h2>
<div class="outline-text-2" id="text-vm-profile">
<p>
By default there is only one <code>default</code> profile in <code>/hdd/vms/.templates/</code>. With
this profile the Windows VM will not have graphics, sound and enough memory.
</p>

<p>
Here is an article by Vermaden: <a href="https://vermaden.wordpress.com/2023/08/18/freebsd-bhyve-virtualization/">FreeBSD Bhyve Virtualization</a> — helped me a
lot. I took the profile from that post and made a few changes:
</p>
<ul class="org-ul">
<li>Remove the <code>xhci_mouse</code> setting — if it is enabled, the installed system hangs
on load.</li>
<li><p>
Add more memory:
</p>
<pre class="example">
loader="uefi"
graphics="yes"
cpu=2
memory=6G
ahci_device_limit="8"
network0_type="e1000"
network0_switch="public"
disk0_type="ahci-hd"
disk0_name="disk0.img"
disk0_opts="sectorsize=512"
utctime="no"
bhyve_options="-s 8,hda,play=/dev/dsp,rec=/dev/dsp"
</pre>

<p>
This profile is stored in <code>/hdd/vms/.templates/windows.conf</code>.
</p></li>
</ul>
</div>
</div>
<div id="outline-container-network-setup" class="outline-2">
<h2 id="network-setup">Network setup</h2>
<div class="outline-text-2" id="text-network-setup">
<p>
For unknown reasons, this step is missing from many instructions. As a result,
there is no network access from the host to the guest.
</p>

<p>
First, create the switch <code>public</code> (used in the <code>windows</code> profile from above):
</p>
<pre class="example">
# vm switch create public
</pre>

<p>
Then set the correct address for switch:
</p>
<pre class="example">
# vm switch address public 169.254.0.1/16
</pre>

<p>
I set the switch address after Windows installation — just take the VM network
settings from <code>ipconfig</code>:
</p>
<ul class="org-ul">
<li>IP address: 169.254.122.106</li>
<li>Netmask: 255.255.0.0</li>
</ul>

<p>
And set the appropriate address for the switch:
</p>
<pre class="example">
s vm switch list
NAME    TYPE      IFACE      ADDRESS         PRIVATE  MTU  VLAN  PORTS
public  standard  vm-public  169.254.0.1/16  no       -    -     -
</pre>
</div>
</div>
<div id="outline-container-windows-setup" class="outline-2">
<h2 id="windows-setup">Windows installation</h2>
<div class="outline-text-2" id="text-windows-setup">
<p>
There is the most non-trivial part. Most instructions recommend patching the
distribution ISO to add the virtio drivers. Fortunately, a custom "ZverDVD"
distribution, which I used, already has the necessary drivers. Or maybe these
drivers are not necessary for installation for now.
</p>

<p>
What's interesting is that not every distribution ISO works — some of them
just don't load. I haven't found out why this happens. So, you should spend a
some time to find a suitable ISO&#x2026;
</p>

<p>
ISO file should be placed to <code>/hdd/vms/.iso/</code>. After that it should appear in
the <code>vm iso</code> output:
</p>
<pre class="example">
# vm iso
DATASTORE           FILENAME
default             windows_eagle.iso
</pre>

<p>
It is a good idea to have any VNC client installed on the host machine before
installing Windows. It is necessary to connect to the Windows installer GUI
and complete the process. I used <a href="https://wiki.gnome.org/Apps/Vinagre">Vinagre</a> because it can scale the working area
in the right way.
</p>

<p>
Preparation to installation is simple:
</p>
<ol class="org-ol">
<li><p>
Create VM with 50 Gb disk and with <code>windows</code> profile:
</p>
<pre class="example">
# vm create -t windows -s 50G windows
</pre></li>
<li><p>
Start booting from bootable ISO:
</p>
<pre class="example">
# vm install windows windows_eagle.iso
Starting windows
* found guest in /hdd/vms/windows
* booting...
</pre></li>
<li><p>
After step 2 the system will wait for VNC client connection on the address
from table:
</p>
<pre class="example">
# vm list
NAME      DATASTORE  LOADER  CPU  MEMORY  VNC           AUTO  STATE
windows  default    uefi    2    6G      0.0.0.0:5900  No    Locked (freebsd)
</pre></li>
<li><p>
And then it's business as usual :-)
</p>

<div class="figure">
<p><img src="/assets/static/windows7_setup.jpg" alt="windows 7 setup" align="center" />
</p>
<p style="text-align: center"><i>Windows installation</i></p>
</div></li>
</ol>
</div>
</div>
<div id="outline-container-rdp-client" class="outline-2">
<h2 id="rdp-client">RDP client</h2>
<div class="outline-text-2" id="text-rdp-client">
<p>
As a Vermaden, I decided to connect to the working system via RDP. It is very
useful to be able to connect to the system and mount host system catalogues at
the same time.
</p>

<p>
To enable RDP in Windows the following steps are required:
</p>
<ul class="org-ul">
<li>Set the password for the account that will be used under RDP.</li>
<li><p>
Enable remote access to the system:
</p>

<div class="figure">
<p><img src="/assets/static/windows7_remote_control.jpg" alt="windows 7 remote control settings" align="center" />
</p>
<p style="text-align: center"><i>Windows remote access</i></p>
</div></li>
<li><p>
Obtain the IP address of the guest system via <code>ipconfig</code>:
</p>

<div class="figure">
<p><img src="/assets/static/windows7_ipconfig.jpg" alt="windows cmd and ipconfig output" align="center" />
</p>
</div>

<p>
And now it is possible to connect to the guest-Windows from FreeBSD-host
via:
</p>
<pre class="example">
$ rdesktop -u user -p 1234 -P -N -z -g 1600x900 -a 24 -r sound:local -r disk:DWNL=/home/drag0n/downloads/ 169.254.122.106
</pre>

<p>
You should use your own <code>login/password</code> pair instead of <code>user/1234</code>. Option <code>-r
  disk</code> mounts <code>/home/drag0n/downloads/</code> from the host to the guest as a network
drive with the name <code>DWNL</code>. The <code>-r clipboard</code> option allows you to have the
same clipboard contents in both OS.
</p>


<div class="figure">
<p><img src="/assets/static/windows7_dwnl.jpg" alt="Catalog from FreeBSD host as DWNL network storage" align="center" />
</p>
<p style="text-align: center"><i>Mounted FreeBSD-host catalog</i></p>
</div>

<p>
The <code>-g 1600x900</code> option sets the resolution of the guest desktop in the
rdesktop window. However, if you are using tiling wm, the rdesktop window
will be stretched to the size of the physical screen and this option will be
ignored. In some cases this can be useful.
</p></li>
</ul>
</div>
</div>
<div id="outline-container-main-bhyve-vm-commands" class="outline-2">
<h2 id="main-bhyve-vm-commands">Basic commands to operate with VM</h2>
<div class="outline-text-2" id="text-main-bhyve-vm-commands">
<ol class="org-ol">
<li><p>
Launch VM:
</p>
<pre class="example">
# vm start windows
Starting windows
* found guest in /hdd/vms/windows
* booting...
</pre></li>
<li><p>
VM stop:
</p>
<pre class="example">
shutdown /s /t 0
</pre>
<p>
:-)
</p></li>
<li><p>
List VMs:
</p>
<pre class="example">
# vm list
NAME     DATASTORE  LOADER  CPU  MEMORY  VNC  AUTO  STATE
windows  default    uefi    2    6G      -    No    Stopped
</pre></li>
<li><p>
Turn of VM by power (if Windows is hang):
</p>
<pre class="example">
# vm poweroff windows
Are you sure you want to forcefully poweroff this virtual machine (y/n)?
</pre></li>
</ol>
</div>
</div>]]></content><author><name>Eugene Andrienko</name></author><category term="it" /><category term="freebsd" /><summary type="html"><![CDATA[In this relatively small article I'll describe the steps required to run Windows 7 as guest under the Bhyve hypervisor in a FreeBSD host. I will also cover any pitfails I encountered.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://eugene-andrienko.com/assets/static/freebsd_win.jpg" /><media:content medium="image" url="https://eugene-andrienko.com/assets/static/freebsd_win.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="en"><title type="html">Summer photos (2024)</title><link href="https://eugene-andrienko.com/en/photo/2024/09/01/summer-photos-2024.html" rel="alternate" type="text/html" title="Summer photos (2024)" /><published>2024-09-01T00:00:00+03:00</published><updated>2024-09-01T00:00:00+03:00</updated><id>https://eugene-andrienko.com/photo/2024/09/01/summer-photos-2024</id><content type="html" xml:base="https://eugene-andrienko.com/photo/2024/09/01/summer-photos-2024.html"><![CDATA[<div class="outline-2">
<h2>Street photos</h2>
<div class="outline-text-2">
<p>
Different "geometric" photos. Fortunately, the city provides a lot of
material.
</p>


<div class="figure">
<p><img src="/assets/static/20240629_155114.JPG" alt="Concrete ruins" align="center" />
</p>
<p style="text-align: center"><i>Concrete ruins</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240629_181025.JPG" alt="Arcs" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240629_192522.JPG" alt="HOPE as lamp" align="center" />
</p>
<p style="text-align: center"><i>HOPE Lamp</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240629_195620.JPG" alt="Reflection of street life" align="center" />
</p>
<p style="text-align: center"><i>Reflection of street life</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240630_174348.JPG" alt="Bulletin board" align="center" />
</p>
<p style="text-align: center"><i>Bulletin board</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240630_180103.JPG" alt="Sailor Moon vibes" align="center" />
</p>
<p style="text-align: center"><i>Sailor Moon vibes</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240630_192455.JPG" alt="Angle" align="center" />
</p>
<p style="text-align: center"><i>Angle</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240820_165209.JPG" alt="Asphalt" align="center" />
</p>
<p style="text-align: center"><i>Asphalt</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240820_165244.JPG" alt="Peter and Paul Fortress" align="center" />
</p>
<p style="text-align: center"><i>Peter and Paul Fortress silhouette</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240820_190739.JPG" alt="Reflection at handrail" align="center" />
</p>
<p style="text-align: center"><i>Reflection at handrail</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240821_091937.JPG" alt="Enemy of freedom" align="center" />
</p>
<p style="text-align: center"><i>Enemy of freedom</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240822_114817.JPG" alt="Feather" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240822_115028.JPG" alt="Opel Astra" align="center" />
</p>
<p style="text-align: center"><i>Opel Astra</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240822_115856.JPG" alt="Apples" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240822_121429.JPG" alt="Daisies" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240822_121717.JPG" alt="Tree" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240827_110557.JPG" alt="Chain link fencing on the pole" align="center" />
</p>
<p style="text-align: center"><i>Chain link fencing on the pole</i></p>
</div>

<p>
Black cat (1 pcs):
</p>


<div class="figure">
<p><img src="/assets/static/20240630_183332.JPG" alt="Black cat" align="center" />
</p>
</div>

<hr />


<div class="figure">
<p><img src="/assets/static/20240630_185336.JPG" alt="Toy bridge" align="center" />
</p>
<p style="text-align: center"><i>Toy bridge</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240630_202909.JPG" alt="Someon..." align="center" />
</p>
<p style="text-align: center"><i>Translation: «Someon&#x2026;»</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240630_203433.JPG" alt="End of epoch" align="center" />
</p>
<p style="text-align: center"><i>Translation: «End of epoch&#x2026; :-( :-(»</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240630_222954.JPG" alt="Fireworks" align="center" />
</p>
<p style="text-align: center"><i>Fireworks</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240630_222957.JPG" alt="Fireworks" align="center" />
</p>
<p style="text-align: center"><i>Fireworks</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240713_180453.JPG" alt="Helicopter near the Peter and Paul Fortress" align="center" />
</p>
<p style="text-align: center"><i>Helicopter near the Peter and Paul Fortress</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240713_181404.JPG" alt="Helicopter exhaust" align="center" />
</p>
<p style="text-align: center"><i>Helicopter exhaust</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240713_235325.JPG" alt="Rostral columns fire" align="center" />
</p>
<p style="text-align: center"><i>Rostral columns fire</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240820_165336.JPG" alt="Stone eagle" align="center" />
</p>
<p style="text-align: center"><i>Stone eagle</i></p>
</div>
</div>
</div>
<div class="outline-2">
<h2>Birds</h2>
<div class="outline-text-2">

<div class="figure">
<p><img src="/assets/static/20240629_163333.JPG" alt="Gulls" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240630_191848.JPG" alt="Walking with a style" align="center" />
</p>
<p style="text-align: center"><i>Walking with a style</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240820_121214.JPG" alt="Jumping sparrow" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240820_121215.JPG" alt="Jumping sparrow" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240820_121216.JPG" alt="Jumping sparrow" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240822_115154.JPG" alt="Huh?" align="center" />
</p>
<p style="text-align: center"><i>Huh?</i></p>
</div>
</div>
</div>
<div class="outline-2">
<h2>Computers</h2>
<div class="outline-text-2">
<p>
All photos were taken at <a href="https://chaosconstructions.ru/">Chaos Constructions</a> 2024 festival.
</p>


<div class="figure">
<p><img src="/assets/static/20240824_163655.JPG" alt="Microsha" align="center" />
</p>
<p style="text-align: center"><i>«Microsha» computer</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240824_164736.JPG" alt="PDP-11/04" align="center" />
</p>
<p style="text-align: center"><i>PDP-11/04</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240824_164953.JPG" alt="PDP-11/04" align="center" />
</p>
<p style="text-align: center"><i>PDP-11/04</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240824_170530.JPG" alt="Nice terminal" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240824_200506.JPG" alt="Nice terminal 2" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240824_175244.JPG" alt="Nice code on the screen" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240824_180900.JPG" alt="Window" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240824_181012.JPG" alt="Electronika BK 0010-01" align="center" />
</p>
<p style="text-align: center"><i>Electronika BK 0010-01</i></p>
</div>
</div>
</div>]]></content><author><name>Eugene Andrienko</name></author><category term="photo" /><summary type="html"><![CDATA[Street photos Different "geometric" photos. Fortunately, the city provides a lot of material.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://eugene-andrienko.com/assets/static/header-summer-2024.jpg" /><media:content medium="image" url="https://eugene-andrienko.com/assets/static/header-summer-2024.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>