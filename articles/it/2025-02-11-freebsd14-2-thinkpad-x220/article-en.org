#+BEGIN_EXPORT html
---
layout: post
title: FreeBSD 14.2 and Thinkpad X220
category: it
date: 2025-03-10
lang: en
comments: false
hidden:
  - related_posts
image: /assets/static/freebsd14-2-thinkpad.jpg
banner:
  image: /assets/static/freebsd14-2-thinkpad.jpg
  opacity: 0.6
summary: My settings for FreeBSD 14.2 on the Thinkpad X220
tags: freebsd thinkpad
---
#+END_EXPORT

Since I've wrote [[https://eugene-andrienko.com/it/2020/09/26/thinkpad-x220-freebsd][post about my specific FreeBSD settings for Thinkpad X220]]
near 5 years have passed. That post has a lot of additions and become a bit
messy. So, after I updated FreeBSD on my laptop up to 14.2 version and finally
found some time to carefully read a [[https://docs.freebsd.org/en/books/handbook/]["FreeBSD handbook"]], I decided to write a
new article about my configuration and about few useful utilities and tricks.

Few words about my setup. I use ZFS as a filesystem. The root filesystem
installed in the ZFS pool =zroot= which has two disks: first near a 500Â GB SSD
and second a 160Â Gb SSD:

#+begin_example
 ~ % zpool status zroot
  pool: zroot
 state: ONLINE
  scan: scrub repaired 0B in 00:06:42 with 0 errors on Thu Feb 6 03:13:50 2025
config:

        NAME          STATE     READ WRITE CKSUM
        zroot         ONLINE       0     0     0
          ada0p3.eli  ONLINE       0     0     0
          ada2p3.eli  ONLINE       0     0     0

errors: No known data errors
 ~ % zpool list zroot
NAME    SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT
zroot   579G   123G   456G        -         -     6%    21%  1.00x    ONLINE  -
#+end_example

As you can see, I bravely traded reliability for read speedðŸ« . I hope that
snapshots and backups will save me.

And there is a third disk is in separate pool with a datasets for VMs (bhyve):

#+begin_example
 ~ % zpool status hdd
  pool: hdd
 state: ONLINE
  scan: scrub repaired 0B in 00:01:37 with 0 errors on Thu Feb  6 03:08:49 2025
config:

        NAME        STATE     READ WRITE CKSUM
        hdd         ONLINE       0     0     0
          ada1      ONLINE       0     0     0

errors: No known data errors
 ~ % zfs list -r hdd
NAME              USED  AVAIL  REFER  MOUNTPOINT
hdd              10.2G   439G    96K  /hdd
hdd/vms          10.2G   439G  3.86G  /hdd/vms
hdd/vms/windows  6.39G   439G  6.39G  /hdd/vms/windows
#+end_example

There is a [[https://eugene-andrienko.com/en/it/2024/12/21/thinkpad-x220-libreboot][Libreboot installed in the laptop]] instead of BIOS. So my =loader=
starts in graphics mode, instead I've get problems with Libreboot built with
corebootfb.

As a WiFi card I use an Intel 8260 card with integrated WiFi and Bluetooth
(TL-8260D2W).

More information about my hardware you can read in [[https://eugene-andrienko.com/en/it/2024/07/07/thinkpad-x220-second-life][this post]].

* Tangle                                                           :noexport:
#+name: tangle-it
#+begin_src emacs-lisp :exports none
(org-babel-tangle)
#+end_src

#+begin_src text :results silent :noweb yes :exports results
<<tangle-it()>>
#+end_src

* TOC                                                            :TOC_2_blog:
- [[* Bootloader][Bootloader]]
- [[* Direct Rendering Manager kernel module][Direct Rendering Manager kernel module]]
- [[* /boot/loader.conf][/boot/loader.conf]]
- [[* /etc/rc.conf][/etc/rc.conf]]
- [[* /etc/sysctl.conf][/etc/sysctl.conf]]
- [[* X Window System][X Window System]]
- [[* Power management][Power management]]
- [[* Networking][Networking]]
  - [[* USB tethering][USB tethering]]
- [[* Storage][Storage]]
- [[* Fingerprint scanner][Fingerprint scanner]]
- [[* Files to download][Files to download]]
- [[* Notes][Notes]]

* Bootloader
:PROPERTIES:
:CUSTOM_ID: bootloader
:END:

As [[https://libreboot.org/docs/bsd/#freebsd-and-corebootfb][stated in the Libreboot's site]], it doesn't works well with the FreeBSD
=loader=. If you install libreboot with =libgfxinit= (i.e. use binary with
=-corebootfb= suffix) and try to load FreeBSD, then you get a slim line on the
top of the screen instead of bootloader graphics and boot log of the FreeBSD
kernel and =init=. It looks like this:

#+CAPTION: Slim blue line instead of bsdinstall interface
#+ATTR_HTML: :align center :alt Slim blue line on the top of the screen instead of the bsdinstall interface fullscreen
[[file:freebsd_n_corebootfb.jpg]]

Fortunately, I found a workaround for this problem. If you booting the FreeBSD
installation media and the =loader= interface should appears on the screenÂ â€”
blindly press =Esc= and type =vbe on= and press =Enter=. After that the fullscreen
=loader= interface should appear and installation process should display on the
screen as usual.

If you already installed FreeBSD, then just add the next lines to the
=/boot/loader.conf=:
#+begin_src shell -r -n :tangle loader.conf.txt
hw.vga.textmode="0"
vbe_max_resolution=2560x1440  (ref:loader-conf-resolution)
#+end_src

Don't forget to insert the actual resolution to the line
[[(loader-conf-resolution)]]!

After switch to FreeBSDÂ 14.2 the things became more complicated. Because of
Netflix, the graphics mode from MBR bootloader [[https://www.freebsd.org/releases/14.2R/relnotes/#:~:text=removed%20support%20for%20graphics%20mode][was removed]] and GZIP/BZIP2
compression takes its place. But this graphics mode was necessary for me to
see anything on the screen while system is booting. The previously described
trick doesn't work if bootloader lacks of graphics mode!

I found [[https://forums.freebsd.org/threads/freebsd-14-2-bootsplash-gone.96142/#post-684187][a solution]] in the FreeBSD forum: just rebuild a loader with reverted
[[https://cgit.freebsd.org/src/commit/?id=4d3b05a8530e][4d3b05a8530e]] commit and image on the display will be back. To achieve this I
did the next things:
1. Went to the =/usr/src/= catalog.
2. Because there is no Git repository in this catalog (in my case), I manually
   reverted the changes from the aforementioned commit.
3. Then I executed next set of commands:
   #+begin_example
   cd /usr/src/stand/
   make clean
   make
   make install
   #+end_example

   I should note that =make clean install= command, suggested at the mentioned
   forum's message, didn't completed successfully on my machine. That's why
   there are three consequtive =make= calls on the code block above.

   These calls should be completed without an errors.
4. At this point the =loader= with graphics support should be already installed
   in the =/boot= directory. So, after a reboot, the graphics interface of
   bootloader and the boot log of the kernel should appear on the screen.

* Direct Rendering Manager kernel module
:PROPERTIES:
:CUSTOM_ID: drm
:END:

/This section is applicable till 31 March 2025. After the FreeBSDÂ 14.1 EoL it
will be no longer neccessary./

For now (February 2025) the drm-kmod kernel module is still building for
FreeBSDÂ 14.1. So when I updated to 14.2 release, I've got a drm-kmod for 14.1
kernel with 14.2 kernel. Of course it didn't work properly and I've got nor
text consoles neither boot log (after =init= start). Only the X-server works,
which is starting automatically on boot on my laptop.

There are two "default" options I've found in the Internet:
1. Don't update till 31 March 2025. After this date the drm-kmod will be built
   for FreeBSDÂ 14.2 and it will be safe to update the system.
2. Update the system now and build proper DRM kernel module for 14.2 manually.

Fortunately, the [[https://mas.to/@patrizia@hachyderm.io][@patrizia@hachyderm.io]] showed me the third option. There is
exists a special FreeBSD-kmods repository with drm-kmod, built for newly
released FreeBSD version.

Based on [[https://hachyderm.io/@patrizia/113897441053997542][this]] and [[https://forums.freebsd.org/threads/new-install-of-14-2.96276/#post-684792][this]], the solution is simple:
1. Add/edit the file =/usr/local/etc/pkg/repos/FreeBSD-kmods.conf=. It should
   has the next contents for the system based on the quarterly releases:
   #+begin_example
   FreeBSD-kmods: {
       url             : "pkg+https://pkg.freebsd.org/${ABI}/kmods_quarterly_${VERSION_MINOR}",
       enabled         : yes,
       priority        : 10,
       mirror_type     : "SRV",
       signature_type  : "FINGERPRINTS",
       fingerprints    : "/usr/share/keys/pkg"
   }
   #+end_example
2. Call =sudo pkg update= to check that the new repository is accessible.
3. Check currently used drm-kmod version
   #+begin_example
   % sudo pkg info | grep drm
   drm-61-kmod-6.1.92.1402000_3   DRM drivers modules
   drm-kmod-20220907_3            Metaport of DRM modules for the linuxkpi-based KMS components
   #+end_example
4. Check that this version (drm-61-kmod in my case) exists in FreeBSD-kmod repository:
   #+begin_example
   % sudo pkg search -r FreeBSD-kmods drm
   drm-515-kmod-5.15.160.1402000_2 DRM drivers modules
   drm-61-kmod-6.1.92.1402000_3   DRM drivers modules
   #+end_example
5. Remove installed drm-kmod:
   #+begin_example
   % sudo pkg remove drm-kmod drm-61-kmod
   #+end_example
6. And install drm-61-kmod from a proper repository:
   #+begin_example
   % sudo pkg install -r FreeBSD-kmods drm-61-kmod && sudo pkg install drm-kmod
   #+end_example

After reboot the boot log and the text consoles are back!

* /boot/loader.conf
:PROPERTIES:
:CUSTOM_ID: boot-loader-conf
:END:

There were two sections about FreeBSDÂ 14.2 specific things, which I've added
to the system after upgrading from 14.1. Now I'll write about the realðŸ˜Ž
system configuration.

Let's start with =/boot/loader.conf= â€” there is a configuration file for
[[https://man.freebsd.org/cgi/man.cgi?query=loader&sektion=8&format=html][loader(8)]] â€” the 3rd stage bootloader, which loads the kernel. Most of
variables in this file are well described in [[https://man.freebsd.org/cgi/man.cgi?loader.conf][loader.conf(5)]].

The first section of my file describes =loader=-related configuration:
#+begin_src shell -n -r :tangle loader.conf.txt
##################
# Loader settings:
##################
autoboot_delay="0"       (ref:loader-conf-boot-delay)
beastie_disable="YES"    (ref:loader-conf-beastie)
boot_mute="YES"          (ref:loader-conf-boot-mute)
cpu_microcode_load="YES"
cpu_microcode_name="/boot/firmware/intel-ucode.bin"
#+end_src

Lines [[(loader-conf-boot-delay)]] and [[(loader-conf-beastie)]] are used to skip the
=loader='s interactive menu and boot the kernel right after the computer is
turned on. I can still jump to the =loader= console by pressing any key while
the =loader= is loading modules and preparing to load the kernel.

Line [[(loader-conf-boot-mute)]] used to hide the kernel log during
loading. Instead, the nice white FreeBSD logo is displayed, just like in other
consumer OSes:

#+CAPTION: FreeBSD logo during the boot if boot_mute="YES"
#+ATTR_HTML: :alt black and white FreeBSD boot logo :align center
[[file:bootlogo.png]]

The last two lines allow loading [[https://en.wikipedia.org/wiki/Microcode][Intel CPU microcode]] during kernel
loading. The =sysutils/cpu-microcode-intel= package should be installed first!

In the next section, there are lines with kernel modules that the =loader= will
load:
#+begin_src shell -n 9 -r :tangle loader.conf.txt
##################
# Modules to load:
##################
i915kms_load="YES"       (ref:loader-conf-i915kms)
aesni_load="YES"         (ref:loader-conf-aesni)
cryptodev_load="YES"
geom_eli_load="YES"
zfs_load="YES"
libiconv_load="YES"
libmchain_load="YES"
cd9660_iconv_load="YES"
msdosfs_iconv_load="YES" (ref:loader-conf-cd9660-iconv)
acpi_ibm_load="YES"
acpi_video_load="YES"
acpi_dock_load="YES"
# Load the H-TCP algorithm. It has a more aggressive ramp-up to max
# bandwidth, and its optimized for high-speed, high-latency connections.
cc_htcp_load="YES"       (ref:loader-conf-cc-htcp)
cpuctl_load="YES"        (ref:loader-conf-cpuctl)
coretemp_load="YES"
sysctlinfo_load="YES"    (ref:loader-conf-sysctlinfo)
sysctlbyname_improved_load="YES"
#+end_src

Although these lines may look a bit crypticÂ â€” they aren't. Most of these lines
were added by the =bsdinstaller= during the installation process. The
instructions for loading modules may look like the same instructions from
=/etc/rc.conf=Â â€” but they should be placed in =/boot/loader.conf=. This is
necessary because these modules *must* be loaded before the system mounts the
disks using [[https://man.freebsd.org/cgi/man.cgi?rc(8)][rc(8)]] scripts. Without them, the system won't be able to mount the
disks and initialize the other hardware properly. That's why modules should be
loaded by the =loader= before initialization scripts loading.

- Line [[(loader-conf-i915kms)]] was added by myselfÂ â€” it instructs to load kernel
  mode setting[fn:modesetting-wiki] module for the Intel integrated video
  card. Without it, there was no graphical output, at least in the console.
- Lines from [[(loader-conf-aesni)]] through [[(loader-conf-cd9660-iconv)]] load the
  storage-related kernel modules. Some modules (=aesni=, =cryptodev=, =geom_eli= and
  =zfs)= were added during the installation process. They are needed to decrypt
  the encrypted disk partitions, to decrypt them fast enough, and for ZFS
  support.

  The =libiconv=, =libmchain=, =cd9660_iconv= and =msdosfs_iconv= modules were added
  by myself. They are needed for codeset conversion when the path on the
  mounted filesystem is not in UTF-8 but in something like CP1251, CP866,
  etc. This usually happens when I mount some old ISOs from the 199Xs or
  unpack some archives from the Windows XP era with Cyrillic filenames.
- Various =acpi_*= modules are needed to support Thinkpad-specific things:
  - [[https://man.freebsd.org/cgi/man.cgi?query=acpi_ibm&apropos=0&sektion=4&manpath=FreeBSD+14.2-RELEASE&arch=default&format=html][acpi_ibm(4)]] provides access to Thinkpad-specific hardware available
    through the ACPI interface. For example, ThinkLight status can be read via
    =sysctl dev.acpi_ibm.0.thinklight=, and even enabled programmatically via
    =sudo sysctl dev.acpi_ibm.0.thinklight=1=.
  - [[https://man.freebsd.org/cgi/man.cgi?query=acpi_video&apropos=0&sektion=4&manpath=FreeBSD+14.2-RELEASE&arch=default&format=html][acpi_video(4)]] provides various controls for some video core outputs (LVDS,
    VGA, etc).
  - [[https://man.freebsd.org/cgi/man.cgi?query=acpi_dock&apropos=0&sektion=4&manpath=FreeBSD+14.2-RELEASE&arch=default&format=html][acpi_dock(4)]] is a docking station device driver.
- Line [[(loader-conf-cc-htcp)]] was taken from [[https://www.sacredheartsc.com/blog/freebsd-14-on-the-desktop/][this blog post]] to improve
  performance when my laptop is connected to the Internet (my main use case).
- The next two lines, starting at [[(loader-conf-cpuctl)]], are necessary to
  access specific CPU-related information, such as CPUID or temperature, and
  to perform CPU firmware updates.
- The last two lines, starting at [[(loader-conf-sysctlinfo)]], are added for
  [[https://man.freebsd.org/cgi/man.cgi?query=mixertui&sektion=8&n=1][mixertui(8)]]Â â€” an ncurses-like interface mixer for OSS:
  #+CAPTION: mixertui console interface
  #+ATTR_HTML: :alt Console interface for mixertui, with gauge controls for different sound inputs/outputs :align center
  [[file:mixertui.png]]

The last section contains some system settings. All of these settings are just
some [[https://man.freebsd.org/cgi/man.cgi?query=sysctl&apropos=0&sektion=8&manpath=FreeBSD+14.2-RELEASE&arch=default&format=html][sysctl(8)]] variables that are read-only on FreeBSD and can only be changed
by the =loader=.

#+begin_src shell -n 31 -r :tangle loader.conf.txt
##################
# System settings:
##################
security.bsd.allow_destructive_dtrace=0            (ref:loader-conf-allow-destructive-dtrace)
#
# Read only but tunable sysctl settings:
#
# Enable framebuffer compression for power saving: (ref:loader-conf-enable-fbc)
compat.linuxkpi.i915_enable_fbc=1
# Try to skip unnecessary mode sets at boot time:
compat.linuxkpi.i915_fastboot=1                    (ref:loader-conf-fastboot)
hw.psm.synaptics_support=1                         (ref:loader-conf-synaptics)
hw.psm.trackpoint_support=1
kern.hz=100                                        (ref:loader-conf-kern)
kern.ipc.shmmni="1024"
kern.ipc.shmseg="1024"
kern.maxproc="100000"
# Enable faster soreceive() implementation:
net.inet.tcp.soreceive_stream="1"                  (ref:loader-conf-soreceive)
# Increase the network interface queue link - the default (50) is way
# too low:
net.isr.defaultqlimit="2048"                       (ref:loader-conf-queue-link)
net.link.ifqmaxlen="2048"
#+end_src

- The [[(loader-conf-allow-destructive-dtrace)]]th line has been added by
  =bsdinstall=. It removes DTrace's ability to work with system
  internals[fn:dtrace-internal].
- The lines from [[(loader-conf-enable-fbc)]] to [[(loader-conf-fastboot)]] just
  enable some nice features for my integrated Intel GMA X3100 video card.
- Two lines starting at [[(loader-conf-synaptics)]] line enable TrackPoint and
  Synaptics touchpad support.
- Four lines starting at [[(loader-conf-kern)]] contain various kernel-related
  handles that increase the defaults to make it more suitable for desktop
  systems.
- Line [[(loader-conf-soreceive)]] and two lines after [[(loader-conf-queue-link)]]
  were taken from someone's blogpost to increase the network performance of my
  laptop.

* /etc/rc.conf
:PROPERTIES:
:CUSTOM_ID: etc-rc-conf
:END:

The next main configuration file in FreeBSD is an =/etc/rc.conf=. Here, as
stated in [[https://man.freebsd.org/cgi/man.cgi?rc.conf(5)][rc.conf(5)]], stored the next settings:
- Network configuration, including hostname, interface(s) configuration, etc.
- List services to run at system startup.
- Sometimes, it includes configuration for *system* services.

List of services already populated by =bsdinstaller=, but I've added a lot more:
#+begin_src shell -n -r :tangle rc.conf.txt :noweb yes
####################
# Services to start:
####################
local_unbound_enable="YES"
clear_tmp_enable="YES"
sshd_enable="NO"
ntpd_enable="YES"
autofs_enable="YES"
zfs_enable="YES"
dbus_enable="YES"             (ref:rc-conf-custom-lines)
lightdm_enable="YES"          (ref:rc-conf-lightdm)
<<powerd>>
<<wifibox>>
webcamd_enable="YES"
devmatch_enable="YES"         (ref:rc-conf-devmatch)
vm_enable="YES"               (ref:rc-conf-vm)
linux_enable="YES"            (ref:rc-conf-linux)
microcode_update_enable="YES" (ref:rc-conf-microcode-update)
#+end_src

My custom settings starting from line [[(rc-conf-custom-lines)]]. First, I enable
D-BusÂ â€” sadly, it is necessary for some programs even if I use i3wm, despite
it was created for KDE or GnomeÂ â€” for example for +Firefox+ Librewolf and
[[https://fprint.freedesktop.org/][fprintd]] utilities.

Then ([[(rc-conf-lightdm)]]), I enable LightDM serviceÂ â€” the nice and lightweight
login screen for X server:

#+CAPTION: LightDM login screen
#+ATTR_HTML: :alt LightDM login window :align center
[[file:lightdm.jpg]]

LightDM configuration for i3 was a bit tricky. But after some experiments I
added these lines to =/usr/local/etc/lightdm/lightdm.conf=:

#+begin_src nil -r -n
[Seat:*]
xserver-share=true
greeter-session=lightdm-gtk-greeter
session-wrapper=/usr/local/etc/lightdm/Xsession
display-setup-script=xrandr --output DP-3 --primary --dpi 130  (ref:lightdm-conf-2k)
#+end_src

On the line [[(lightdm-conf-2k)]] there is a special command to properly setup X
server to display login screen on the right display with a right DPI.

Lets return to the =/etc/rc.conf=. Line [[(rc-conf-devmatch)]] enables auto-loading
of kernel modules with [[https://man.freebsd.org/cgi/man.cgi?query=devmatch&sektion=8&apropos=0&manpath=FreeBSD+14.2-RELEASE+and+Ports][devmatch(8)]]Â â€” I need it to blacklist some modules,
which is unnecessary in my configuration but load by default. And the line
[[(rc-conf-microcode-update)]] enables service to update CPU microcode on the
start (if package =sysutils/cpu-microcode-intel= is installed).

Then, I enable the =vm= service for [[https://github.com/churchers/vm-bhyve][bhyve-vm management console]] (line
[[(rc-conf-vm)]]). And a [[https://docs.freebsd.org/en/books/handbook/linuxemu/][Linuxulator]]Â â€” Linux compatibility layerÂ â€” on the line
[[(rc-conf-linux)]]. Usually it is not necessary for normal FreeBSD operation
because all necessary programs built for FreeBSD. I don't remember why I
enable it, maybe to launch Dwarf Fortress, may be to lauch [[https://cataclysmdda.org/][Cataclysm-DDA]].

The most of the system-related configuration is already populated by the
=bsdinstaller=. So I've just added the few lines:

#+begin_src shell -n 19 -r :tangle rc.conf.txt :noweb yes
#######################
# System configuration:
#######################
hostname="freebsd"
kld_list="fusefs ipsec ng_l2tp cuse"   (ref:rc-conf-kld-list)
syslogd_flags="-ss"
# Set dumpdev to "AUTO" to enable crash dumps, "NO" to disable
dumpdev="NO"
devmatch_blocklist="if_iwm if_iwlwifi" (ref:rc-conf-blacklist)
#+end_src

- In the line [[(rc-conf-kld-list)]] I load some kernel modules: the =fusefs= and
  the =cuse= modules. The first is necessary to work with [[https://en.wikipedia.org/wiki/Filesystem_in_Userspace][userspace
  filesystems]]. And the second is necessary for webcamd to operate with my
  web-camera. Also, for some experiments with [[https://en.wikipedia.org/wiki/Layer_2_Tunneling_Protocol][L2TP]] I load =ipsec= and =ng_l2tp=
  modules.
- And in the line [[(rc-conf-blacklist)]] I blacklisted modules for FreeBSD WiFiÂ â€”
  because I use [[https://man.freebsd.org/cgi/man.cgi?query=wifibox&apropos=0&sektion=8&manpath=freebsd-ports&format=html][wifibox(8)]], all FreeBSD related wireless networking shouldn't
  interfere with it.

The daemons' configuration also populated by =bsdinstaller=:

#+begin_src shell -n 28 -r :tangle rc.conf.txt :noweb yes
#########################
# Services configuration:
#########################
ntpd_sync_on_start="YES"
moused_nondefault_enable="NO"
webcamd_0_flags="-d ugen0.5"  (ref:rc-conf-webcamd-conf)
vm_dir="zfs:hdd/vms"          (ref:rc-conf-vm-conf)
#+end_src

Here I just added an option for =webcamd= to use only specified device as a my
web-camera ([[(rc-conf-webcamd-conf)]]), as written [[https://docs.freebsd.org/en/books/handbook/multimedia/index.html#webcam-setup][in documentation]]. And
specified the separate ZFS pool on the thirdt HDD to use for my VMs.

* /etc/sysctl.conf
:PROPERTIES:
:CUSTOM_ID: etc-sysctl-conf
:END:

The last main configuration file is a =/etc/sysctl.conf= with various system
variables.

The first section in my file is just a kernel-related settings:

#+begin_src shell -n -r :tangle sysctl.conf.txt
##################
# Kernel settings:
##################
kern.geom.label.disk_ident.enable="0"
kern.geom.label.gptid.enable="0"
kern.randompid=1
kern.coredump=0
kern.corefile=/dev/null
kern.vt.enable_bell=0
# Make desktop more responsive under high CPU load:
kern.sched.preempt_thresh=224
# Prevent shared memory from being swapped to disk:
kern.ipc.shm_use_phys=1
#+end_src

Aside from the first lines added by the =bsdinstaller= and the commented lines,
there are the following settings:
- Coredumps are disabled
- Bell on the console is also disabled.

The next section in the file is hardware-specific:

#+begin_src shell -n 14 -r :tangle sysctl.conf.txt
###################
# Hardware setings:
###################
hw.psm.trackpoint.sensitivity=150   (ref:sysctl-conf-trackpoint)
hw.psm.trackpoint.upper_plateau=125
hw.syscons.bell=0
# Enable sleep:
hw.pci.do_power_suspend=0           (ref:sysctl-conf-suspend)
hw.pci.do_power_nodriver=1
hw.acpi.lid_switch_state=S3
hw.acpi.sleep_button_state=S3
# Override ACPI coretemp values:
hw.acpi.thermal.user_override=1     (ref:sysctl-conf-acpi-thermal)
hw.acpi.thermal.tz0._PSV=80C
hw.acpi.thermal.tz1._PSV=80C
#+end_src

Here are my specific trackpoint sensivity values, starting at
lineÂ [[(sysctl-conf-trackpoint)]]. I chose these numbers experimentally, to get
the best user experience.

The four lines starting atÂ [[(sysctl-conf-suspend)]], configure the suspend
behavior for my laptop. The first two lines are from the FreeBSD forum. They
make my peripherals (especially the PCI Express card with USB3.0 ports in it)
work properly after the laptop wakes up. The last two lines tell the OS to go
to S3 state when I close the lid or press the sleep key (Fn+F4 on my Thinkpad
X220).

The three lines from [[(sysctl-conf-acpi-thermal)]] line are the *DANGEROUS* ones!
The first allows you to override thermal protections for the laptop. So, if
you configure something wrong, the laptop might meltðŸ« . The next two lines
lower the default temperature to disable the passive coolingÂ â€” the defaults
were set to 90Â°C, which is too high for me.

The next few lines are filesystem specific settings. Most of these are also
set by =bsdinstaller=.

#+begin_src shell -n 29 -r :tangle sysctl.conf.txt
###############
# VFS settings:
###############
vfs.usermount=1            (ref:sysctl-conf-usermount)
vfs.read_max=128
vfs.zfs.min_auto_ashift=12 # 4 KB blocks
# Increase ZFS transaction timeout to save battery
vfs.zfs.txg.timeout="10"   (ref:sysctl-conf-zfs-timeout)
#+end_src

I just made the following changes:
- Allow user to mount filesystems in line [[(sysctl-conf-usermount)]]. Since I'm
  the only one user of my laptop, I obviously allow myself to mount
  filesystems from various USB drives, SD cards, etc.
- The line [[(sysctl-conf-zfs-timeout)]] I took from the someone's blog. I can't
  say that it significantly increases the battery life of the laptop...

The next lines are not written by meÂ â€” I took them from [[https://www.sacredheartsc.com/blog/freebsd-14-on-the-desktop/][this blogpost]]:

#+begin_src shell -n 37 -r :tangle sysctl.conf.txt
#############################
# Network performance tuning:
#############################
kern.ipc.maxsockbuf=2097152
kern.ipc.soacceptqueue=1024
kern.ipc.somaxconn=1024
net.inet.tcp.abc_l_var=44
net.inet.tcp.cc.abe=1
net.inet.tcp.cc.algorithm=htcp
net.inet.tcp.cc.htcp.adaptive_backoff=1
net.inet.tcp.cc.htcp.rtt_scaling=1
net.inet.tcp.ecn.enable=1
net.inet.tcp.fast_finwait2_recycle=1
net.inet.tcp.fastopen.server_enable=1
net.inet.tcp.finwait2_timeout=5000
net.inet.tcp.initcwnd_segments=44
net.inet.tcp.keepcnt=2
net.inet.tcp.keepidle=62000
net.inet.tcp.keepinit=5000
net.inet.tcp.minmss=536
net.inet.tcp.msl=2500
net.inet.tcp.mssdflt=1448
net.inet.tcp.nolocaltimewait=1
net.inet.tcp.recvbuf_max=2097152
net.inet.tcp.recvspace=65536
net.inet.tcp.sendbuf_inc=65536
net.inet.tcp.sendbuf_max=2097152
net.inet.tcp.sendspace=65536
net.local.stream.recvspace=65536
net.local.stream.sendspace=65536
#+end_src

The next lines were added when I was experimenting with sleep on my
librebooted laptop. I couldn't get it to work properlyÂ â€” the laptop still
sometimes overheats and shuts down due to ACPI temperature protection.

#+begin_src shell -n 67 -r :tangle sysctl.conf.txt
####################################################
# Switch virtual consoles back and forth on suspend:
####################################################
kern.vt.suspendswitch=0
hw.acpi.sleep_delay=0
hw.acpi.verbose=1
#+end_src

After librebooting my laptop and suddenly finding that my RTC battery is
deadÂ â€” I force the kernel to save system time to the RTC on system shutdown:

#+begin_src shell -n 73 -r :tangle sysctl.conf.txt
#######################
# Save datetime to RTC:
#######################
machdep.disable_rtc_set=0
#+end_src

Of course, I replaced the dead battery with the new one, but because I'm using
the laptop in the places where the Internet may not existsÂ â€” I'm really
dependent on the right time value from the RTC chip.

* X Window System
:PROPERTIES:
:CUSTOM_ID: x-window-system
:END:

I still use the X server in all my computers because â€¦ it just works and
requires minimal or no configuration itself (unless you need very special
features). I read a lot of comments on Reddit where people blame the X server
for requiring manual configuration, problems with video output, freezes,
crashes, and so on. But I have never experienced such problems with my Radeon,
NVidia and Intel integrated cards. The last time I was forced to configure X
server by hand was almost 2006-2007[fn:slackware]. The problems usually came with
video drivers in the extremely customized systems, like Gentoo with a custom
kernel and FreeBSD on the machine with a soldered-on 2K expansion board and 2K
display.

On my BSD box I have these lines in
=/usr/local/etc/X11/xorg.conf.d/10-intel.conf= to get the nice transparency and
other effects with picom:
#+begin_src nil -r -n :tangle 10-intel.conf.txt
Section "Device"
    Identifier  "Card0"
    Driver      "intel"
    BusID       "PCI:0:2:0"
    Option      "Accel"        "true"
    Option      "AccelMethod"  "SNA"
    Option      "DRI"          "3"
    Option      "TearFree"     "true"
EndSection

Section "Module"
    Load        "dri3"
EndSection
#+end_src

Sometimes I use an external IBMÂ MU29J ball mouse with two buttons:

#+begin_export html
<p>
    <img alt="IBM black ball mouse" style="height: 100%; width: 100%;
        object-fit: cover" src="/assets/images/uses/mouse.jpg"/>
</p>
#+end_export

So I added the next configuration for the X server to
=/usr/local/etc/X11/xorg.conf.d/20-ibm.conf=. This allows me to press the left
and right buttons at the same time to simulate pressing the middle button.

#+begin_src nil -r -n :tangle 20-ibm.conf.txt
Section "InputClass"
    Identifier "IBM MU29J Mouse"
    Driver "libinput"
    MatchDevicePath "/dev/input/event9"
    Option "MiddleEmulation" "on"
    Option "AccelProfile" "flat"
    Option "AccelSpeed" "1.0"
EndSection
#+end_src

The path =/dev/input/event9= is taken from =/var/log/Xorg.0.log=Â â€” it is printed
in this file after the mouse is connected.

The last custom configuration is a few lines to disable the touchpad when the
external mouse is connected and to send a click event when I tap on the
touchpad (it was disabled by default):

#+begin_src nil -r -n :tangle 30-touchpad.conf.txt
Section "InputClass"
    Identifier "X220 Touchpad"
    MatchIsTouchpad "on"
    MatchDevicePath "/dev/input/event*"
    Driver "libinput"
    Option "Tapping" "on"
    Option "SendEventsMode" "disabled-on-external-mouse"
EndSection
#+end_src

I saved it as =/usr/local/etc/X11/xorg.conf.d/30-touchpad.conf= and after
restarting the X server, my touchpad automatically disables when the IBM mouse
is connected.

* Power management
:PROPERTIES:
:CUSTOM_ID: power-management
:END:

To prolong life of the laptop when it's running on battery, I've just been
using the [[https://man.freebsd.org/cgi/man.cgi?powerd][powerd(8)]] (this line from the =/etc/rc.conf=):

#+name: powerd
#+begin_src shell -r
powerd_enable="YES"
#+end_src

All necessary configuration are also placed in the =/etc/rc.conf=:

#+begin_src shell -n 35 -r :tangle rc.conf.txt
######################
# Power configuration:
######################
powerd_flags="-a hiadaptive -b adaptive -i 75 -N -M 2000"
performance_cx_lowest="Cmax"
economy_cx_lowest="Cmax"
#+end_src

Here I just select the =hiadaptive= mode when the laptop is running on AC power
and the =adaptive= mode when it is running on battery. As described in the
powerd man page:

#+begin_example
hiadaptive  Like adaptive mode, but tuned for systems where performance
            and interactivity are more important than power consump-
            tion.  It increases frequency faster, reduces frequency
            less aggressively, and will maintain full frequency for
            longer.  May be abbreviated as hadp.
#+end_example

#+begin_example
adaptive    Attempt to strike a balance by degrading performance when
            the system appears idle and increasing it when the system
            is busy.  It offers a good balance between a small perfor-
            mance loss for greatly increased power savings.  May be ab-
            breviated as adp.
#+end_example

Then I slightly increase the CPU load percent level at which powerd will start
to degrade performance to save the battery power. The default was at 50% and I
set it to the 75%.

And I set the maximum frequency that powerd will use to 2Â GHz. Out of the box
my CPU can run at a maximum of 2.7Â GHz, but I don't need so much computation
power, so I keep it at 2Â GHz. The most CPU-intensive programÂ â€” Librewolf with
a YouTube video playing in a tabÂ â€” still works well with a 2Â GHz CPU.

But I don't like it when my CPU is too hot (close to 50-60Â°C) when I watch the
YouTube videos. So, in order to trade some silence for CPU temperature, I
install the [[https://github.com/claudiozz/bsdfan][bsdfan]] utility. This little thing allows me to tweak the
temperature levels at which the fan starts spinning.

This daemon starts with these simple lines in =/etc/rc.local=:
#+begin_src shell
#!/bin/sh

/usr/local/bin/bsdfan -d
#+end_src

And to stop the daemon on system shutdown, these lines were added to the
=/etc/rc.shutdown.local=:
#+begin_src shell
#!/bin/sh

/usr/bin/pkill bsdfan
#+end_src

I use the default configuration file, placed in the =/usr/local/etc/bsdfan.conf=
with tweaked values that I choose experimentally:
#+begin_src nil :tangle bsdfan.conf.txt
#Levels are defined with: level(level_number, level_min_temperature, level_max_temperature)
#level_number goes from 0 (fan not active) to 7 (fan at full speed)
#not all levels have to be used

#the first level 'level_min_temperature' must be equal to 0 and the last level 'level_max_temperature' must be >150
#please define levels in ascending order by level_number
#be careful

level (0,0,39)
level (1,38,46)
level (3,39,49)
level (4,44,51)
level (5,46,52)
level (7,49,32767)
#+end_src

* Networking
:PROPERTIES:
:CUSTOM_ID: networking
:END:

I have the two network interfaces on the laptop:
- =em0=Â â€” the Ethernet card
- =wlan0=Â â€” the WiFi card.

Speaking of Ethernet it's pretty easy to configure. Just ask the DHCP server
for the network configuration and do it in the background so the system
doesn't wait at boot time if it's not connected to any networks:

#+begin_src shell -n 41 -r :tangle rc.conf.txt
########################
# Network configuration:
########################
ifconfig_em0="DHCP"
ifconfig_em0_descr="Ethernet"
background_dhclient="YES"
background_dhclient_em0="YES"
defaultroute_delay="0"        (ref:rc-conf-route-delay)
#+end_src

LineÂ [[(rc-conf-route-delay)]] tells the system not to wait at boot while the
interface(s) are getting address(es) from DHCPÂ â€” it's also to speed up booting
when there are no networks.

The WiFi configuration is much trickier. Since I'm using an Intel 8260 WiFi
card[fn:8260], I can't (for now[fn:freebsd-wifi]) rely on the default FreeBSD
drivers if I want to use the new enough IEEEÂ 802.11 standards. So I start
using the [[https://github.com/pgj/freebsd-wifibox][wifibox]]:

#+name: wifibox
#+begin_src shell -r
wifibox_enable="YES"
#+end_src

The system-side configuration is quite simple, and copies the configuration
for the =em0= interface:

#+begin_src shell -n 49 -r :tangle rc.conf.txt
ifconfig_wifibox0_descr="WiFi (wifibox)"
ifconfig_wifibox0="SYNCDHCP"
background_dhclient_wifibox0="YES"
#+end_src

The configuration of the wifibox is well described in it's documentation and I
won't write about it here.

** USB tethering
:PROPERTIES:
:CUSTOM_ID: usb-tethering
:END:

After reading the FreeBSD Handbook for the nth time, I found a few sentences
about USB tethering.

Back in the days, then phones didn't have the "smart" prefix, I used the cable
to connect my laptop to the Internet with my phone. The setup looks like this:
- The phone connects to the Internet via the GPRS
- The laptop connects to the phone via the USB cable
- The driver in the OS (Linux) sees the phone as a usual modem (from the
  dial-up era, of course).
- Then the laptop can connect to the Internet via the =ppp=, just like in the
  old days of 56K.

Times have changed and now smartphones can share their Internet connection via
WiFi. I have used this feature for some time. It has some advantagesÂ â€” for
example, if the WiFi interface is already configured on the system, then the
user should just connect to the right AP with the right password as usual to
connect to the Internet. There are also some disadvantagesÂ â€” the WiFi AP is
visible to everyone and the radio transmission drains the batteries of both
the laptop and the phone.

So I decided to experiment with USB tethering on the modern system to extend
the battery life and reduce the EMR for my devices. I used the Android phone,
other phones should use the different kernel modules[fn:tethering-modules].

On the FreeBSD side, the configuration is simpleÂ â€” I've just added the next
lines to =/etc/rc.conf= and rebooted:
#+begin_src shell -n 52 -r :tangle rc.conf.txt
if_urndis_load="YES"
ifconfig_ue0="DHCP"
ifconfig_ue0_descr="Motorola Defy (tethering)"
#+end_src

On the phone side, the configuration is much easierÂ â€” just connect the phone
to the laptop with the USB cable and select "USB tethering" in the
notification area.

After that, the =dmesg= should show that the OS has recognized the device as a
USB Ethernet peripheral:
#+begin_example
ugen1.2: <unknown TrebleDroid vanilla> at usbus1
ugen1.2: <unknown TrebleDroid vanilla> at usbus1 (disconnected)
ugen1.2: <unknown TrebleDroid vanilla> at usbus1
urndis0 on uhub0
urndis0: <unknown TrebleDroid vanilla, class 0/0, rev 2.00/4.19, addr 1> on usbus1
ue0: <USB Ethernet> on urndis0
ue0: Ethernet address: 16:b5:c1:e6:61:58
#+end_example

Then, to establish the connection through the new interface, the following
commands can be issued:
#+begin_example
# service netif restart ue0
# service dhclient restart ue0
#+end_example

I wrote a simple script to connect over the phone without typing a lot of
commands:
#+begin_src shell :tangle phone-connect.sh.txt
#!/usr/bin/env zsh

if [ -f /usr/bin/x11-ssh-askpass ]; then
    export SUDO_ASKPASS="/usr/bin/x11-ssh-askpass"
elif [ -f /usr/local/bin/x11-ssh-askpass ]; then
    export SUDO_ASKPASS="/usr/local/bin/x11-ssh-askpass"
else
    exit 1
fi

case $(echo "disable wifi:phone connect:phone disconnect" | rofi -dpi 0 -dmenu -sep ":" -p "Select") in
    "disable wifi")
        sudo -A service wifibox stop
        ;;
    "phone connect")
        sudo -A service netif stop em0
        sudo -A service wifibox stop
        sudo -A service netif restart ue0
        sudo -A service dhclient restart ue0
        ;;
    "phone disconnect")
        sudo -A service netif restart
        sudo -A service wifibox restart
        sudo -A service dhclient restart em0
        sudo -A service dhclient restart wifibox0
        ;;
esac
#+end_src

This code displays a rofi menu with the three items and runs the appropriate
commands with sudo. The sudo will ask for a password using the askpass facility and
then execute the necessary set of commands to enable/disable network
interfaces.

* Storage
:PROPERTIES:
:CUSTOM_ID: storage
:END:

Let's review my storage-specific configuration. As you can see from the [[*
 /etc/rc.conf][/etc/rc.conf]] section, I'm using the [[https://man.freebsd.org/cgi/man.cgi?query=autofs&sektion=5&format=html][autofs(5)]] to automount the removable USB
drives with the next (default) configuration in the =/etc/auto_master=:
#+begin_example
#
# Automounter master map, see auto_master(5) for details.
#
/net		-hosts		-nobrowse,nosuid,intr
# When using the -media special map, make sure to edit devd.conf(5)
# to move the call to "automount -c" out of the comments section.
/media		-media		-nosuid
#+end_example

As you can see from the output of the =zpool status zroot= command at the top of
the postÂ â€” I am using two disks in a pool for the root filesystem. Some data
is written to the 500Â Gb SSD and some is written to the 150Â Gb SSD:
#+begin_example
# zpool iostat -v zroot
                capacity     operations     bandwidth
pool          alloc   free   read  write   read  write
------------  -----  -----  -----  -----  -----  -----
zroot         97.1G   482G     59     17  6.26M   622K
  ada0p3.eli  35.3G  99.7G     21      7  2.26M   231K
  ada2p3.eli  61.9G   382G     38     10  3.99M   391K
------------  -----  -----  -----  -----  -----  -----
#+end_example

There is no redundancyÂ â€” if one disk fails, the entire root filesystem
fails. So backups a very important to me.

ZFS comes to the rescue here! To make a snapshot of the root filesystem, I use
the next command (after the =@= symbol you can add any string you like, usually
the timestamp):
#+begin_example
# zfs snapshot -r zroot@2025-03-09
#+end_example

To check which snapshot was created, I use the next command for the =zroot=
mounted on the =/=:
#+begin_example
% s ls -ls /.zfs/snapshot
total 255
17 drwxr-xr-x  20 root wheel   26B Jun 26  2024 2024-06-26-21:56:36-0/
17 drwxr-xr-x  20 root wheel   26B Jun 26  2024 2024-06-26-22:36:03-0/
17 drwxr-xr-x  20 root wheel   26B Jun 26  2024 2024-06-26-22:39:36-0/
17 drwxr-xr-x  20 root wheel   26B Jun 27  2024 2024-06-26-22:48:38-0/
17 drwxr-xr-x  20 root wheel   26B Aug 23  2024 2024-08-23-17:11:49-0/
17 drwxr-xr-x  20 root wheel   26B Sep  5  2024 2024-09-05-08:32:00-0/
17 drwxr-xr-x  20 root wheel   26B Oct 10 10:29 2024-10-10-10:58:23-0/
17 drwxr-xr-x  22 root wheel   28B Oct 30 20:09 2024-10-30-21:48:22-0/
17 drwxr-xr-x  22 root wheel   28B Jan 26 14:59 2025-01-26-17:15:24-0/
17 drwxr-xr-x  22 root wheel   28B Jan 26 17:17 2025-01-26-17:18:53-0/
17 drwxr-xr-x  22 root wheel   28B Feb  4 21:18 2025-02-04-21:20:58-0/
17 drwxr-xr-x  22 root wheel   28B Feb 10 01:32 2025-02-10-02:16:57-0/
17 drwxr-xr-x  22 root wheel   28B Feb 25 00:30 2025-02-25-00:45:45-0/
17 drwxr-xr-x  22 root wheel   28B Mar  9 10:40 2025-03-09/
17 drwxr-xr-x  21 root wheel   27B Oct 27 01:45 backup_recursive_2024-10-27/
#+end_example

As you can see, there are a lot of outdated backups, mostly created by the
=freebsd-update= utility. I remove them with the =zfs destroy= command:
#+begin_example
# zfs destroy -R zroot@backup_recursive_2024-10-27
# zfs destroy -R zroot/ROOT/default@2024-06-26-21:56:36-0
# zfs destroy -R zroot/ROOT/default@2024-06-26-22:36:03-0
# zfs destroy -R zroot/ROOT/default@2024-06-26-22:39:36-0
...
#+end_example

After that, the only one (current) snapshot remains in the system:
#+begin_example
# zfs list -r -t snapshot
NAME                            USED  AVAIL  REFER  MOUNTPOINT
zroot@2025-03-09                  0B      -    96K  -
zroot/ROOT@2025-03-09             0B      -    96K  -
zroot/ROOT/default@2025-03-09     0B      -  43.6G  -
zroot/home@2025-03-09             0B      -  49.9G  -
zroot/tmp@2025-03-09              0B      -   224K  -
zroot/usr@2025-03-09              0B      -    96K  -
zroot/usr/ports@2025-03-09        0B      -  2.65G  -
zroot/usr/src@2025-03-09          0B      -   857M  -
zroot/var@2025-03-09              0B      -    96K  -
zroot/var/audit@2025-03-09        0B      -   360K  -
zroot/var/crash@2025-03-09        0B      -    96K  -
zroot/var/log@2025-03-09          0B      -  3.93M  -
zroot/var/mail@2025-03-09         0B      -   576K  -
zroot/var/tmp@2025-03-09          0B      -   104K  -
# ls -ls /.zfs/snapshot
total 17
17 drwxr-xr-x  22 root wheel   28B Mar  9 10:40 2025-03-09/
#+end_example

Restoring from this snapshot can be done with the:
#+begin_example
# zfs rollback zroot@2025-03-09
#+end_example

Snapshot can also be sent anywhere with the:
#+begin_example
# zfs send zroot@2025-03-09 | send_it_somewhere
#+end_example

or:

#+begin_example
# zfs send zroot@2025-03-09 > /backup/2025-03-09-zroot.snap
#+end_example

To check the health of my disks and to verify the checksums of the files in my
pools, here are the next set of commands:
#+begin_example
 $ zpool status -x
all pools are healthy
# zpool scrub zroot
# zpool scrub hdd
#+end_example

The last two commands start a lot of heavy I/O operations, so don't launch
them if the system is already using the disks intensively! Estimates and
results of the scrubbing operation can be viewed using the =zpool status=
command.

The FreeBSD Handbook recommends launch scrubbing at least once a month.

* Fingerprint scanner
:PROPERTIES:
:CUSTOM_ID: fingerprint-scanner
:END:

Some day, some time, I decided to configure fingerprint scanner on my
laptop. Many years ago I wrote an article about libfprint for IBM Portal, so I
thought that setting up fingerprint service will not be so difficult.

#+CAPTION: Thinkpad X220 fingerprint scanner
#+ATTR_HTML: :align center :alt fingerprint scanner with turned on green LED on the left :width 50%
[[file:fingerprint_scanner.jpg]]

As a starting documentation I take the next blog post:
https://hauweele.net/~gawen/blog/?p=408 and slightly modify some steps to fit
them to my system:

1. First, I install all the necessary packages:
   #+begin_example
   pkg install fprintd libfprint
   #+end_example
2. Then, I add my user to the =fprint= group to access the scanner device
   without elevating to root:
   #+begin_example
   pw groupadd fprint
   pw groupmod fprint -m drag0n
   #+end_example
3. To get the correct permissions on the device file itself, I play with
   =devd=Â â€” create the file =/usr/local/etc/devd/fingerprint.conf= and add the
   following lines:
   #+begin_example
   notify 100 {
       match "system"      "USB";
       match "subsystem"   "DEVICE";
       match "type"        "ATTACH";
       match "vendor"      "0x147e";
       match "product"     "0x2016";
       action "chown drag0n:fprint /dev/$cdev && chmod 660 /dev/$cdev";
   };
   #+end_example

   After that I reboot the system to apply the new settings.
4. Then, I ran into the D-Bus-related problemsðŸ¤®. The =libfprint= utilities
   communicate with the daemon via D-Bus and my user can't connect to the
   daemon via it.

   I don't use D-Bus in my systemÂ â€” I only have it to work with the [[https://dunst-project.org/][dunst
   notification daemon]]. There is a lightweight replacement for the big
   notification daemons of a large desktop environments, which I obviously
   don't use either. It works fine for me out of the box.

   But it is not a case of =libfprint= utilities. So I've added the next lines
   to =/usr/local/share/dbus-1/system.d/net.reactivated.Fprint.conf=:

   #+begin_example
   <policy user="drag0n">
     <allow own="net.reactivated.Fprint"/>
   </policy>
   #+end_example
5. And finally it's time to use fingerprints instead of passwords! Because I'm
   a bit paranoid, I don't want to use fingerprints instead of a login
   password or any other high-value passwords (like a password to unlock a GPG
   key). Obviously, if I do that, then /some/ bad actors can forcibly roll my
   finger on the scanner and get access to my system.

   So, I decide to use fingerprint instead of password only with =sudo=. If I'm
   already logged in and someone catches me and forcibly rolls my fingerÂ â€”
   then I'm *already* /sooo fucked up/ before that event!

   To use the fingerprint scanner with =sudo=, I've just added this line to the
   top of the file =/usr/local/etc/pam.d/sudo=:

   #+begin_example
   auth       sufficient  /usr/local/lib/security/pam_fprintd.so
   #+end_example
6. Finally, I soft reboot the system with =reboot -r= and enroll my finger with
   the =sudo fprintd-enroll drag0n= command. To verify that the finger was
   successfully scanned, I killed the =fprintd= daemon and verified the finger
   with the =fprintd-verify= command.

Now, =sudo= asks me for my finger first and then asks for the password after
three failed attempts to get a proper fingerprint:
#+begin_example
~ % sudo uname
Swipe your right index finger across the fingerprint reader
Your finger was not centered, try swiping your finger again
FreeBSD
#+end_example

* Files to download
:PROPERTIES:
:CUSTOM_ID: files-to-download
:END:

- [[file:loader.conf.txt][/boot/loader.conf]]
- [[file:rc.conf.txt][/etc/rc.conf]]
- [[file:sysctl.conf.txt][/etc/sysctl.conf]]
- [[file:10-intel.conf.txt][/usr/local/etc/X11/xorg.conf.d/10-intel.conf]]
- [[file:20-ibm.conf.txt][/usr/local/etc/X11/xorg.conf.d/20-ibm.conf]]
- [[file:30-touchpad.conf.txt][/usr/local/etc/X11/xorg.conf.d/30-touchpad.conf]]
- [[file:bsdfan.conf.txt][/usr/local/etc/bsdfan.conf]]
- [[file:phone-connect.sh.txt][phone-connect.sh]]

* Notes
:PROPERTIES:
:CUSTOM_ID: notes
:END:

[fn:modesetting-wiki] https://en.wikipedia.org/wiki/Mode_setting
[fn:dtrace-internal] For example, it is possible to call =panic()= via DTrace.
[fn:slackware] In these times I used Slackware (MOPSLinux) and =Xconfigure=
generates wrong =/etc/X11/xorg.conf= for my AGP video card and CRT monitor, so I
was forced to write it by hands with proper monitor description and
proprietary driver's section included.

https://eugene-andrienko.com/en/it/2024/01/02/life-in-console
[fn:8260] TL-8260D2W
[fn:freebsd-wifi] [[https://freebsdfoundation.org/blog/why-laptop-support-why-now-freebsds-strategic-move-toward-broader-adoption/][Why laptop support, why now: FreeBSDâ€™s strategic move toward
broader adoption]]
[fn:tethering-modules] See the documentation:
https://docs.freebsd.org/en/books/handbook/advanced-networking/#network-usb-tethering
