* TOC

- [[* Introduction][Introduction]]
- [[* File hierarchy description][File hierarchy description]]
- [[* How to write articles][How to write articles]]
  - [[* Article header][Article header]]
  - [[* File/image include][File/image include]]
  - [[* Footnotes][Footnotes]]
  - [[* Online videos][Online videos]]
- [[* How to build blog][How to build blog]]
- [[* How articles' conversion works][How articles' conversion works]]
- [[* How to deploy blog][How to deploy blog]]
- [[* Preview blog locally][Preview blog locally]]
- [[* Clean][Clean]]

*NOTE:* Some links and all footnotes are broken when you view this file from
GitHub. Because GitHub doesn't support OrgMode completely.

* Introduction

This =README.org= written in «literal programming» paradigm. It generates all
necessary scripts and files to build my blog with next commands (press =C-c C-c=
inside the code block below):
#+begin_src bash :results silent raw
  mkdir -p internals/scripts
  emacs README.org --batch -f org-babel-tangle --kill
  sed -i -r 's/^ {8}/\t/g' Makefile
#+end_src

There are some repositories and programs, which should be pulled inside
=./internals= catalog before we start. It can be do via next command:
#+begin_src bash :results silent raw
  make init
#+end_src

After you call this command — initialized and properly configured Jekyll site
will be pulled to =./internals/jekyll= from
[[https://github.com/eugeneandrienko/eugeneandrienko.github.io][eugeneandrienko/eugeneandrienko.github.io]] repository. And additional
templates/filters for Pandoc will be pulled to =./internals/pandoc-jekyll= from
[[https://github.com/eugeneandrienko/pandoc_jekyll][eugeneandrienko/pandoc-jekyll]] repository:

#+name: init4makefile
#+begin_src makefile
  JEKYLL = internals/jekyll
  PANDOC_JEKYLL = internals/pandoc_jekyll
  .PHONY: init
  init:
          mkdir -p $(JEKYLL)
          mkdir -p $(PANDOC_JEKYLL)
          cd $(JEKYLL) && \
          git clone git@github.com:eugeneandrienko/eugeneandrienko.github.io.git . && \
          bundle update --bundler
          cd $(PANDOC_JEKYLL) && \
          git clone git@github.com:eugeneandrienko/pandoc_jekyll.git .
#+end_src

The main goal all of these machinery — separate articles itself from different
blogging engines/platforms/etc. At this level I want to have my articles
*incapsulated* and *independent* from CSS, Jekyll, fonts, Markdown or other
uninteresting things.

You can write articles in OrgMode syntax and its will automatically converted
to markdown and then to html — as posts for static blog.

Used programs:
- pandoc
- jekyll
- bundle
- make

* File hierarchy description

Articles written as Org Mode files. These files lies in =./articles= catalog
with the structure described below.

Every subcatalog in =./articles= is a separate /category/. For example, we have
next categories:
#+begin_example
articles % tree -L 1
./
├── arms/
├── cycling/
├── it/
├── leatherwork/
└── photo/
#+end_example

In every /category/-catalog there are set of catalogs — one catalog per
article. These article-catalogs should have name in next format:
- =YYYY-MM-DD-article-name= :: Catalog for published article. These articles can
  be previewed with =make serve= command. Its also can be published in the blog.
- =draft-article-name= :: Catalog for draft article. These articles can be
  previewed with =make serve-draft= command. And never be published.
- =hidden-article-name= ::  Catalog for hidden article. This articles will never
  be previewed and published.

For example:
#+begin_example
articles/it % tree -L 1
./
├── 2020-09-09-thinkpad-x220-freebsd/
├── draft-palm-tung-e2-archaeological/
├── draft-palm-tung-e2-ressurection/
└── hidden-wexler-7001/
#+end_example

Inside every catalog there should be set of images and other static files,
related to article. And =article.org= file with article itself. For example:
#+begin_example
articles/it/draft-palm-tung-e2-ressurection % tree -L 1
./
├── article.org
├── P1283929.jpg
├── P1283931.jpg
├── palm-2031-problem.png
├── palm-menu-hotkeys.png
└── tiktok.png
#+end_example

* How to write articles

Articles written in [[https://orgmode.org/manuals.html][OrgMode syntax]]. You can use all OrgMode directives, either
tables and footnotes.

** Article header

There are next properties, which can be in article header:

- =#+TITLE:= :: Title of article.
- =#+DATE:= :: Date and time of publication. It should be in =YYYY-MM-DD HH:MM=
  format.
- =#+TAGS:= :: Space-separated list of tags (optional).
- =#+COVER:= :: Cover image (optional).

These properties *should be supported* by the underlying machinery.

Example of article header, where cover image has the =header.jpg= name and lies
in the same catalog as =article.org= file:
#+begin_src org
  ,#+TITLE: Sample title
  ,#+DATE: 2023-11-22 22:22
  ,#+COVER: header.jpg
  ,#+TAGS: tag1 tag2
#+end_src

** File/image include

Files or images should be lie in the same catalog as for =article.org=.

You can insert images in next ways:
1. Without caption:
   #+begin_src org
     ,#+ATTR_RST: :alt alternative text for accessibility :width 50% :align center
     [[file:filename.jpg]]
   #+end_src
2. With caption:
   #+begin_src org
     ,#+CAPTION: Your caption for filename.jpg
     ,#+ATTR_RST: :align center :alt alternative text for accessibility
     [[file:filename.jpg]]
   #+end_src

*** JS carousel for multiple images

You can use nice JS carousel to display multiple images at one point (thanks
for [[http://kenwheeler.github.io/slick/][Slick carouse]]l).

Carousel can be described like this:
#+begin_src org
  ,#+begin_export json
  {"gallery":
      {"gallery-name": "some-gallery",
       "gallery-items": [["picture1.jpg", "thumb1.jpg"],
                         ["picture2.jpg"],
                         ["picture3.jpg", "thumb3.jpg"]]}}
  ,#+end_export
#+end_src

Identifier =some-gallery= should be unique for every carousel.

** Footnotes

Link to footnote can be inserted like this:
#+begin_src org
  [fn:footnote-id]
#+end_src

The footnote text should be inserted to the end of article, like this:
#+begin_src org
  [fn:footnote-id] Footnote text
#+end_src

** Online videos

Online videos, for example from YouTube, can be inserted in next way:
#+begin_src org
  ,#+begin_src markdown
    ![](https://www.youtube.com/watch?v=dQw4w9WgXcQ)
  ,#+end_src
#+end_src

* How to build blog

All actions can be complete with =Makefile= from root catalog of blog. This
=Makefile= you can use in next ways:
- =make= :: Show help
- =make build= :: Build blog with articles, ready to publish.
- =make serve= :: Start local server at =http://127.0.0.1:8000= with articles
  ready to publish.
- =make drafts= :: Build blog and start local server with published and draft
  articles.
- =make clean= :: Clean cache and generated markdown articles from blog.

#+name: help4makefile
#+begin_src makefile
  all:
          @echo "Available commands:"
          @echo ""
          @echo -e "\tmake — show this help message"
          @echo -e "\tmake build — build blog with articles, ready to publish"
          @echo -e "\tmake serve — start local server with published articles at 127.0.0.1:8000"
          @echo -e "\tmake deploy — deploy blog via git"
          @echo -e "\tmake drafts — build blog with published and draft articles, and start local server at 127.0.0.1:8000"
          @echo -e "\tmake clean — clean cache and generated markdown articles"
          @echo ""
#+end_src

* How articles' conversion works
:PROPERTIES:
:header-args: :noweb yes
:END:
Of course, most of the static-site engines do not support OrgMode files syntax
(for reasons unknown to me). So, we need to convert our nice and shiny
org-file to somewhat another format.

To make conversion just type =make build= in you console. This triggers the next
action:
#+begin_src makefile :tangle Makefile
  <<help4makefile>>

  CONVERSION_SCRIPT = ./internals/scripts/articles-bake-jekyll.sh
  .PHONY: build
  build: $(CONVERSION_SCRIPT)
          $(CONVERSION_SCRIPT)
          cp README.org $(JEKYLL)
          cd $(JEKYLL) && bundle exec jekyll build

  <<init4makefile>>
#+end_src

This code just call the script, defined in =CONVERSION_SCRIPT= variable. For
every static-site engine we can have different conversion scripts:

** Jekyll
:PROPERTIES:
:header-args: :tangle internals/scripts/articles-bake-jekyll.sh
:END:
For Jekyll I use Pandoc and bunch of regexes to create a proper =*.md= file.

We take every published article, even drafts if option =--drafts= is given:
#+begin_src bash :shebang "#!/usr/bin/env bash"
  ARTICLES="./articles/"
  POSTS="./internals/jekyll/_posts"
  STATIC="./internals/jekyll/assets/static"

  PROCESS_DRAFTS="false"
  if [ "$1" == "--drafts" ]; then
      PROCESS_DRAFTS="true"
  fi

  for article in $(find "$ARTICLES" -type f -name article.org); do
      IS_DRAFT_ARTICLE="false"
      echo "$article" | grep -q 'articles/.\{1,\}/[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}-.\{1,\}/article.org'
      if [ "$?" -ne "0" ]; then
          if [ "$PROCESS_DRAFTS" = "true" ]; then
              echo "$article" | grep -q 'articles/.\{1,\}/draft-.\{1,\}/article.org'
              if [ "$?" -ne "0" ]; then
                  continue
              else
                  IS_DRAFT_ARTICLE="true"
              fi
          else
              continue
          fi
      fi
#+end_src

And read metadata from it:
#+begin_src bash
  CATEGORY=$(echo "$article" | sed -r 's!\./articles/([a-z0-9]+)/.+\.org!\1!g')
  FILENAME=$(echo "$article" | sed -r 's!\./articles/[a-z0-9]+/(.+)/article\.org!\1!g')
  FILEPATH=$(dirname "$article")
#+end_src

Make some adjustments in temporary copy of article. Maybe it can be done with
Pandoc, but /faster/ — to do it via shell:
#+begin_src bash
  sed -r 's!file:(.+)!file:/assets/static/\1!g' "$article" > "$FILEPATH"/"$FILENAME".org
#+end_src

After that we successfully convert our article from shiny OrgMode syntax to
Markdown:
#+begin_src bash
  pandoc -s "$FILEPATH"/"$FILENAME".org -t json | \
      java -jar internals/pandoc_jekyll/target/pandoc_jekyll-1.0-SNAPSHOT-shaded.jar | \
      pandoc -s -f json -t gfm --shift-heading-level-by=1 -M category:"$CATEGORY" \
             --template=internals/pandoc_jekyll/jekyll.gfm \
             -o "$FILEPATH"/"$FILENAME".md
  rm -f "$FILEPATH"/"$FILENAME".org
#+end_src

We need to fix filepaths from =file:///filename= to =/filename= in generated
Markdown file:
#+begin_src bash
  sed -i -r 's!(.*)file://(.*)!\1\2!g' "$FILEPATH"/"$FILENAME".md
#+end_src

After all that suffering move prepared article to =_posts/= and all related static
files to =assets/static=:
#+begin_src bash
  if [ "$IS_DRAFT_ARTICLE" = "false" ]; then
      mv "$FILEPATH"/"$FILENAME".md "$POSTS"/"$FILENAME".md
  else
      mv "$FILEPATH"/"$FILENAME".md "$POSTS"/"$(date +%Y-%m-%d)-$FILENAME".md
  fi
  find "$FILEPATH" -type f -not -name article.org -exec cp {} "$STATIC" \;
  done
#+end_src

* How to deploy blog
:PROPERTIES:
:header-args: :tangle Makefile
:END:
I made deployment as simple as I can. Just type =make deploy= and write commit
message. After that your changes will be pushed to git server (for example GitHub):
#+begin_src makefile
  .PHONY: deploy
  deploy: all
          cd $(JEKYLL) && \
          git add _posts/ assets/ && \
          git commit && \
          git push
#+end_src

When branch =master= on GitHub blog's repository is changed — the CloudFlare
catches it and begin to build html and other Web 2.0 things from our Jekyll
sources. If it is succeded — blog files will be deployed and become available
at https://eugene-andrienko.com.

You can setup your own git server and point your http server to catalog with
repository contents (*not* to /bare/ git repository!)

From the bird's-eye our deployment process has next steps:
1. Run =make build= to convert published articles to HTML for static blog.
2. Run =make deploy= to push changes to GitHub.
3. Wait while triggered Cloudflare build and deploy blog.

* Preview blog locally
To preview your published articles you can start local server via the =make serve= command:
#+begin_src makefile :tangle Makefile
  .PHONY: serve
  serve:
          find articles/ -type f -name '*.org' | entr -rspn '$(CONVERSION_SCRIPT)' &
          cd $(JEKYLL) && \
          bundle exec jekyll serve
          pkill entr
#+end_src

To preview published *and* draft articles you can start local server with =make drafts= command:
#+begin_src makefile :tangle Makefile
  .PHONY: drafts
  drafts: $(CONVERSION_SCRIPT) clean
          $(CONVERSION_SCRIPT) --drafts
          find articles/ -type f -name '*.org' | entr -rspn '$(CONVERSION_SCRIPT) --drafts' &
          cd $(JEKYLL) && \
          bundle exec jekyll serve
          pkill entr
#+end_src

In both cases =entr= will be used to regenerate Markdown files from OrgMode
files if last was changed. Renewed Markdown file will be automatically
regenerated to HTML by Jekyll.

* Clean
To clear generated files before blog regeneration — you can use =make clean=:
#+begin_src makefile :tangle Makefile
  .PHONY: clean
  clean:
          cd $(JEKYLL) && \
          bundle exec jekyll clean && \
          rm -f _posts/*.md
#+end_src

This can be useful to clear draft articles from static blog directories before
published articles regeneration.
