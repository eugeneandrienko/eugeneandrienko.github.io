*NOTE:* Some links and all footnotes are broken when you view this file from
GitHub. Because GitHub doesn't support OrgMode completely.

This =README.org= written in «literal programming» paradigm. It generates all
necessary scripts and files to build my blog with next commands (press =C-c C-c=
inside the code block below):
#+begin_src bash :results silent raw
  mkdir -p internals/scripts
  emacs README.org --batch -f org-babel-tangle --kill
  sed -i -r 's/^ {8}/\t/g' Makefile
#+end_src

There are some repositories and programs, which should be pulled inside
=./internals= catalog before we start. It can be do via next command:
#+begin_src bash :results silent raw
  make init
#+end_src

After you call this command — initialized and properly configured Jekyll site
will be pulled to =./internals/jekyll= from
[[https://github.com/eugeneandrienko/eugeneandrienko.github.io][eugeneandrienko/eugeneandrienko.github.io]] repository. And additional
templates/filters for Pandoc will be pulled to =./internals/pandoc-jekyll= from
[[https://github.com/eugeneandrienko/pandoc_jekyll][eugeneandrienko/pandoc-jekyll]] repository.

#+name: init4makefile
#+begin_src makefile
  JEKYLL = internals/jekyll
  PANDOC_JEKYLL = internals/pandoc_jekyll
  .PHONY: init
  init:
          mkdir -p $(JEKYLL)
          mkdir -p $(PANDOC_JEKYLL)
          cd $(JEKYLL) && \
          git clone git@github.com:eugeneandrienko/eugeneandrienko.github.io.git .
          cd $(PANDOC_JEKYLL) && \
          git clone git@github.com:eugeneandrienko/pandoc_jekyll.git .
#+end_src

The main goal all of these machinery — separate articles itself from different
blogging engines/platforms/etc. At this level I want to have my articles
*incapsulated* and *independent* from CSS, Jekyll, fonts, Markdown or other
uninteresting things.

* How to write articles

Articles written as Org Mode files. These files lies in =./articles= catalog
with the structure described below.

Every subcatalog in =./articles= is a separate /category/. For example, now we
have next categories:
#+begin_example
articles % tree -L 1
./
├── arms/
├── cycling/
├── it/
├── leatherwork/
└── photo/
#+end_example

In every /category/-catalog there are set of catalogs — one catalog per
article. These article-catalogs should have name in next format:
- =YYYY-MM-DD-article-name= :: Catalog for published article
- =draft-article-name= :: Catalog for draft
- =hidden-article-name= ::  Catalog for hidden article

For example:
#+begin_example
articles/it % tree -L 1
./
├── 2020-09-09-thinkpad-x220-freebsd/
├── draft-palm-tung-e2-archaeological/
├── draft-palm-tung-e2-ressurection/
└── draft-wexler-7001/
#+end_example

Inside every catalog there should be set of images and other static files,
related to article. And =article.org= file with article itself. For example:
#+begin_example
articles/it/draft-palm-tung-e2-ressurection % tree -L 1
./
├── article.org
├── P1283929.jpg
├── P1283931.jpg
├── palm-2031-problem.png
├── palm-menu-hotkeys.png
└── tiktok.png
#+end_example

Every link to static file inside article should use =file:= protocol, for
example:
#+begin_src org
  file:test.org
  [[file:test.org][Test]]
#+end_src

Galleries can be described in the next way:
#+begin_src org
  ,#+begin_export json
  {"gallery":
      {"gallery-name": "some-gallery",
       "gallery-items": [["picture1.jpg", "thumb1.jpg"],
                         ["picture2.jpg"],
                         ["picture3.jpg", "thumb3.jpg"]]}}
  ,#+end_export
#+end_src

* Special syntax for articles
There are next properties, which can be in OrgMode files with my
articles.

- =#+TITLE:= :: Title of article.
- =#+DATE:= :: Date and time of publication. In =YYYY-MM-DD HH:MM= format.
- =#+TAGS:= :: Space-separated list of tags.
- =#+COVER:= :: Cover image.

These properties *should be supported* by the underlying machinery.

* Convert articles
:PROPERTIES:
:header-args: :noweb yes
:END:
Of course, most of the static-site engines do not support OrgMode files syntax
(for reasons unknown to me). So, we need to convert our nice and shiny
org-file to somewhat another format.

To make conversion just type =make= in you console. This triggers the next
action:
#+begin_src makefile :tangle Makefile
  CONVERSION_SCRIPT = ./internals/scripts/articles-bake-jekyll.sh
  all: $(CONVERSION_SCRIPT)
          $(CONVERSION_SCRIPT)

  <<init4makefile>>
#+end_src

This code just call the script, defined in =CONVERSION_SCRIPT= variable. For
every static-site engine we have different conversion scripts.

** Jekyll
:PROPERTIES:
:header-args: :tangle internals/scripts/articles-bake-jekyll.sh
:END:
For Jekyll I use Pandoc and bunch of regexes to create a proper =*.md= file.

We take every published article:
#+begin_src bash :shebang "#!/usr/bin/env bash"
  ARTICLES="./articles/"
  POSTS="./internals/jekyll/_posts"
  STATIC="./internals/jekyll/assets/static"

  for article in $(find "$ARTICLES" -type f -name article.org); do
      echo "$article" | grep -q 'articles/.\{1,\}/[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}-.\{1,\}/article.org'
      if [ "$?" -ne "0" ]; then
          continue
      fi
#+end_src

And read metadata from it:
#+begin_src bash
  CATEGORY=$(echo "$article" | sed -r 's!\./articles/([a-z0-9]+)/.+\.org!\1!g')
  FILENAME=$(echo "$article" | sed -r 's!\./articles/[a-z0-9]+/(.+)/article\.org!\1!g')
  FILEPATH=$(dirname "$article")
#+end_src

Make some adjustments in temporary copy of article. Maybe it can be done with
Pandoc, but /faster/ — to do it via shell:
#+begin_src bash
  sed -r 's!file:(.+)!file:/assets/static/\1!g' "$article" > "$FILEPATH"/"$FILENAME".org
#+end_src

After that we successfully convert our article from shiny OrgMode syntax to
Markdown:
#+begin_src bash
  pandoc -s "$FILEPATH"/"$FILENAME".org -t json | \
      java -jar internals/pandoc_jekyll/target/pandoc_jekyll-1.0-SNAPSHOT-shaded.jar | \
      pandoc -s -f json -t gfm --shift-heading-level-by=1 -M category:"$CATEGORY" \
             --template=internals/pandoc_jekyll/jekyll.gfm \
             -o "$FILEPATH"/"$FILENAME".md
  rm -f "$FILEPATH"/"$FILENAME".org
#+end_src

We need to fix filepaths from =file:///filename= to =/filename= in generated
Markdown file:
#+begin_src bash
  sed -i -r 's!(.*)file://(.*)!\1\2!g' "$FILEPATH"/"$FILENAME".md
#+end_src
 
After all that suffering move prepared article to =_posts/= and all related static
files to =assets/static=:
#+begin_src bash
  mv "$FILEPATH"/"$FILENAME".md "$POSTS"
  find "$FILEPATH" -type f -not -name article.org -exec cp {} "$STATIC" \;
  done
#+end_src

* Deploy
:PROPERTIES:
:header-args: :tangle Makefile
:END:
I made deployment as simple as I can. When you run =make= — you update Markdown
articles from repository with changes, made in OrgMode files (see [[* Convert articles][«Convert
articles»]])

When you end with editing — type =make deploy=, enter commit message and push
you changes back to GitHub:
#+begin_src makefile
  .PHONY: deploy
  deploy:
          cd $(JEKYLL) && \
          git add _posts/ assets/ && \
          git commit && \
          git push
#+end_src

When branch =master= on GitHub blog's repository is changed — the CloudFlare
catches it and begin to build html and other Web 2.0 things from our Jekyll
sources. If it is succeded — blog files will be deployed and become available
at https://eugene-andrienko.com.

From the bird's-eye our deployment process has next steps:
1. Create/edit article in Emacs OrgMode.
2. Run =make= to convert article to Markdown in Jekyll format. At this point
   only *published* articles exists in our Jekyll installation. All drafts and
   hidden articles stay as OrgMode files outside of directory with Jekyll
   blog.
3. Run =make deploy= to push changes to GitHub.
4. Wait while triggered Cloudflare build and deploy blog.
5. Done!

* Local server
To preview your changes you can start local server via the =make serve= command:
#+begin_src makefile :tangle Makefile
  .PHONY: serve
  serve: all
          cd $(JEKYLL) && \
          bundle exec jekyll serve
          find articles/ -type f -name '*.org' | \
                  entr -r -s 'cd $(JEKYLL) && bundle exec jekyll serve'
#+end_src

* How to clear all
If you want to stay with OrgMode files and remove all Jekyll files, scripts
and other things, not related to articles — run =make deepclean=. This command
clears all unnecessary.

#+begin_src makefile :tangle Makefile
  INTERNALS = internals

  .PHONY: deepclean
  deepclean:
          rm -rf $(INTERNALS) Makefile
#+end_src
