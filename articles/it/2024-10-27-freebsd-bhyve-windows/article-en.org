#+BEGIN_EXPORT html
---
layout: post
title: Launching Windows in FreeBSD bhyve hypervisor
category: it
date: 2024-10-27
lang: en
comments: false
hidden:
  - related_posts
banner:
  image: /assets/static/freebsd_win.jpg
  opacity: 0.6
summary: Launching Windows in FreeBSD bhyve hypervisor
tags: 
---
#+END_EXPORT

In this relatively small article I'll describe the steps required to run
Windows 7 as guest under the Bhyve hypervisor in a FreeBSD host. I will also
cover any pitfails I encountered.

This note is based on the Vermaden's article: [[https://vermaden.wordpress.com/2023/08/18/freebsd-bhyve-virtualization/][FreeBSD Bhyve
Virtualization]]. When I followed the instructions in that article, I got
Windows, which hung on boot, with no network access and no remote access. So,
I wrote my version of the instruction, with two additional steps.

All started from an old Windows program, that I was needed. Before, I used to
use only Wine for this. But nowadays in 64-bit system I can install only
64-bit version of Wine — which simply can't run installer of necessary program
and ask for 32-bit version of Wine for the every action. Of course, I can do
it with =pkg32.sh= script from FreeBSD Wine maintainers. /But/, even with all the
necessary files installed, I can't run the installer of my program.

That's where the old tricks come in. A few years ago I'd just install Windows
inside the VirtualBox. It is worked fast and reliable enough — if I used
kernel module for VirtualBox and VirtualBox Guest Addons in the guest
system. But for now I can simply use «standard» FreeBSD capabilities — [[https://bhyve.org/][bhyve]]
hypervisor and [[https://github.com/churchers/vm-bhyve][vm-bhyve]] virtual machines manager, which supports Windows.

* TOC                                                            :TOC_2_blog:
- [[* ZFS dataset for my VMs (optional part)][ZFS dataset for my VMs (optional part)]]
- [[* Setup bhyve and vm-bhyve][Setup bhyve and vm-bhyve]]
- [[* Windows profile for VM][Windows profile for VM]]
- [[* Network setup][Network setup]]
- [[* Windows installation][Windows installation]]
- [[* RDP client][RDP client]]
- [[* Basic commands to operate with VM][Basic commands to operate with VM]]

* ZFS dataset for my VMs (optional part)
:PROPERTIES:
:CUSTOM_ID: zfs-dataset
:END:

I had an 2.5" hard drive on my shelf. It was in use and once I accidentally
dropped it, so I was afraid to use it to store valuable data. But it works
well for "experimental" virtual machines! I immediately connected this HDD to
my [[https://eugene-andrienko.com/en/it/2024/07/07/thinkpad-x220-second-life][Thinkpad X220]] via OptiBay.

The next steps were standard. I've created separate zfs poll and dataset for
virtual machines:
#+begin_example
# zpool create hdd /dev/ada1
# zfs create hdd/vms
# zfs set compression=gzip hdd/vms
# zpool status
  pool: hdd
 state: ONLINE
  scan: scrub repaired 0B in 00:00:01 with 0 errors on Sun Oct 27 01:51:43 2024
config:

        NAME        STATE     READ WRITE CKSUM
        hdd         ONLINE       0     0     0
          ada1      ONLINE       0     0     0

errors: No known data errors
# zfs list
NAME                                           USED  AVAIL  REFER  MOUNTPOINT
hdd                                           14.2G   435G    96K  /hdd
hdd/vms                                       14.2G   435G  8.07G  /hdd/vms
#+end_example

The =hdd/vms= dataset is required for vm-bhyve to store all vm-bhyve-related
files on this hard drive, rather than on the two main system disks.

* Setup bhyve and vm-bhyve
:PROPERTIES:
:CUSTOM_ID: bhyve-setup
:END:

Again, all the steps are standard:
1. Setup necessary packages:
   #+begin_example
   # pkg install bhyve-firmware vm-bhyve rdesktop
   #+end_example
2. Enable vm-bhyve in =/etc/rc.conf= and instruct it to use the previously
   created dataset:
   #+begin_example
   vm_enable="YES"
   vm_dir="zfs:hdd/vms"
   #+end_example
3. Start vm-bhyve:
   #+begin_example
   # /usr/local/etc/rc.d/vm start
   #+end_example
4. Initialize dataset with bm-bhyve data:
   #+begin_example
   # vm init
   #+end_example

   After this, there are should be vm-bhyve service catalogues in the =/hdd/vms=
   path:
   #+begin_example
   /hdd/vms % ls -la
   total 12
   drwxr-xr-x  7 root wheel    7B Oct 27 11:42 ./
   drwxr-xr-x  3 root wheel    3B Oct 27 10:52 ../
   drwxr-xr-x  2 root wheel    4B Oct 27 12:43 .config/
   drwxr-xr-x  2 root wheel    2B Oct 27 01:46 .img/
   drwxr-xr-x  2 root wheel    4B Oct 27 11:07 .iso/
   drwxr-xr-x  2 root wheel    4B Oct 27 10:53 .templates/
   #+end_example

* Windows profile for VM
:PROPERTIES:
:CUSTOM_ID: vm-profile
:END:

By default there is only one =default= profile in =/hdd/vms/.templates/=. With
this profile the Windows VM will not have graphics, sound and enough memory.

Here is an article by Vermaden: [[https://vermaden.wordpress.com/2023/08/18/freebsd-bhyve-virtualization/][FreeBSD Bhyve Virtualization]] — helped me a
lot. I took the profile from that post and made a few changes:
- Remove the =xhci_mouse= setting — if it is enabled, the installed system hangs
  on load.
- Add more memory:
  #+begin_example
  loader="uefi"
  graphics="yes"
  cpu=2
  memory=6G
  ahci_device_limit="8"
  network0_type="e1000"
  network0_switch="public"
  disk0_type="ahci-hd"
  disk0_name="disk0.img"
  disk0_opts="sectorsize=512"
  utctime="no"
  bhyve_options="-s 8,hda,play=/dev/dsp,rec=/dev/dsp"
  #+end_example

  This profile is stored in =/hdd/vms/.templates/windows.conf=.

* Network setup
:PROPERTIES:
:CUSTOM_ID: network-setup
:END:

For unknown reasons, this step is missing from many instructions. As a result,
there is no network access from the host to the guest.

First, create the switch =public= (used in the =windows= profile from above):
#+begin_example
# vm switch create public
#+end_example

Then set the correct address for switch:
#+begin_example
# vm switch address public 169.254.0.1/16
#+end_example

I set the switch address after Windows installation — just take the VM network
settings from =ipconfig=:
- IP address: 169.254.122.106
- Netmask: 255.255.0.0

And set the appropriate address for the switch:
#+begin_example
s vm switch list
NAME    TYPE      IFACE      ADDRESS         PRIVATE  MTU  VLAN  PORTS
public  standard  vm-public  169.254.0.1/16  no       -    -     -
#+end_example

* Windows installation
:PROPERTIES:
:CUSTOM_ID: windows-setup
:END:

There is the most non-trivial part. Most instructions recommend patching the
distribution ISO to add the virtio drivers. Fortunately, a custom "ZverDVD"
distribution, which I used, already has the necessary drivers. Or maybe these
drivers are not necessary for installation for now.

What's interesting is that not every distribution ISO works — some of them
just don't load. I haven't found out why this happens. So, you should spend a
some time to find a suitable ISO...

ISO file should be placed to =/hdd/vms/.iso/=. After that it should appear in
the =vm iso= output:
#+begin_example
# vm iso
DATASTORE           FILENAME
default             windows_eagle.iso
#+end_example

It is a good idea to have any VNC client installed on the host machine before
installing Windows. It is necessary to connect to the Windows installer GUI
and complete the process. I used [[https://wiki.gnome.org/Apps/Vinagre][Vinagre]] because it can scale the working area
in the right way.

Preparation to installation is simple:
1. Create VM with 50 Gb disk and with =windows= profile:
   #+begin_example
   # vm create -t windows -s 50G windows
   #+end_example
2. Start booting from bootable ISO:
   #+begin_example
   # vm install windows windows_eagle.iso
   Starting windows
   * found guest in /hdd/vms/windows
   * booting...
   #+end_example
3. After step 2 the system will wait for VNC client connection on the address
   from table:
   #+begin_example
   # vm list
   NAME      DATASTORE  LOADER  CPU  MEMORY  VNC           AUTO  STATE
   windows  default    uefi    2    6G      0.0.0.0:5900  No    Locked (freebsd)
   #+end_example
4. And then it's business as usual :-)
   #+CAPTION: Windows installation
   #+ATTR_HTML: :align center :alt windows 7 setup
   [[file:windows7_setup.jpg]]

* RDP client
:PROPERTIES:
:CUSTOM_ID: rdp-client
:END:

As a Vermaden, I decided to connect to the working system via RDP. It is very
useful to be able to connect to the system and mount host system catalogues at
the same time.

To enable RDP in Windows the following steps are required:
- Set the password for the account that will be used under RDP.
- Enable remote access to the system:
  #+CAPTION: Windows remote access
  #+ATTR_HTML: :align center :alt windows 7 remote control settings
  [[file:windows7_remote_control.jpg]]
- Obtain the IP address of the guest system via =ipconfig=:
  #+ATTR_HTML: :align center :alt windows cmd and ipconfig output
  [[file:windows7_ipconfig.jpg]]

  And now it is possible to connect to the guest-Windows from FreeBSD-host
  via:
  #+begin_example
  $ rdesktop -u user -p 1234 -P -N -z -g 1600x900 -a 24 -r sound:local -r disk:DWNL=/home/drag0n/downloads/ 169.254.122.106
  #+end_example

  You should use your own =login/password= pair instead of =user/1234=. Option =-r
  disk= mounts =/home/drag0n/downloads/= from the host to the guest as a network
  drive with the name =DWNL=. The =-r clipboard= option allows you to have the
  same clipboard contents in both OS.

  #+CAPTION: Mounted FreeBSD-host catalog
  #+ATTR_HTML: :align center :alt Catalog from FreeBSD host as DWNL network storage
  [[file:windows7_dwnl.jpg]]

  The =-g 1600x900= option sets the resolution of the guest desktop in the
  rdesktop window. However, if you are using tiling wm, the rdesktop window
  will be stretched to the size of the physical screen and this option will be
  ignored. In some cases this can be useful.

* Basic commands to operate with VM
:PROPERTIES:
:CUSTOM_ID: main-bhyve-vm-commands
:END:

1. Launch VM:
   #+begin_example
   # vm start windows
   Starting windows
   * found guest in /hdd/vms/windows
   * booting...
   #+end_example
2. VM stop:
   #+begin_example
   shutdown /s /t 0
   #+end_example
   :-)
3. List VMs:
   #+begin_example
   # vm list
   NAME     DATASTORE  LOADER  CPU  MEMORY  VNC  AUTO  STATE
   windows  default    uefi    2    6G      -    No    Stopped
   #+end_example
4. Turn of VM by power (if Windows is hang):
   #+begin_example
   # vm poweroff windows
   Are you sure you want to forcefully poweroff this virtual machine (y/n)?
   #+end_example
