<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ru"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://eugene-andrienko.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://eugene-andrienko.com/" rel="alternate" type="text/html" hreflang="ru" /><updated>2025-06-08T18:37:41+03:00</updated><id>https://eugene-andrienko.com/feed.xml</id><title type="html">Dragon’s notes</title><subtitle>Dragon&apos;s cave with posts about IT, photography, bicycles and different DIY.</subtitle><author><name>Eugene Andrienko</name></author><entry xml:lang="ru"><title type="html">Network provincialism and balkanization</title><link href="https://eugene-andrienko.com/it/2025/05/25/internet-slow-death.html" rel="alternate" type="text/html" title="Network provincialism and balkanization" /><published>2025-05-25T00:00:00+03:00</published><updated>2025-05-25T00:00:00+03:00</updated><id>https://eugene-andrienko.com/it/2025/05/25/internet-slow-death</id><content type="html" xml:base="https://eugene-andrienko.com/it/2025/05/25/internet-slow-death.html"><![CDATA[<pre class="example">
 ____                                   __       ___
/\  _`\                                /\ \     /\_ \
\ \ \L\ \_ __    __     __      ___ ___\ \ \____\//\ \      __
 \ \ ,__/\`'__\/'__`\ /'__`\  /' __` __`\ \ '__`\ \ \ \   /'__`\
  \ \ \/\ \ \//\  __//\ \L\.\_/\ \/\ \/\ \ \ \L\ \ \_\ \_/\  __/
   \ \_\ \ \_\\ \____\ \__/.\_\ \_\ \_\ \_\ \_,__/ /\____\ \____\
    \/_/  \/_/ \/____/\/__/\/_/\/_/\/_/\/_/\/___/  \/____/\/____/

</pre>

<p>
This post will (I hope not) become a beautiful epitaph to the international
network as we know it…
</p>

<p>
This network used to unite people. Although I was born at the end of
XX century, I missed the rise and fall of the <a href="https://en.wikipedia.org/wiki/FidoNet">FidoNet</a> (it was popular enough
in Russia after the fall of USSR and before the network equipment for coaxial
cable or twisted pair became cheaper. We called it <a href="https://neolurk.org/wiki/%D0%A4%D0%B8%D0%B4%D0%BE%D0%BD%D0%B5%D1%82">Фидонет</a>).
</p>

<p>
But I was born just in time to meet the 56k modems (I had the Acorp
Sprinter@56K), ICQ, forums (hello, phpBB), XMPP and it's transports,
Bombus<sup><a id="fnr.bombus" class="footref" href="#fn.bombus" role="doc-backlink">1</a></sup> on my Siemens C75 with 2G Internet access from Tele2 and so
on. So I remembered <i>the spirit</i> of the old Internet that really connected
people.
</p>

<p>
Things changed a bit after 201x — when the new government agency was
established. It was cringe when they blocked site with Doxygen docs and it was
funny when they blocked <code>127.0.0.1</code> and so on.
</p>

<p>
But things changed a lot after 2022 — when a <b>lot</b> of Internet-related
services started to reuse "the best practices" of breaking the connectivity
between people and breaking the <i>international</i> network itself.
</p>

<p>
Finally, in one day I decided to write this post to document the things that
were happening. That day, I read <a href="https://mastodon.bsd.cafe/@mudala/114417527646601267">a post</a> about the FreeBSD 2025 survey in
Mastodon, tried to open the attached link to the third-party site with the
survey itself, and … failed. Just because that site decided to block all
people with russian IPs. I don't know the intention of this decision,
especially in the year 2025 — in this year, I hope, almost all people
understood <i>how the things work</i> and stopped pursuing the dream that blocking
residental russian IPs could make the world a better place.
</p>

<p>
Not only I, but a lot of people met the same discrimination before and will
meet it in the future. For example, you can see <a href="https://mastodon.social/@grishka/111934602844613193">this enormously long thread</a>,
made by <a href="https://mastodon.social/@grishka">@grishka@mastodon.social</a>.
</p>

<p>
BTW, after this "incident" with the survey, <a href="https://mas.to/@evgandr/114426048680177117">I decided</a> to make a separate post
in my blog with evidence of Internet de-internationalization.
</p>

<p>
Sad to say, but this post will be constantly updated with newly found evidence
of network "balkanization".
</p>

<pre class="example">
 ____                     __
/\  _`\            __    /\ \
\ \ \L\_\  __  __ /\_\   \_\ \     __    ___     ___     __
 \ \  _\L /\ \/\ \\/\ \  /'_` \  /'__`\/' _ `\  /'___\ /'__`\
  \ \ \L\ \ \ \_/ |\ \ \/\ \L\ \/\  __//\ \/\ \/\ \__//\  __/
   \ \____/\ \___/  \ \_\ \___,_\ \____\ \_\ \_\ \____\ \____\
    \/___/  \/__/    \/_/\/__,_ /\/____/\/_/\/_/\/____/\/____/

</pre>

<p>
Let's get started. There will be no examples of the "modern" enshittified
websites that constantly spam users with ads, popups and other nonsense. A lot
of people have already written a lot about this, see for example <a href="https://garry.net/posts/the-death-of-the-web">The Death Of
The Web</a> blogpost.
</p>

<p>
I will write about sites that block access from some region(s) of our
planet. And about sites that block access from everyone not coming from some
region(s). All those made not for some kind of security, but directly to
prohibit people from the "wrong" areas to see their "precious content".
</p>

<p>
The format is simple: screenshot and a little descriptive text below, if
necessary.
</p>


<div class="figure">
<p><img src="/assets/static/2025-04-30-openculture.com.png" alt="Error 405, access denied at the openculture.com" align="center" width="80%" />
</p>
<p style="text-align: center"><i>OpenCulture is not so open — it blocks access from russian IPs with obscure message</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/2025-04-30-surveymonkey.com.png" alt="Error 403, geo block russia on the surveymonkey.com" align="center" width="80%" />
</p>
<p style="text-align: center"><i>World-wide surveys, but … if you a russian, you can't participate</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/2025-05-02-intel.com.png" alt="Opening any useful links from intel.com are prohibited just because you are in the &quot;wrong country&quot;" align="center" width="80%" />
</p>
<p style="text-align: center"><i>Wanna download drivers for an old Intel GMA X3100? How about NO?</i></p>
</div>

<p>
Translation of the text on the previous screenshot:
</p>

<blockquote>
<p>
We immediately suspended all business operations in Russia. This follows our
previous decision to suspend all deliveries to customers in Russia and
Belarus.
</p>
</blockquote>


<div class="figure">
<p><img src="/assets/static/2025-05-12-ozon.ru.png" alt="Access restricted if you try to open page from outside" align="center" width="80%" />
</p>
<p style="text-align: center"><i>Can't view the item page from the outer world. Funny, but the main page opens without problems from the same IP.</i></p>
</div>

<p>
Translation:
</p>

<blockquote>
<p>
Access is restricted. To solve the problem try this:
</p>
<ul class="org-ul">
<li>Wait and reload the page</li>
<li>Disable VPN</li>
<li>Update browser or mobile app</li>
<li>Connect to the another WiFi or mobile network</li>
<li>Restart a router</li>
</ul>
</blockquote>

<p>
Obviously, none of these items are helpful.
</p>


<div class="figure">
<p><img src="/assets/static/2025-05-21-lamoda.ru.png" alt="&quot;403 Forbidden&quot; error when opening lamoda.ru from the outer world" align="center" width="80%" />
</p>
<p style="text-align: center"><i>One of the biggest online retailers [ru] won't open from the outer world</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/2025-05-25-deviantart.com.png" alt="&quot;403 Error&quot; when opening deviantart.com through VPN" align="center" widht="80%" />
</p>
<p style="text-align: center"><i>DeviantArt returns 403 error if you connect through some sort of secure tunnel via the datacenter, not from residental IP (exposing yourself to the ISP, at least)</i></p>
</div>

<p>
<b>To be continued…</b>
</p>

<hr />
<div id="footnotes">

<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.bombus" class="footnum" href="#fnr.bombus" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Bombus — XMPP client written in Java ME for mobile phones.
</p></div></div>


</div>
</div>]]></content><author><name>Eugene Andrienko</name></author><category term="it" /><summary type="html"><![CDATA[____ __ ___ /\ _`\ /\ \ /\_ \ \ \ \L\ \_ __ __ __ ___ ___\ \ \____\//\ \ __ \ \ ,__/\`'__\/'__`\ /'__`\ /' __` __`\ \ '__`\ \ \ \ /'__`\ \ \ \/\ \ \//\ __//\ \L\.\_/\ \/\ \/\ \ \ \L\ \ \_\ \_/\ __/ \ \_\ \ \_\\ \____\ \__/.\_\ \_\ \_\ \_\ \_,__/ /\____\ \____\ \/_/ \/_/ \/____/\/__/\/_/\/_/\/_/\/_/\/___/ \/____/\/____/]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://eugene-andrienko.com/assets/static/header-network-provincialism.jpg" /><media:content medium="image" url="https://eugene-andrienko.com/assets/static/header-network-provincialism.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="ru"><title type="html">My way to remove “Linuxisms” from FreeBSD</title><link href="https://eugene-andrienko.com/it/2025/03/30/freebsd-pkgs-wout-unwanted-deps.html" rel="alternate" type="text/html" title="My way to remove “Linuxisms” from FreeBSD" /><published>2025-03-30T00:00:00+03:00</published><updated>2025-03-30T00:00:00+03:00</updated><id>https://eugene-andrienko.com/it/2025/03/30/freebsd-pkgs-wout-unwanted-deps</id><content type="html" xml:base="https://eugene-andrienko.com/it/2025/03/30/freebsd-pkgs-wout-unwanted-deps.html"><![CDATA[<div class="outline-2">
<h2>TOC&#xa0;&#xa0;&#xa0;<span class="tag"></span></h2>
<div class="outline-text-2">
<ul class="org-ul">
<li><a href="#preamble">Preamble</a></li>
<li><a href="#poudriere-installation">Poudriere installation</a></li>
<li><a href="#removing-deps">Removing unwanted dependencies</a></li>
<li><a href="#dewaylandization">More complex examples of deWaylandization</a>
<ul class="org-ul">
<li><a href="#flavors">Ports flavors</a></li>
<li><a href="#patching-Makefile">Patching Makefile</a></li>
</ul></li>
<li><a href="#results-and-thoughts">Results and thoughts</a></li>
<li><a href="#notes">Notes</a></li>
</ul>
</div>
</div>
<div id="outline-container-preamble" class="outline-2">
<h2 id="preamble">Preamble</h2>
<div class="outline-text-2" id="text-preamble">
<p>
My everyday FreeBSD system has two good old components for graphics and
sound — the X Server and the OSS. There are simple reasons to use these
components — they are mature, they have tons of user documentation, use case
examples, etc. I also like the way these things have been used in the FreeBSD
world. Let me quote <a href="https://vermaden.wordpress.com/">vermaden</a>, who wrote well (about the OSS) in the <a href="https://vermaden.wordpress.com/2020/09/07/quare-freebsd/">Quare
FreeBSD?</a> blogpost:
</p>

<blockquote>
<p>
Not many people expect from FreeBSD to shine in that department but it shines
a lot here and not from yesterday but from decades. Remember when Linux got
rid of the old OSS subsystem with one channel and came up with ‘great’ idea to
write ALSA? I remember because I used Linux back then. Disaster is very polite
word to describe Linux audio stack back then … and then PulseAudio came and
whole Linux audio system got much worse.
</p>

<p>
&#x2026;
</p>

<p>
Lets get back to FreeBSD audio then. What FreeBSD offered? A whooping 256 OSS
channels mixed live in kernel for low latency. Everything audio related just
worked out of the box – and still works today.
</p>
</blockquote>

<p>
This is where I see the pattern. If in the Linux world there are many examples
of throwing away software that has served people for years or decades and can
(and should, I think) be updated to adapt to the changed reality (e.g.
<code>ifconfig</code>). Then in the FreeBSD world such software just … gets the necessary
updates and continues to be used.
</p>

<p>
In my journey to install and use the simple system with the good old software
I encountered some problems. Sometimes, when I install a simple program, like
conky or dunst — the pkg tries to install Wayland as a dependency! Or
PulseAudio (thankfully, there is no SystemD in the FreeBSD world). Of course,
I <b>do not want</b> these things in my simple system based on the X server, OSS and
good old initialization scripts.
</p>

<p>
As stated <a href="https://mastodon.bsd.cafe/@TomAoki">@TomAoki@bsd.cafe</a> — some binary packages for FreeBSD have been built
with the same dependencies that came from upstream — to minimize maintainer's
work, which is obviously hard<sup><a id="fnr.tomaoki" class="footref" href="#fn.tomaoki" role="doc-backlink">1</a></sup>.
</p>


<div class="figure">
<p><img src="/assets/static/tomaoki.png" alt="Screenshot of TomAoki reply in Mastodon" align="center" />
</p>
</div>

<p>
As a result, some packages came to my machine with unwanted dependencies or
compile-time options that were not ideal for me. For example, the native for
BSD <code>sndio</code> sound server is disabled by default in the
<code>mutlimedia/audacious-plugins</code> port. But those "linuxisms" — like PulseAudio and
PipeWire — are enabled🤷‍♂️.
</p>


<div class="figure">
<p><img src="/assets/static/audacious-plugins.png" alt="Compile time configuration for audacious-plugins with pulseaudio and pipewire options enabled" align="center" />
</p>
</div>

<p>
I was very surprised to see the <code>pulseaudio</code> process in the top 5 CPU consuming
processes while listening to my music. My sound system using OSS and sndio,
why is PulseAudio here?!🤔 After that I started to think about removing
unwanted dependencies from my packages completely…
</p>

<p>
Or another example — when I install some graphical application based on the
QT6 or GTK3/GTK4 — not only the necessary graphical libraries are installed as
dependencies but also a lot of Wayland stuff. Even if my system doesn't use
Wayland, I have packages of <i>these things</i> installed:
</p>

<pre class="example">
% pkg info -a | /usr/bin/grep wayland
qt6-wayland-6.8.2              Qt6 wrapper for Wayland
wayland-1.23.1                 Core Wayland window system code and protocol
wayland-protocols-1.39         Wayland protocols
</pre>

<p>
At some point, I decided to override this and get my versions of packages
without unwanted dependencies. A naive approach — just build some packages
without unwanted compile-time options via the Ports infrastructure — almost
works for me.
</p>

<p>
Almost. When the corresponding package from the FreeBSD repository was
updated — it overwrites my custom package, built with ports. A solution I
found — were far from ideal solution. I can lock my package so that it will
not be updated with the same binary package from the repository. And
temporarily unlock it when I want to update the <i>my</i> package via the ports
infrastructure.
</p>

<p>
In the FreeBSD Handbook, section 4.6 <a href="https://docs.freebsd.org/en/books/handbook/ports/#ports-poudriere">"Building Packages with poudriere"</a>, there
was another way to accomplish my task without such update problems. I can
build my own local repository with some packages that have PulseAudio/Wayland
dependencies removed. And this is not a some hacky thing — as far as I can
see, the poudriere used by the FreeBSD maintainers to build the binary
packages:
</p>

<pre class="example">
% pkg info emacs
...
Annotations    :
        FreeBSD_version: 1401000
        build_timestamp: 2025-02-27T01:04:32+0000
        built_by       : poudriere-git-3.4.2
</pre>

<p>
And it works pretty simple — poudriere just reuses existing FreeBSD
infrastructure to build packages. Package sources taken from <a href="https://docs.freebsd.org/en/books/handbook/ports/#ports-using">ports</a> (via
git/https), binary packages downloaded from existing FreeBSD repositories via
the <a href="https://docs.freebsd.org/en/books/handbook/ports/#pkgng-intro">pkg</a>, build process itself runs inside the <a href="https://docs.freebsd.org/en/books/handbook/jails/">jail</a> and all corresponding files
can be stored in the separate <a href="https://docs.freebsd.org/en/books/handbook/zfs/">ZFS</a> dataset — so the dataset with the root
filesystem will not be polluted by the build-time dependencies or building
artifacts, like object files or logs.
</p>

<p>
At the end, poudriere will create the local repository with packages. The same
repository as the main FreeBSD repository, but <i>local</i> and with only necesary
packages. Poudriere doesn't force me to build the whole system on my machine.
</p>

<p>
The main selling point is that all packages installed from this repository
will be updated through <b>this</b> repository. They will not be overwritten by
updates from the main FreeBSD repository. This is because the <code>pkg</code> adds the
annotation with repository name to the installed package and uses it when
updating:
</p>

<pre class="example">
% pkg info -A conky
conky-1.22.1:
        FreeBSD_version: 1402000
        build_timestamp: 2025-03-23T14:58:18+0000
        built_by       : poudriere-git-3.4.2
        cpe            : cpe:2.3:a:conky:conky:1.22.1:::::freebsd14:x64
        port_checkout_unclean: no
        port_git_hash  : 6bcf1e971
        ports_top_checkout_unclean: no
        ports_top_git_hash: 3fe34c578
        repo_type      : binary
        repository     : LocalRepo
</pre>

<p>
The second selling point: I can setup all these machinery on a separate disk,
which I mainly use for QEMU/bhyve VMs and other <i>big things</i>. This way, my build
infrastructure doesn't take up space on the root filesystem.
</p>
</div>
</div>
<div id="outline-container-poudriere-installation" class="outline-2">
<h2 id="poudriere-installation">Poudriere installation</h2>
<div class="outline-text-2" id="text-poudriere-installation">
<p>
Before I welcomed poudriere to my laptop, I created a separate dataset for
poudriere-related files:
</p>

<pre class="example">
# zfs create hdd/poudriere
# zfs set compression=gzip hdd/poudriere
</pre>

<p>
The only files, which are stored in the root filesystem are configuration
files:
</p>
<ul class="org-ul">
<li>Build options for the ports — stored in the
<code>/usr/local/etc/poudriere.d/jail-port-set-options/</code>.</li>
<li>Blacklist for unwanted ports: <code>/usr/local/etc/poudriere.d/blacklist</code>.</li>
<li><code>make.conf</code> for poudriere jails: <code>/usr/local/etc/poudriere.d/make.conf</code>.</li>
<li>And the poudriere configuration itself, of course.</li>
</ul>

<p>
Then, after installing the poudriere package, I slightly changed the default
configuration file and added the following options to use <code>/hdd/poudriere/</code>
dataset as the main path for both the jail and the local repository, not my
main dataset with the root filesystem:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #268bd2;">ZPOOL</span>=hdd
<span style="color: #93a1a1;">#</span><span style="color: #93a1a1;">NO_ZFS=yes</span>
<span style="color: #268bd2;">ZROOTFS</span>=/poudriere
<span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">The directory where poudriere will store jails and ports</span>
<span style="color: #268bd2;">BASEFS</span>=/hdd/poudriere
<span style="color: #268bd2;">TIMESTAMP_LOGS</span>=yes
<span style="color: #268bd2;">MAX_EXECUTION_TIME</span>=259200
</pre>
</div>

<p>
Also, I increased max time of build process to 3 days — because 1 day may not
be enough to build <i>big things</i>. And because it is very sad to spend 24 hours
for building and receive nothing as a result😟.
</p>

<p>
By the way, I don't want to build LLVM, or Rust, or other build-time
dependencies from sources — I'm fine with the packaged versions. So to don't
spend a time for it, I instruct poudriere to download and use binary packages
for these dependencies:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #268bd2;">PACKAGE_FETCH_BRANCH</span>=quarterly
<span style="color: #268bd2;">PACKAGE_FETCH_BLACKLIST</span>=<span style="color: #2aa198;">"pipewire* pulseaudio* wayland*"</span>
<span style="color: #268bd2;">PACKAGE_FETCH_WHITELIST</span>=<span style="color: #2aa198;">"gcc* binutils coreutils mpfr nasm mpdecimal bison</span>
<span style="color: #2aa198;">                         llvm* libclc-llvm* spirv-llvm-translator-llvm*</span>
<span style="color: #2aa198;">                         rust node* lua* perl* python* ruby* ghc* tcl86</span>
<span style="color: #2aa198;">                         bison gmake gsed gawk pcre2 pkgconf autoconf* automake* m4</span>
<span style="color: #2aa198;">                         flex mercurial subversion git cppunit</span>
<span style="color: #2aa198;">                         readline bash* curl readline gmp gettext* indexinfo</span>
<span style="color: #2aa198;">                         boost* hs-* cmake* help2man html2text pkgconf</span>
<span style="color: #2aa198;">                         jsoncpp asciidoc rhash zstd itstool brotli meson</span>
<span style="color: #2aa198;">                         tex* doxygen sdocbook-xml docbook* texi2html</span>
<span style="color: #2aa198;">                         gnupg gnutls sqlite3 suiteparse* fribidi gdbm</span>
<span style="color: #2aa198;">                         utf8cpp xmlstarlet c-ares minizip</span>
<span style="color: #2aa198;">                         gtk-doc iso8879 gperf highway p11-kit gcab nettle</span>
<span style="color: #2aa198;">                         py3* p5* ninja pygobject* double-conversion</span>
<span style="color: #2aa198;">                         dbus dbus-glib evdev-proto gnome-common icu orc</span>
<span style="color: #2aa198;">                         ca_root_nss expat xmlcatmgr xmlcharent yelp* json-glib</span>
<span style="color: #2aa198;">                         dav1d lame polkit intltool minixmlto sassc redis aom</span>
<span style="color: #2aa198;">                         svt-av1 x265 flac neon opusfile wavpack vmaf shaderc</span>
<span style="color: #2aa198;">                         opus sndio libbinio xxhash frei0r taglib upnp</span>
<span style="color: #2aa198;">                         ffnvcodec-headers v4l_compat yasm speex speexdsp twolame</span>
<span style="color: #2aa198;">                         bdftopcf dejavu encodings font-bh-ttf font-misc-ethiopic</span>
<span style="color: #2aa198;">                         font-misc-meltho font-util mkfontscale xorg-fonts-truetype</span>
<span style="color: #2aa198;">                         xcb-util xcb-util-image xcb-util-keysyms xcb-util-renderutil</span>
<span style="color: #2aa198;">                         xcb-util-wm spirv-tools glslang alsa-lib gsettings-desktop-schemas</span>
<span style="color: #2aa198;">                         woff2 openjpeg geoclue glib-networking harfbuzz-icu enchant2</span>
<span style="color: #2aa198;">                         hunspell hyphen</span>
<span style="color: #2aa198;">                         openal-soft rnnoise webrtc-audio-processing abseil crc32c</span>
<span style="color: #2aa198;">                         glibmm2* kf6* microsoft-gsl protobuf range-v3 tl-expected</span>
<span style="color: #2aa198;">                         libiconv libffi libtextstyle libxml2 libyaml liblz4</span>
<span style="color: #2aa198;">                         libidn2 libxslt libgcrypt libunistring libuv libgpg-error</span>
<span style="color: #2aa198;">                         libtool libdeflate libinotify libnghttp2 libtasn* libpsl</span>
<span style="color: #2aa198;">                         libssh* libarchive libdaemon libdatrie libevent libgudev</span>
<span style="color: #2aa198;">                         libgusb libthai libudev-devd libunwind duktape-lib</span>
<span style="color: #2aa198;">                         libsecret libsass libass libedit libvorbis</span>
<span style="color: #2aa198;">                         libogg libx264 libsidplayfp libunibreak libv4l libvdpau libvpx</span>
<span style="color: #2aa198;">                         libcdio libcdio-paranoia libcue libdvbpsi libepoll-shim</span>
<span style="color: #2aa198;">                         libsamplerate libinput libevdev libmtdev libidn libmatroska</span>
<span style="color: #2aa198;">                         libtheora libebml libfontenc libXpm libwacom libXv libxshmfence</span>
<span style="color: #2aa198;">                         libmysofa libada libb2 libdispatch libfmt libsigc++* libsoup*</span>
<span style="color: #2aa198;">                         libproxy"</span>
</pre>
</div>

<p>
Also, I put the next lines to the <code>/usr/local/etc/poudriere.d/make.conf</code>, to
prevent enabling the unwanted options when configuring the port(s):
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #268bd2;">DISABLE_LICENSES</span>=yes
OPTIONS_UNSET+=JACK PIPEWIRE PULSEAUDIO WAYLAND
OPTIONS_SET+=OSS SNDIO X11
</pre>
</div>

<p>
To the <code>/usr/local/etc/poudriere.d/blacklist</code> I've added the next lines:
</p>

<pre class="example">
audio/pulseaudio
graphics/wayland
multimedia/pipewire
</pre>

<p>
With this configuration poudriere will neither install unwanted packages from
repository, nor build it from ports.
</p>

<p>
The next steps, including initializing the jail and ports, are well described
in the corresponding chapter of the FreeBSD Handbook. With one <b>valuable</b>
exception! When I create the poudriere ports, the proper quarterly branch
should be specified! Like this:
</p>

<pre class="example">
# poudriere ports -c -p local -m git+https -B 2025Q1
</pre>

<p>
Without the proper branch I'll faced the obscure dependency problems when
downloading the build-time depenedencies as packages:
</p>

<pre class="example">
[00:00:48] [Dry Run] Package fetch: Skipping cmake-core-3.31.6: remote version mismatch: cmake-core-3.31.3
[00:00:48] [Dry Run] Package fetch: Skipping gettext-runtime-0.23.1: remote version mismatch: gettext-runtime-0.23
[00:00:48] [Dry Run] Package fetch: Skipping hs-pandoc-3.6.4: remote version mismatch: hs-pandoc-3.6.1
[00:00:48] [Dry Run] Package fetch: Skipping gettext-tools-0.23.1: remote version mismatch: gettext-tools-0.23
[00:00:48] [Dry Run] Package fetch: Skipping libedit-3.1.20250104,1: remote version mismatch: libedit-3.1.20240808,1
[00:00:48] [Dry Run] Package fetch: Skipping lua53-5.3.6_1: deps wanted: libedit-3.1.20250104,1
[00:00:48] [Dry Run] Package fetch: Skipping lua53-5.3.6_1: deps remote: libedit-3.1.20240808,1
[00:00:48] [Dry Run] Package fetch: Will fetch hs-cabal-install-3.12.1.0_1
</pre>

<p>
At the end I have an initialized<sup><a id="fnr.pkg" class="footref" href="#fn.pkg" role="doc-backlink">2</a></sup> and working jail with ports and the
necessary build environment inside. Now it's time to remove unwanted
dependencies from the system!
</p>
</div>
</div>
<div id="outline-container-removing-deps" class="outline-2">
<h2 id="removing-deps">Removing unwanted dependencies</h2>
<div class="outline-text-2" id="text-removing-deps">
<p>
For example, let's work with Wayland. First, I got a list of <code>wayland</code>-dependent
packages via <code>pkg required-depends</code>:
</p>

<pre class="example">
% pkg required-depends wayland
mesa-dri-24.1.7_1
gtk4-4.16.12
conky-1.22.0
sdl2-2.30.10_1
mesa-libs-24.1.7_1
gstreamer1-plugins-gl-1.24.10
vulkan-loader-1.4.304
dunst-1.10.0
libva-2.22.0
gtk3-3.24.43
libxkbcommon-1.7.0_1
redshift-1.12_2
webkit2-gtk3-2.34.6_10
</pre>

<p>
Let's take <code>conky</code> and rebuild it without Wayland dependencies! First, I need an
<i>origin</i> of this package (it's name in the ports) to build it with
poudriere. The <code>pkg</code> gave me the answer and I wrote it to the text file — the
list of packages to rebuild:
</p>

<pre class="example">
% pkg info -o conky
conky-1.22.0                   sysutils/conky
# echo 'sysutils/conky' &gt;&gt; /hdd/poudriere/14amd64-local-workstation-pkglist
</pre>

<p>
Then I configured all the necessary ports with help of the next <a href="https://zsh.sourceforge.io/Doc/Release/Functions.html">zsh function</a>:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #268bd2;">SHELL</span>=<span style="color: #2aa198;">"/usr/bin/env zsh"</span> xterm -fa Hack-14 -e <span style="color: #b58900; font-weight: bold;">\</span>
    <span style="color: #2aa198;">"sudo poudriere options -j 14amd64 -p local -z workstation -c $1"</span>
</pre>
</div>

<p>
This function takes string with origin as a single argument. It may look a bit
tricky — but I'm using it because ncurses interface to configure build options
is not displaying correctly inside my <a href="https://codeberg.org/akib/emacs-eat">EAT</a>. So I start a separate shell in
XTerm and configure conky and all it's dependencies inside this shell:
</p>


<div class="figure">
<p><img src="/assets/static/conky-port-options.png" alt="conky package configuration options" align="center" />
</p>
</div>

<p>
After that I start the necessary machinery with the next zsh function:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #268bd2;">DUNST_OPTS</span>=(-I ~/.config/dunst/icons/update.svg)
<span style="color: #268bd2;">PKGLIST</span>=<span style="color: #2aa198;">"/hdd/poudriere/14amd64-local-workstation-pkglist"</span>
<span style="color: #268bd2;">POUDRIERE_OPTS</span>=(-j 14amd64 -p local -z workstation -f $<span style="color: #268bd2;">PKGLIST</span>)

sudo poudriere jail -u -j 14amd64
dunstify <span style="color: #2aa198;">"Poudriere"</span> <span style="color: #2aa198;">"Jail 14amd64 updated"</span> $<span style="color: #268bd2;">DUNST_OPTS</span>

sudo poudriere ports -p local -u
dunstify <span style="color: #2aa198;">"Poudriere"</span> <span style="color: #2aa198;">"Ports updated"</span> $<span style="color: #268bd2;">DUNST_OPTS</span>

<span style="color: #859900; font-weight: bold;">while</span> true; <span style="color: #859900; font-weight: bold;">do</span>
    dunstify <span style="color: #2aa198;">"Poudriere"</span> <span style="color: #b58900; font-weight: bold;">\</span>
        <span style="color: #2aa198;">"Dry run start.\nCheck that all will build correctly before the real&#128526; build"</span> <span style="color: #b58900; font-weight: bold;">\</span>
        $<span style="color: #268bd2;">DUNST_OPTS</span>
    sudo poudriere bulk $<span style="color: #268bd2;">POUDRIERE_OPTS</span> -b quarterly -vn
    <span style="color: #657b83; font-weight: bold;">read</span> ANSWER?<span style="color: #2aa198;">"Is all correct? [y/n/q] "</span>
    <span style="color: #859900; font-weight: bold;">if</span> [ <span style="color: #2aa198;">"$ANSWER"</span> = <span style="color: #2aa198;">"y"</span> ]; <span style="color: #859900; font-weight: bold;">then</span>
        <span style="color: #859900; font-weight: bold;">break</span>
    <span style="color: #859900; font-weight: bold;">elif</span> [ <span style="color: #2aa198;">"$ANSWER"</span> = <span style="color: #2aa198;">"q"</span> ]; <span style="color: #859900; font-weight: bold;">then</span>
        <span style="color: #859900; font-weight: bold;">return</span>
    <span style="color: #859900; font-weight: bold;">fi</span>;
<span style="color: #859900; font-weight: bold;">done</span>

dunstify <span style="color: #2aa198;">"Poudriere"</span> <span style="color: #2aa198;">"Ports build start..."</span> $<span style="color: #268bd2;">DUNST_OPTS</span>
sudo poudriere bulk $<span style="color: #268bd2;">POUDRIERE_OPTS</span> -b quarterly
dunstify <span style="color: #2aa198;">"Poudriere"</span> <span style="color: #2aa198;">"Ports build end"</span> $<span style="color: #268bd2;">DUNST_OPTS</span>
</pre>
</div>

<p>
There are the next things happen:
</p>
<ol class="org-ol">
<li><code>local</code> poudriere ports update and FreeBSD system inside the jail <code>14amd64</code>
update. If there are already built ports and they got updates — the
necessary ports and its' dependencies will be rebuilt during the next
stages.</li>
<li>Dry-run the build process (<code>-n</code>) with the verbose output (<code>-v</code>). This is
necessary to check that all build-time dependencies, specified in the
<code>PACKAGE_FETCH_WHITELIST</code> configuration option, will not be built from
sources and so on.</li>
<li>Ask user about correctness of logs in the console. If not — return to the
previous stage. Assuming that user will fix something in the
<code>/usr/local/etc/poudriere.conf</code> before answering <code>n</code> to recheck logs of dry run
stage.</li>
<li><p>
Start build packages in multiple processes, each on it's own CPU core:
</p>

<div class="figure">
<p><img src="/assets/static/poudriere-building.png" alt="poudriere build process screenshot" align="center" />
</p>
</div></li>
</ol>

<p>
The "dry-run" stage is necessary to avoid special sort of problems — when the
build-time dependency will not be installed with <code>pkg</code> because it depends from
another build-time dependency, not listed in <code>PACKAGE_FETCH_WHITELIST</code>.
</p>

<pre class="example">
[00:01:23] [Dry Run] Checking packages for missing dependencies
[00:01:23] [Dry Run] Deleting cmake-core-3.31.3.pkg: missing dependency: expat-2.6.4
[00:01:23] [Dry Run] Deleting gettext-tools-0.23.pkg: missing dependency: libtextstyle-0.23
[00:01:23] [Dry Run] Deleting py311-libxml2-2.11.9_1.pkg: missing dependency: libxml2-2.11.9
</pre>

<p>
The solution is simple — just add necessary package(s) to the
<code>PACKAGE_FETCH_WHITELIST</code> or decide to build it from ports.
</p>

<p>
Ideally, here should be an <a href="https://github.com/freebsd/poudriere/issues/1129">option to stop the build process</a> if packages listed
in the <code>PACKAGE_FETCH_WHITELIST</code> will not be fetched. But it is not added yet to
the recent version of poudriere, so I'm using an infinite cycle as a
workaround.
</p>

<p>
The build process is fast enough, even on my Intel(R) Core(TM) i7-2620M CPU @
2.70GHz. Obviously, the big software, like Qt or GTK, will build for
hours. Fortunately, the packages that depend on it were waiting while they
were building, so other CPU cores were free<sup><a id="fnr.cpu-cores" class="footref" href="#fn.cpu-cores" role="doc-backlink">3</a></sup> and I could use my
system as usual, without any drawbacks😎.
</p>

<p>
After successfull completion, poudriere will create a local FreeBSD repository
that I can use to install <b>my</b> versions of packages without unwanted
dependencies. To use this repo, I simply created the
<code>/usr/local/etc/pkg/repos/LocalRepo.conf</code> file with the next contents:
</p>

<pre class="example">
LocalRepo: {
    url: "//hdd/poudriere/data/packages/14amd64-local-workstation"
}
</pre>

<p>
Then I launched <code>pkg update</code> as usual:
</p>

<pre class="example">
# pkg update
Updating FreeBSD repository catalogue...
FreeBSD repository is up to date.
Updating FreeBSD-kmods repository catalogue...
Fetching data.pkg: 100%   14 KiB  14.6kB/s    00:01
Processing entries: 100%
FreeBSD-kmods repository update completed. 44 packages processed.
Updating LocalRepo repository catalogue...
LocalRepo repository is up to date.
All repositories are up to date.
</pre>

<p>
And now I'm able to reinstall the conky and get rid of a wayland
dependency. To simplify things, I've just added the next alias to
<code>/etc/pkg.conf</code>:
</p>

<pre class="example">
ALIAS {
    ...
    poudriere-install = "install -r LocalRepo -f"
}
</pre>

<p>
And called the next command:
</p>

<pre class="example">
# pkg poudriere-install conky
Updating LocalRepo repository catalogue...
Fetching meta.conf: 100%    179 B   0.2kB/s    00:01
Fetching data.pkg: 100%  132 KiB 135.4kB/s    00:01
Processing entries: 100%
LocalRepo repository update completed. 383 packages processed.
LocalRepo is up to date.
Checking integrity... done (0 conflicting)
The following 1 package(s) will be affected (of 0 checked):

Installed packages to be UPGRADED:
        conky: 1.22.0 -&gt; 1.22.1 [LocalRepo]

Number of packages to be upgraded: 1

Proceed with this action? [y/N]: y
[1/1] Upgrading conky from 1.22.0 to 1.22.1...
[1/1] Extracting conky-1.22.1: 100%
</pre>

<p>
Note, that only the necessary package(s) have been reinstalled. The pkg will
not install all the packages from the <code>LocalRepo</code>, only the bare minimum to
provide the working program in the existing system.
</p>

<p>
As a result, conky has disappeared from the list of wayland-dependent packages
and receive the proper <code>repository</code> annotation:
</p>

<pre class="example">
% pkg required-depends wayland
mesa-dri-24.1.7_1
gtk4-4.16.12
sdl2-2.30.10_1
mesa-libs-24.1.7_1
gstreamer1-plugins-gl-1.24.10
vulkan-loader-1.4.304
dunst-1.10.0
libva-2.22.0
gtk3-3.24.43
libxkbcommon-1.7.0_1
redshift-1.12_2
webkit2-gtk3-2.34.6_10
% pkg query "%n: %R" conky
conky: LocalRepo
</pre>
</div>
</div>
<div id="outline-container-dewaylandization" class="outline-2">
<h2 id="dewaylandization">More complex examples of deWaylandization</h2>
<div class="outline-text-2" id="text-dewaylandization">
<p>
Sometimes it may be necessary to revisit build options and/or reconfigure the
already built package. In my case there was a <code>libva</code>. I already built it as a
dependency when rebuilding VLC, but I want to recheck the selected options
before reinstalling the package.
</p>

<p>
This is where the <code>poudriere options</code> comes to the rescue. I can use the <code>-s</code>
option to view the package options and the <code>-c</code> option to reconfigure
them. Instead of specifying the list of origins to build with the <code>-f</code> option, I
just specify the one necessary origin. Note the <code>-n</code> option — without it the
poudriere will print configuration for the all packages required by the
specified origin.
</p>

<pre class="example">
# poudriere options -j 14amd64 -p local -z workstation -ns multimedia/libva
[00:00:01] Ports supports: FLAVORS SUBPACKAGES SELECTED_OPTIONS
[00:00:01] Working on options directory: /usr/local/etc/poudriere.d/14amd64-local-workstation-options
[00:00:01] Using ports from: /hdd/poudriere/jails-ports/ports/local
===&gt; The following configuration options are available for libva-2.22.0:
     WAYLAND=off: Wayland (graphics) support
     X11=on: X11 (graphics) support
===&gt; Use 'make config' to modify these settings
[00:00:01] Re-run 'poudriere options' with the -c flag to modify the options.
</pre>

<p>
Looks like the <code>libva</code> was configured correctly and I can just install it from
my local repo without any problems.
</p>

<p>
Much more complex example comes with a <code>graphics/mesa-dri</code>. Unfortunately, I
built it with Wayland support, so I will have to reconfigure and rebuild it.
</p>

<p>
This is where the custom zsh function <code>bsd-poudriere-reconfigure</code> comes in to
save me a tons of typing:
</p>


<div class="figure">
<p><img src="/assets/static/mesa-dri-reconfiguration.png" alt="mesa-dri options configuration window, opened with bsd-poudriere-reconfigure function" align="center" />
</p>
</div>

<p>
Finally, to rebuild the <code>mesa-dri</code> and it's dependencies I used the next
command:
</p>

<pre class="example">
# poudriere bulk -j 14amd64 -p local -z workstation -b quarterly -C graphics/mesa-dri
</pre>

<p>
And install it from <code>LocalRepo</code> the same way as I used for <code>conky</code> package.
</p>
</div>
<div id="outline-container-flavors" class="outline-3">
<h3 id="flavors">Ports flavors</h3>
<div class="outline-text-3" id="text-flavors">
<p>
There are some packages exists, without the corresponding ports. For example,
the package <code>audacious-gtk3</code> can be installed, but there is only
<code>multimedia/audactious</code> port and there are no "Qt/GTK/whatever" options to
configure:
</p>

<pre class="example">
/usr/ports % pkg info -o audacious-gtk3
audacious-gtk3-4.4.2_1         multimedia/audacious
/usr/ports % ls -d multimedia/audacious*
multimedia/audacious/         multimedia/audacious-plugins/
/usr/ports % pkg query '%n: %Ok' audacious-gtk3
audacious-gtk3: EXECINFO
audacious-gtk3: LIBARCHIVE
audacious-gtk3: NLS
</pre>

<p>
When I built this port as usual, I got the Qt-based package. But I want a GTK
based package because it can display my favourite skin as I want to:
</p>


<div class="figure">
<p><img src="/assets/static/audacious.png" alt="Audacious plugin with old school Winamp skin" align="center" width="80%" />
</p>
</div>

<p>
It's time to meet the <a href="https://docs.freebsd.org/en/books/porters-handbook/flavors/">flavors</a>! Some ports can be built in multiple
variants. And the variants itself can be observed with the simple <code>fgrep</code>:
</p>

<pre class="example">
/usr/ports % fgrep 'FLAVORS=' multimedia/audacious/Makefile
FLAVORS=        qt6 qt5 gtk3 gtk2
</pre>

<p>
So, according to the link above, I can build my <code>audacious-gtk3</code> package just by
adding line <code>multimedia/audacious@gtk3</code> instead of simple <code>multimedia/audacious</code>
to the my <code>/hdd/poudriere/14amd64-local-workstation-pkglist</code>. <b>Note:</b> the flavor
is specified after the <i>[at]</i> symbol.
</p>
</div>
</div>
<div id="outline-container-patching-Makefile" class="outline-3">
<h3 id="patching-Makefile">Patching Makefile</h3>
<div class="outline-text-3" id="text-patching-Makefile">
<p>
One of the biggest problems I met, during the recompiling some packages — is
the Qt 6 dependent packages. There were two of them: Telegram Desktop and the
<a href="https://wiki.openstreetmap.org/wiki/QMapShack">Qmapshack</a>.
</p>

<p>
Telegram Desktop is directly depends from Qt 6 and the Qmapshack depends on
the <code>bsdisks</code> package, which depends from the Qt 6 itself (despite the Qmapshack
depends on the Qt 5):
</p>

<pre class="example">
~ % pkg rquery '%n: %dn %dv : %do' telegram-desktop | /usr/bin/grep qt
telegram-desktop: qt6-shadertools 6.8.2 : x11-toolkits/qt6-shadertools
telegram-desktop: qt6-declarative 6.8.2 : x11-toolkits/qt6-declarative
telegram-desktop: qt6-wayland 6.8.2 : graphics/qt6-wayland
telegram-desktop: qt6-svg 6.8.2 : graphics/qt6-svg
telegram-desktop: qt6-lottie 6.8.2 : graphics/qt6-lottie
telegram-desktop: qt6-imageformats 6.8.2 : graphics/qt6-imageformats
telegram-desktop: qt6-base 6.8.2_1 : devel/qt6-base
telegram-desktop: qt6-5compat 6.8.2 : devel/qt6-5compat
~ % pkg rquery '%n: %dn %dv : %do' qmapshack | /usr/bin/grep bsdisks
qmapshack: bsdisks 0.36 : sysutils/bsdisks
~ % pkg rquery '%n: %dn %dv : %do' bsdisks | /usr/bin/grep qt
bsdisks: polkit-qt-1-qt6 0.200.0 : sysutils/polkit-qt-1
bsdisks: qt6-base 6.8.2_1 : devel/qt6-base
</pre>

<p>
And the problem is in <code>devel/qt6-base</code> — it depends from the Wayland directly
and there is no knob to build it without Wayland support:
</p>

<div class="org-src-container">
<pre class="src src-makefile"><span style="color: #268bd2;">LIB_DEPENDS</span>=    libatk-1.0.so:accessibility/at-spi2-core \
        libatk-bridge-2.0.so:accessibility/at-spi2-core \
...
        <span style="color: #268bd2;">libvulkan.so</span>:graphics/vulkan-loader \
        libwayland-client.so:graphics/wayland \
        libxkbcommon.so:x11/libxkbcommon \
...
<span style="color: #268bd2;">OPTIONS_DEFINE</span>= CUPS X11
<span style="color: #268bd2;">OPTIONS_DEFAULT</span>=    CUPS X11
<span style="color: #268bd2;">OPTIONS_SUB</span>=    yes
</pre>
</div>

<p>
I tried to remove this line with <code>graphics/wayland</code> dependency from the Makefile
but <code>qt6-base</code> failed to compile in this case.
</p>

<p>
I hope the option to compile <code>devel/qt6-base</code> without Wayland dependency will be
added in the future. But for now I can just stick with Qt 5.
</p>

<p>
First package, dependent from Qt 6 — the Telegram Desktop — was simply removed
from my machine. I always encountered problems with this app — it likes to
overload my CPU in random times. So I switched to web version and have no
problems since.
</p>

<p>
Second package — Qmapshack, dependent from <code>sysutils/bsdisks</code>, require more work
on it. Bsdisks itself was pulled to my system directly by Qmapshack and wasn't
necessary for other programs. So, the necessity of bsdisks was questionable —
why is it needed for the mapping program, when I don't use Garmin or other GPS
devices for mapping?
</p>

<pre class="example">
% pkg rquery '%e' bsdisks
UDisks2 service provides interfaces to enumerate
and perform operations on disks and storage devices
via D-Bus API. Bsdisks is an implementation of UDisks2
service for FreeBSD.
</pre>

<p>
Of course, there is no configuration option to build the <code>astro/qmapshack</code>
without <code>sysutils/bsdisks</code>. But … it was marked as a runtime dependency in the
Makefile, not a compile time dependency:
</p>

<div class="org-src-container">
<pre class="src src-makefile"><span style="color: #268bd2;">RUN_DEPENDS</span>=    ${<span style="color: #268bd2;">LOCALBASE</span>}/bin/bsdisks:sysutils/bsdisks
</pre>
</div>

<p>
So, it's time to slightly patch the necessary port and try to build Qmapshack
without bsdisks. First, I opened the
<code>/hdd/poudriere/ports/local/astro/qmapshack/Makefile</code> and commented this line.
</p>

<p>
Then, I add <code>astro/qmapshack</code> to the
<code>/hdd/poudriere/14amd64-local-workstation-pkglist</code> and initiated the build
without updating the ports, so my change will not clash with the updates from
the main repository (if any):
</p>

<pre class="example">
# poudriere bulk -j 14amd64 -p local -z workstation -b quarterly -nv -C astro/qmapshack
...
[00:00:42] [Dry Run] Dry run mode, cleaning up and exiting
[00:00:42] [Dry Run] Would build 3 packages using 3 builders
[00:00:42] [Dry Run] Ports to build: astro/qmapshack graphics/gdal www/qt5-webengine
...
# poudriere bulk -j 14amd64 -p local -z workstation -b quarterly -C astro/qmapshack
</pre>

<p>
And it successfully builds and running correctly without <code>bsdisks</code>!
</p>

<pre class="example">
[14:00:58] [01] [14:00:02] Finished www/qt5-webengine | qt5-webengine-5.15.18p5_1: Success
[14:01:01] [01] [00:00:00] Building astro/qmapshack | qmapshack-1.17.1_5
[15:08:33] [01] [01:07:32] Finished astro/qmapshack | qmapshack-1.17.1_5: Success
[15:08:33] Stopping 3 builders
[15:08:37] Creating pkg repository
Creating repository in /tmp/packages: 100%
Packing files for repository: 100%
[15:09:05] Committing packages to repository: /hdd/poudriere/data/packages/14amd64-local-workstation/.real_1743306462 via .latest symlink
[15:09:05] Removing old packages
[15:09:05] Built ports: graphics/gdal www/qt5-webengine astro/qmapshack
</pre>


<div class="figure">
<p><img src="/assets/static/qmapshack-wout-bsdisks.png" alt="Qmapshack main interface" align="center" />
</p>
<p style="text-align: center"><i>Main window of Qmapshack GIS software</i></p>
</div>

<p>
Last step: after successfull compilation I reverted my changes in
<code>astro/qmapshack/Makefile</code> to avoid unnecessary problems with ports updates.
</p>
</div>
</div>
</div>
<div id="outline-container-results-and-thoughts" class="outline-2">
<h2 id="results-and-thoughts">Results and thoughts</h2>
<div class="outline-text-2" id="text-results-and-thoughts">
<p>
Before, I was using a Gentoo (and compiling the whole system, of course) which
<code>emerge</code> system was inspired by FreeBSD ports. Comparing these two system, I can
say that ports infrastructure looks like simplier for me.
</p>

<p>
When I recompiled the program in the Gentoo with the new options I usually did
the next:
</p>
<ol class="org-ol">
<li>Run <code>emerge --ask program-name</code> to see the USE flags of program <b>and</b> it's
dependencies.</li>
<li>If I want to change something and need to see the exact meaning of some USE
flag, I call <code>equery uses program-name</code>. Then I open a text file somewhere in
<code>/etc/portage/package.use/</code> and add package atom and the necessary USE flags'
settings.</li>
<li>After that I could start compilation with necessary options.</li>
</ol>

<p>
Looks like for me, the same process in the FreeBSD is simpler. I can configure
build-time options for program and it's dependencies with a single call of
<code>poudriere options ...</code> which provides me a useful TUI menu with descriptions of
all of the options. And I don't need to copy it to the some configuration
file — all of them will be inserted in the right place themselves.
</p>

<p>
Also, all ports infrastructure looks like simplier — it is just a Makefile and
a bunch of human-readable text files with package descriptions and so on!
</p>

<p>
Of course there are drawbacks:
</p>
<ul class="org-ul">
<li>Some packages I think (like Qt 6) lack the configuration options.</li>
<li>If I want to update packages, it is better to update my local repository
first. Instead, some of the packages will be dependent from the old
libraries which are already updated in the <code>FreeBSD</code> repository. Sometimes it
will work as usual without any problems, but sometimes, I think, it will be
break due to API changes.</li>
<li>If I will update my OS to something like FreeBSD 14.3 — then I should to
checkout corresponding branch for local ports and update my 14amd64 jail to
the right version of OS.</li>
<li>The same is true for major updates.</li>
<li>And every quarter I should checkout the right branch for the ports, to have
a synchronization between the binary packages from the FreeBSD repository
and the ports.</li>
</ul>

<p>
BTW, I got one sudden and major result of un-waylanding of my system. Before,
I was constantly struggling from strange glitches on my display, that looks
like this:
</p>


<div class="figure">
<p><img src="/assets/static/freebsd_intel_glitches.jpg" alt="strange black glitches on the screen" align="center" />
</p>
</div>

<p>
I thought what this is because:
</p>
<ol class="org-ol">
<li>I used the outdated method of acceleration for X server <code>intel</code> driver. So, I
switched from UXA to Glamor. And this is not helped to me.</li>
<li>I used the wrong options for video card powersaving. Revised it and …
nothing changed.</li>
<li>My soldering of AGAN X230 expansion card were bad. So, I recheck it and
found nothing suspicios.</li>
<li>I compiled coreboot not the right way because I specified the wrong initial
framebuffer resolution when the machine is booting. I switched to
precompiled libreboot and properly configure it. Aaand … nothing changed.</li>
<li>I started to suspect my video card. Maybe my hardware is dying?…🤔</li>
</ol>

<p>
But after I removed Qt6 and Wayland related stuff from my machine, I'm not
seeing these glitches anymore. Before, I was seeing it almost every day. But
for now, two days already passed and all is OK.
</p>

<hr />
</div>
</div>
<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2" id="text-notes">
</div>
</div>
<div id="footnotes">

<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.tomaoki" class="footnum" href="#fnr.tomaoki" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://mastodon.bsd.cafe/@TomAoki/114209804382234562">https://mastodon.bsd.cafe/@TomAoki/114209804382234562</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.pkg" class="footnum" href="#fnr.pkg" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
It may be necessary to build a <code>ports-mgmt/pkg</code> before building anything
in the jail. In my case poudriere won't install <code>cmake-core</code> because it has
unsatisfied dependency — the <code>pkg</code>. Despite the <code>pkg</code> of necessary version was
previously bootstrapped to install binary packages in the jail.
</p></div></div>

<div class="footdef"><sup><a id="fn.cpu-cores" class="footnum" href="#fnr.cpu-cores" role="doc-backlink">3</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Except the Qt building process. There is a line in
<code>/usr/local/etc/poudriere.conf</code>, which instructs to build some packages on the
all accessible CPU cores:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">List of packages that will always be allowed to use MAKE_JOBS</span>
<span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">regardless of ALLOW_MAKE_JOBS. This is useful for allowing ports</span>
<span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">which holdup the rest of the queue to build more quickly.</span>
<span style="color: #268bd2;">ALLOW_MAKE_JOBS_PACKAGES</span>=<span style="color: #2aa198;">"pkg ccache py* vlc qt*"</span>
</pre>
</div>

<p class="footpara">
I added the Qt to it, because it builds so slooow on the one CPU core…
</p></div></div>


</div>
</div>]]></content><author><name>Eugene Andrienko</name></author><category term="it" /><category term="freebsd" /><summary type="html"><![CDATA[TOC&#xa0;&#xa0;&#xa0; Preamble Poudriere installation Removing unwanted dependencies More complex examples of deWaylandization Ports flavors Patching Makefile Results and thoughts Notes Preamble My everyday FreeBSD system has two good old components for graphics and sound — the X Server and the OSS. There are simple reasons to use these components — they are mature, they have tons of user documentation, use case examples, etc. I also like the way these things have been used in the FreeBSD world. Let me quote vermaden, who wrote well (about the OSS) in the Quare FreeBSD? blogpost:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://eugene-andrienko.com/assets/static/poudriere-header.png" /><media:content medium="image" url="https://eugene-andrienko.com/assets/static/poudriere-header.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="ru"><title type="html">Фотографии зимы 2024-2025</title><link href="https://eugene-andrienko.com/photo/2025/03/16/winter-photos-2024-2025.html" rel="alternate" type="text/html" title="Фотографии зимы 2024-2025" /><published>2025-03-16T00:00:00+03:00</published><updated>2025-03-16T00:00:00+03:00</updated><id>https://eugene-andrienko.com/photo/2025/03/16/winter-photos-2024-2025</id><content type="html" xml:base="https://eugene-andrienko.com/photo/2025/03/16/winter-photos-2024-2025.html"><![CDATA[<p>
Этой зимой я фотографировал гораздо меньше обычного — потому что грязь на
дорогах, холод в районе -15°C…-20°C, практически постоянное отсутствие солнца
и низковисящие серые облака, полностью закрывающие небо — максимально
мотивируют не высовывать и носа на улицу.
</p>

<p>
К счастью, парочка дней с солнцем всё таки были:
</p>


<div class="figure">
<p><img src="/assets/static/20241204_132006.jpg" alt="Spruce branches with the sun shining through" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241204_132404.jpg" alt="Snow-covered green grass illuminated by the setting sun" align="center" />
</p>
</div>

<p>
Но в большинстве своём, если не учитывать новогодние украшения, всё выглядело
как-то так:
</p>


<div class="figure">
<p><img src="/assets/static/20241218_172101.jpg" alt="The line to enter the subway, the building lit up with orange lights, night all around. In the background there is a fir tree decorated with garlands" align="center" />
</p>
</div>

<p>
Больше всего фотографий получилось с Нового Года:
</p>


<div class="figure">
<p><img src="/assets/static/20241218_174246.jpg" alt="An orange lamp illuminating a brick wall" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241218_192314.jpg" alt="Set of clear glasses" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241218_192334.jpg" alt="Set of guitar effects" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241218_192339.jpg" alt="Some sound equipment" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241218_192437.jpg" alt="Bike engine" align="center" />
</p>
</div>]]></content><author><name>Eugene Andrienko</name></author><category term="photo" /><summary type="html"><![CDATA[Этой зимой я фотографировал гораздо меньше обычного — потому что грязь на дорогах, холод в районе -15°C…-20°C, практически постоянное отсутствие солнца и низковисящие серые облака, полностью закрывающие небо — максимально мотивируют не высовывать и носа на улицу.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://eugene-andrienko.com/assets/static/header-winter-2024-2025.jpg" /><media:content medium="image" url="https://eugene-andrienko.com/assets/static/header-winter-2024-2025.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="ru"><title type="html">FreeBSD 14.2 and Thinkpad X220</title><link href="https://eugene-andrienko.com/it/2025/03/10/freebsd14-2-thinkpad-x220.html" rel="alternate" type="text/html" title="FreeBSD 14.2 and Thinkpad X220" /><published>2025-03-10T00:00:00+03:00</published><updated>2025-03-10T00:00:00+03:00</updated><id>https://eugene-andrienko.com/it/2025/03/10/freebsd14-2-thinkpad-x220</id><content type="html" xml:base="https://eugene-andrienko.com/it/2025/03/10/freebsd14-2-thinkpad-x220.html"><![CDATA[<p>
Since I've wrote <a href="https://eugene-andrienko.com/it/2020/09/26/thinkpad-x220-freebsd">post about my specific FreeBSD settings for Thinkpad X220</a>
near 5 years have passed. That post has a lot of additions and become a bit
messy. So, after I updated FreeBSD on my laptop up to 14.2 version and finally
found some time to carefully read a <a href="https://docs.freebsd.org/en/books/handbook/">"FreeBSD handbook"</a>, I decided to write a
new article about my configuration and about few useful utilities and tricks.
</p>

<p>
Few words about my setup. I use ZFS as a filesystem. The root filesystem
installed in the ZFS pool <code>zroot</code> which has two disks: first near a 500 GB SSD
and second a 160 Gb SSD:
</p>

<pre class="example">
 ~ % zpool status zroot
  pool: zroot
 state: ONLINE
  scan: scrub repaired 0B in 00:06:42 with 0 errors on Thu Feb 6 03:13:50 2025
config:

        NAME          STATE     READ WRITE CKSUM
        zroot         ONLINE       0     0     0
          ada0p3.eli  ONLINE       0     0     0
          ada2p3.eli  ONLINE       0     0     0

errors: No known data errors
 ~ % zpool list zroot
NAME    SIZE  ALLOC   FREE  CKPOINT  EXPANDSZ   FRAG    CAP  DEDUP    HEALTH  ALTROOT
zroot   579G   123G   456G        -         -     6%    21%  1.00x    ONLINE  -
</pre>

<p>
As you can see, I bravely traded reliability for read speed🫠. I hope that
snapshots and backups will save me.
</p>

<p>
And there is a third disk is in separate pool with a datasets for VMs (bhyve):
</p>

<pre class="example">
 ~ % zpool status hdd
  pool: hdd
 state: ONLINE
  scan: scrub repaired 0B in 00:01:37 with 0 errors on Thu Feb  6 03:08:49 2025
config:

        NAME        STATE     READ WRITE CKSUM
        hdd         ONLINE       0     0     0
          ada1      ONLINE       0     0     0

errors: No known data errors
 ~ % zfs list -r hdd
NAME              USED  AVAIL  REFER  MOUNTPOINT
hdd              10.2G   439G    96K  /hdd
hdd/vms          10.2G   439G  3.86G  /hdd/vms
hdd/vms/windows  6.39G   439G  6.39G  /hdd/vms/windows
</pre>

<p>
There is a <a href="https://eugene-andrienko.com/en/it/2024/12/21/thinkpad-x220-libreboot">Libreboot installed in the laptop</a> instead of BIOS. So my <code>loader</code>
starts in graphics mode, instead I've get problems with Libreboot built with
corebootfb.
</p>

<p>
As a WiFi card I use an Intel 8260 card with integrated WiFi and Bluetooth
(TL-8260D2W).
</p>

<p>
More information about my hardware you can read in <a href="https://eugene-andrienko.com/en/it/2024/07/07/thinkpad-x220-second-life">this post</a>.
</p>
<div class="outline-2">
<h2>TOC&#xa0;&#xa0;&#xa0;<span class="tag"></span></h2>
<div class="outline-text-2">
<ul class="org-ul">
<li><a href="#bootloader">Bootloader</a></li>
<li><a href="#drm">Direct Rendering Manager kernel module</a></li>
<li><a href="#boot-loader-conf">/boot/loader.conf</a></li>
<li><a href="#etc-rc-conf">/etc/rc.conf</a></li>
<li><a href="#etc-sysctl-conf">/etc/sysctl.conf</a></li>
<li><a href="#x-window-system">X Window System</a></li>
<li><a href="#power-management">Power management</a></li>
<li><a href="#networking">Networking</a>
<ul class="org-ul">
<li><a href="#usb-tethering">USB tethering</a></li>
</ul></li>
<li><a href="#storage">Storage</a></li>
<li><a href="#fingerprint-scanner">Fingerprint scanner</a></li>
<li><a href="#files-to-download">Files to download</a></li>
<li><a href="#notes">Notes</a></li>
</ul>
</div>
</div>
<div id="outline-container-bootloader" class="outline-2">
<h2 id="bootloader">Bootloader</h2>
<div class="outline-text-2" id="text-bootloader">
<p>
As <a href="https://libreboot.org/docs/bsd/#freebsd-and-corebootfb">stated in the Libreboot's site</a>, it doesn't works well with the FreeBSD
<code>loader</code>. If you install libreboot with <code>libgfxinit</code> (i.e. use binary with
<code>-corebootfb</code> suffix) and try to load FreeBSD, then you get a slim line on the
top of the screen instead of bootloader graphics and boot log of the FreeBSD
kernel and <code>init</code>. It looks like this:
</p>


<div class="figure">
<p><img src="/assets/static/freebsd_n_corebootfb.jpg" alt="Slim blue line on the top of the screen instead of the bsdinstall interface fullscreen" align="center" />
</p>
<p style="text-align: center"><i>Slim blue line instead of bsdinstall interface</i></p>
</div>

<p>
Fortunately, I found a workaround for this problem. If you booting the FreeBSD
installation media and the <code>loader</code> interface should appears on the screen —
blindly press <code>Esc</code> and type <code>vbe on</code> and press <code>Enter</code>. After that the fullscreen
<code>loader</code> interface should appear and installation process should display on the
screen as usual.
</p>

<p>
If you already installed FreeBSD, then just add the next lines to the
<code>/boot/loader.conf</code>:
</p>
<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">1: </span>hw.vga.textmode=<span style="color: #2aa198;">"0"</span>
<span id="coderef-loader-conf-resolution" class="coderef-off"><span class="linenr">2: </span><span style="color: #268bd2;">vbe_max_resolution</span>=2560x1440</span>
</pre>
</div>

<p>
Don't forget to insert the actual resolution to the line
<a href="#coderef-loader-conf-resolution" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-resolution');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-resolution');">2</a>!
</p>

<p>
After switch to FreeBSD 14.2 the things became more complicated. Because of
Netflix, the graphics mode from MBR bootloader <a href="https://www.freebsd.org/releases/14.2R/relnotes/#:~:text=removed%20support%20for%20graphics%20mode">was removed</a> and GZIP/BZIP2
compression takes its place. But this graphics mode was necessary for me to
see anything on the screen while system is booting. The previously described
trick doesn't work if bootloader lacks of graphics mode!
</p>

<p>
I found <a href="https://forums.freebsd.org/threads/freebsd-14-2-bootsplash-gone.96142/#post-684187">a solution</a> in the FreeBSD forum: just rebuild a loader with reverted
<a href="https://cgit.freebsd.org/src/commit/?id=4d3b05a8530e">4d3b05a8530e</a> commit and image on the display will be back. To achieve this I
did the next things:
</p>
<ol class="org-ol">
<li>Went to the <code>/usr/src/</code> catalog.</li>
<li>Because there is no Git repository in this catalog (in my case), I manually
reverted the changes from the aforementioned commit.</li>
<li><p>
Then I executed next set of commands:
</p>
<pre class="example">
cd /usr/src/stand/
make clean
make
make install
</pre>

<p>
I should note that <code>make clean install</code> command, suggested at the mentioned
forum's message, didn't completed successfully on my machine. That's why
there are three consequtive <code>make</code> calls on the code block above.
</p>

<p>
These calls should be completed without an errors.
</p></li>
<li>At this point the <code>loader</code> with graphics support should be already installed
in the <code>/boot</code> directory. So, after a reboot, the graphics interface of
bootloader and the boot log of the kernel should appear on the screen.</li>
</ol>
</div>
</div>
<div id="outline-container-drm" class="outline-2">
<h2 id="drm">Direct Rendering Manager kernel module</h2>
<div class="outline-text-2" id="text-drm">
<p>
<i>This section is applicable till 31 March 2025. After the FreeBSD 14.1 EoL it
will be no longer neccessary.</i>
</p>

<p>
For now (February 2025) the drm-kmod kernel module is still building for
FreeBSD 14.1. So when I updated to 14.2 release, I've got a drm-kmod for 14.1
kernel with 14.2 kernel. Of course it didn't work properly and I've got nor
text consoles neither boot log (after <code>init</code> start). Only the X-server works,
which is starting automatically on boot on my laptop.
</p>

<p>
There are two "default" options I've found in the Internet:
</p>
<ol class="org-ol">
<li>Don't update till 31 March 2025. After this date the drm-kmod will be built
for FreeBSD 14.2 and it will be safe to update the system.</li>
<li>Update the system now and build proper DRM kernel module for 14.2 manually.</li>
</ol>

<p>
Fortunately, the <a href="https://mas.to/@patrizia@hachyderm.io">@patrizia@hachyderm.io</a> showed me the third option. There is
exists a special FreeBSD-kmods repository with drm-kmod, built for newly
released FreeBSD version.
</p>

<p>
Based on <a href="https://hachyderm.io/@patrizia/113897441053997542">this</a> and <a href="https://forums.freebsd.org/threads/new-install-of-14-2.96276/#post-684792">this</a>, the solution is simple:
</p>
<ol class="org-ol">
<li><p>
Add/edit the file <code>/usr/local/etc/pkg/repos/FreeBSD-kmods.conf</code>. It should
has the next contents for the system based on the quarterly releases:
</p>
<pre class="example">
FreeBSD-kmods: {
    url             : "pkg+https://pkg.freebsd.org/${ABI}/kmods_quarterly_${VERSION_MINOR}",
    enabled         : yes,
    priority        : 10,
    mirror_type     : "SRV",
    signature_type  : "FINGERPRINTS",
    fingerprints    : "/usr/share/keys/pkg"
}
</pre></li>
<li>Call <code>sudo pkg update</code> to check that the new repository is accessible.</li>
<li><p>
Check currently used drm-kmod version
</p>
<pre class="example">
% sudo pkg info | grep drm
drm-61-kmod-6.1.92.1402000_3   DRM drivers modules
drm-kmod-20220907_3            Metaport of DRM modules for the linuxkpi-based KMS components
</pre></li>
<li><p>
Check that this version (drm-61-kmod in my case) exists in FreeBSD-kmod repository:
</p>
<pre class="example">
% sudo pkg search -r FreeBSD-kmods drm
drm-515-kmod-5.15.160.1402000_2 DRM drivers modules
drm-61-kmod-6.1.92.1402000_3   DRM drivers modules
</pre></li>
<li><p>
Remove installed drm-kmod:
</p>
<pre class="example">
% sudo pkg remove drm-kmod drm-61-kmod
</pre></li>
<li><p>
And install drm-61-kmod from a proper repository:
</p>
<pre class="example">
% sudo pkg install -r FreeBSD-kmods drm-61-kmod &amp;&amp; sudo pkg install drm-kmod
</pre></li>
</ol>

<p>
After reboot the boot log and the text consoles are back!
</p>
</div>
</div>
<div id="outline-container-boot-loader-conf" class="outline-2">
<h2 id="boot-loader-conf">/boot/loader.conf</h2>
<div class="outline-text-2" id="text-boot-loader-conf">
<p>
There were two sections about FreeBSD 14.2 specific things, which I've added
to the system after upgrading from 14.1. Now I'll write about the real😎
system configuration.
</p>

<p>
Let's start with <code>/boot/loader.conf</code> — there is a configuration file for
<a href="https://man.freebsd.org/cgi/man.cgi?query=loader&amp;sektion=8&amp;format=html">loader(8)</a> — the 3rd stage bootloader, which loads the kernel. Most of
variables in this file are well described in <a href="https://man.freebsd.org/cgi/man.cgi?loader.conf">loader.conf(5)</a>.
</p>

<p>
The first section of my file describes <code>loader</code>-related configuration:
</p>
<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">1: </span><span style="color: #93a1a1;">##################</span>
<span class="linenr">2: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Loader settings:</span>
<span class="linenr">3: </span><span style="color: #93a1a1;">##################</span>
<span id="coderef-loader-conf-boot-delay" class="coderef-off"><span class="linenr">4: </span><span style="color: #268bd2;">autoboot_delay</span>=<span style="color: #2aa198;">"0"</span></span>
<span id="coderef-loader-conf-beastie" class="coderef-off"><span class="linenr">5: </span><span style="color: #268bd2;">beastie_disable</span>=<span style="color: #2aa198;">"YES"</span></span>
<span id="coderef-loader-conf-boot-mute" class="coderef-off"><span class="linenr">6: </span><span style="color: #268bd2;">boot_mute</span>=<span style="color: #2aa198;">"YES"</span></span>
<span class="linenr">7: </span><span style="color: #268bd2;">cpu_microcode_load</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">8: </span><span style="color: #268bd2;">cpu_microcode_name</span>=<span style="color: #2aa198;">"/boot/firmware/intel-ucode.bin"</span>
</pre>
</div>

<p>
Lines <a href="#coderef-loader-conf-boot-delay" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-boot-delay');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-boot-delay');">4</a> and <a href="#coderef-loader-conf-beastie" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-beastie');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-beastie');">5</a> are used to skip the
<code>loader</code>'s interactive menu and boot the kernel right after the computer is
turned on. I can still jump to the <code>loader</code> console by pressing any key while
the <code>loader</code> is loading modules and preparing to load the kernel.
</p>

<p>
Line <a href="#coderef-loader-conf-boot-mute" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-boot-mute');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-boot-mute');">6</a> used to hide the kernel log during
loading. Instead, the nice white FreeBSD logo is displayed, just like in other
consumer OSes:
</p>


<div class="figure">
<p><img src="/assets/static/bootlogo.png" alt="black and white FreeBSD boot logo" align="center" />
</p>
<p style="text-align: center"><i>FreeBSD logo during the boot if boot_mute="YES"</i></p>
</div>

<p>
The last two lines allow loading <a href="https://en.wikipedia.org/wiki/Microcode">Intel CPU microcode</a> during kernel
loading. The <code>sysutils/cpu-microcode-intel</code> package should be installed first!
</p>

<p>
In the next section, there are lines with kernel modules that the <code>loader</code> will
load:
</p>
<div class="org-src-container">
<pre class="src src-shell"><span class="linenr"> 9: </span><span style="color: #93a1a1;">##################</span>
<span class="linenr">10: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Modules to load:</span>
<span class="linenr">11: </span><span style="color: #93a1a1;">##################</span>
<span id="coderef-loader-conf-i915kms" class="coderef-off"><span class="linenr">12: </span><span style="color: #268bd2;">i915kms_load</span>=<span style="color: #2aa198;">"YES"</span></span>
<span id="coderef-loader-conf-aesni" class="coderef-off"><span class="linenr">13: </span><span style="color: #268bd2;">aesni_load</span>=<span style="color: #2aa198;">"YES"</span></span>
<span class="linenr">14: </span><span style="color: #268bd2;">cryptodev_load</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">15: </span><span style="color: #268bd2;">geom_eli_load</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">16: </span><span style="color: #268bd2;">zfs_load</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">17: </span><span style="color: #268bd2;">libiconv_load</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">18: </span><span style="color: #268bd2;">libmchain_load</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">19: </span><span style="color: #268bd2;">cd9660_iconv_load</span>=<span style="color: #2aa198;">"YES"</span>
<span id="coderef-loader-conf-cd9660-iconv" class="coderef-off"><span class="linenr">20: </span><span style="color: #268bd2;">msdosfs_iconv_load</span>=<span style="color: #2aa198;">"YES"</span></span>
<span class="linenr">21: </span><span style="color: #268bd2;">acpi_ibm_load</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">22: </span><span style="color: #268bd2;">acpi_video_load</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">23: </span><span style="color: #268bd2;">acpi_dock_load</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">24: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Load the H-TCP algorithm. It has a more aggressive ramp-up to max</span>
<span class="linenr">25: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">bandwidth, and its optimized for high-speed, high-latency connections.</span>
<span id="coderef-loader-conf-cc-htcp" class="coderef-off"><span class="linenr">26: </span><span style="color: #268bd2;">cc_htcp_load</span>=<span style="color: #2aa198;">"YES"</span></span>
<span id="coderef-loader-conf-cpuctl" class="coderef-off"><span class="linenr">27: </span><span style="color: #268bd2;">cpuctl_load</span>=<span style="color: #2aa198;">"YES"</span></span>
<span class="linenr">28: </span><span style="color: #268bd2;">coretemp_load</span>=<span style="color: #2aa198;">"YES"</span>
<span id="coderef-loader-conf-sysctlinfo" class="coderef-off"><span class="linenr">29: </span><span style="color: #268bd2;">sysctlinfo_load</span>=<span style="color: #2aa198;">"YES"</span></span>
<span class="linenr">30: </span><span style="color: #268bd2;">sysctlbyname_improved_load</span>=<span style="color: #2aa198;">"YES"</span>
</pre>
</div>

<p>
Although these lines may look a bit cryptic — they aren't. Most of these lines
were added by the <code>bsdinstaller</code> during the installation process. The
instructions for loading modules may look like the same instructions from
<code>/etc/rc.conf</code> — but they should be placed in <code>/boot/loader.conf</code>. This is
necessary because these modules <b>must</b> be loaded before the system mounts the
disks using <a href="https://man.freebsd.org/cgi/man.cgi?rc(8)">rc(8)</a> scripts. Without them, the system won't be able to mount the
disks and initialize the other hardware properly. That's why modules should be
loaded by the <code>loader</code> before initialization scripts loading.
</p>

<ul class="org-ul">
<li>Line <a href="#coderef-loader-conf-i915kms" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-i915kms');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-i915kms');">12</a> was added by myself — it instructs to load kernel
mode setting<sup><a id="fnr.modesetting-wiki" class="footref" href="#fn.modesetting-wiki" role="doc-backlink">1</a></sup> module for the Intel integrated video
card. Without it, there was no graphical output, at least in the console.</li>
<li><p>
Lines from <a href="#coderef-loader-conf-aesni" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-aesni');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-aesni');">13</a> through <a href="#coderef-loader-conf-cd9660-iconv" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-cd9660-iconv');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-cd9660-iconv');">20</a> load the
storage-related kernel modules. Some modules (<code>aesni</code>, <code>cryptodev</code>, <code>geom_eli</code> and
<code>zfs)</code> were added during the installation process. They are needed to decrypt
the encrypted disk partitions, to decrypt them fast enough, and for ZFS
support.
</p>

<p>
The <code>libiconv</code>, <code>libmchain</code>, <code>cd9660_iconv</code> and <code>msdosfs_iconv</code> modules were added
by myself. They are needed for codeset conversion when the path on the
mounted filesystem is not in UTF-8 but in something like CP1251, CP866,
etc. This usually happens when I mount some old ISOs from the 199Xs or
unpack some archives from the Windows XP era with Cyrillic filenames.
</p></li>
<li>Various <code>acpi_*</code> modules are needed to support Thinkpad-specific things:
<ul class="org-ul">
<li><a href="https://man.freebsd.org/cgi/man.cgi?query=acpi_ibm&amp;apropos=0&amp;sektion=4&amp;manpath=FreeBSD+14.2-RELEASE&amp;arch=default&amp;format=html">acpi_ibm(4)</a> provides access to Thinkpad-specific hardware available
through the ACPI interface. For example, ThinkLight status can be read via
<code>sysctl dev.acpi_ibm.0.thinklight</code>, and even enabled programmatically via
<code>sudo sysctl dev.acpi_ibm.0.thinklight=1</code>.</li>
<li><a href="https://man.freebsd.org/cgi/man.cgi?query=acpi_video&amp;apropos=0&amp;sektion=4&amp;manpath=FreeBSD+14.2-RELEASE&amp;arch=default&amp;format=html">acpi_video(4)</a> provides various controls for some video core outputs (LVDS,
VGA, etc).</li>
<li><a href="https://man.freebsd.org/cgi/man.cgi?query=acpi_dock&amp;apropos=0&amp;sektion=4&amp;manpath=FreeBSD+14.2-RELEASE&amp;arch=default&amp;format=html">acpi_dock(4)</a> is a docking station device driver.</li>
</ul></li>
<li>Line <a href="#coderef-loader-conf-cc-htcp" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-cc-htcp');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-cc-htcp');">26</a> was taken from <a href="https://www.sacredheartsc.com/blog/freebsd-14-on-the-desktop/">this blog post</a> to improve
performance when my laptop is connected to the Internet (my main use case).</li>
<li>The next two lines, starting at <a href="#coderef-loader-conf-cpuctl" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-cpuctl');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-cpuctl');">27</a>, are necessary to
access specific CPU-related information, such as CPUID or temperature, and
to perform CPU firmware updates.</li>
<li><p>
The last two lines, starting at <a href="#coderef-loader-conf-sysctlinfo" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-sysctlinfo');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-sysctlinfo');">29</a>, are added for
<a href="https://man.freebsd.org/cgi/man.cgi?query=mixertui&amp;sektion=8&amp;n=1">mixertui(8)</a> — an ncurses-like interface mixer for OSS:
</p>

<div class="figure">
<p><img src="/assets/static/mixertui.png" alt="Console interface for mixertui, with gauge controls for different sound inputs/outputs" align="center" />
</p>
<p style="text-align: center"><i>mixertui console interface</i></p>
</div></li>
</ul>

<p>
The last section contains some system settings. All of these settings are just
some <a href="https://man.freebsd.org/cgi/man.cgi?query=sysctl&amp;apropos=0&amp;sektion=8&amp;manpath=FreeBSD+14.2-RELEASE&amp;arch=default&amp;format=html">sysctl(8)</a> variables that are read-only on FreeBSD and can only be changed
by the <code>loader</code>.
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">31: </span><span style="color: #93a1a1;">##################</span>
<span class="linenr">32: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">System settings:</span>
<span class="linenr">33: </span><span style="color: #93a1a1;">##################</span>
<span id="coderef-loader-conf-allow-destructive-dtrace" class="coderef-off"><span class="linenr">34: </span>security.bsd.allow_destructive_dtrace=0</span>
<span class="linenr">35: </span><span style="color: #93a1a1;">#</span>
<span class="linenr">36: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Read only but tunable sysctl settings:</span>
<span class="linenr">37: </span><span style="color: #93a1a1;">#</span>
<span id="coderef-loader-conf-enable-fbc" class="coderef-off"><span class="linenr">38: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Enable framebuffer compression for power saving:</span></span>
<span class="linenr">39: </span>compat.linuxkpi.i915_enable_fbc=1
<span class="linenr">40: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Try to skip unnecessary mode sets at boot time:</span>
<span id="coderef-loader-conf-fastboot" class="coderef-off"><span class="linenr">41: </span>compat.linuxkpi.i915_fastboot=1</span>
<span id="coderef-loader-conf-synaptics" class="coderef-off"><span class="linenr">42: </span>hw.psm.synaptics_support=1</span>
<span class="linenr">43: </span>hw.psm.trackpoint_support=1
<span id="coderef-loader-conf-kern" class="coderef-off"><span class="linenr">44: </span>kern.hz=100</span>
<span class="linenr">45: </span>kern.ipc.shmmni=<span style="color: #2aa198;">"1024"</span>
<span class="linenr">46: </span>kern.ipc.shmseg=<span style="color: #2aa198;">"1024"</span>
<span class="linenr">47: </span>kern.maxproc=<span style="color: #2aa198;">"100000"</span>
<span class="linenr">48: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Enable faster soreceive() implementation:</span>
<span id="coderef-loader-conf-soreceive" class="coderef-off"><span class="linenr">49: </span>net.inet.tcp.soreceive_stream=<span style="color: #2aa198;">"1"</span></span>
<span class="linenr">50: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Increase the network interface queue link - the default (50) is way</span>
<span class="linenr">51: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">too low:</span>
<span id="coderef-loader-conf-queue-link" class="coderef-off"><span class="linenr">52: </span>net.isr.defaultqlimit=<span style="color: #2aa198;">"2048"</span></span>
<span class="linenr">53: </span>net.link.ifqmaxlen=<span style="color: #2aa198;">"2048"</span>
</pre>
</div>

<ul class="org-ul">
<li>The <a href="#coderef-loader-conf-allow-destructive-dtrace" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-allow-destructive-dtrace');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-allow-destructive-dtrace');">34</a>th line has been added by
<code>bsdinstall</code>. It removes DTrace's ability to work with system
internals<sup><a id="fnr.dtrace-internal" class="footref" href="#fn.dtrace-internal" role="doc-backlink">2</a></sup>.</li>
<li>The lines from <a href="#coderef-loader-conf-enable-fbc" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-enable-fbc');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-enable-fbc');">38</a> to <a href="#coderef-loader-conf-fastboot" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-fastboot');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-fastboot');">41</a> just
enable some nice features for my integrated Intel GMA X3100 video card.</li>
<li>Two lines starting at <a href="#coderef-loader-conf-synaptics" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-synaptics');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-synaptics');">42</a> line enable TrackPoint and
Synaptics touchpad support.</li>
<li>Four lines starting at <a href="#coderef-loader-conf-kern" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-kern');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-kern');">44</a> contain various kernel-related
handles that increase the defaults to make it more suitable for desktop
systems.</li>
<li>Line <a href="#coderef-loader-conf-soreceive" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-soreceive');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-soreceive');">49</a> and two lines after <a href="#coderef-loader-conf-queue-link" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-loader-conf-queue-link');" onmouseout="CodeHighlightOff(this, 'coderef-loader-conf-queue-link');">52</a>
were taken from someone's blogpost to increase the network performance of my
laptop.</li>
</ul>
</div>
</div>
<div id="outline-container-etc-rc-conf" class="outline-2">
<h2 id="etc-rc-conf">/etc/rc.conf</h2>
<div class="outline-text-2" id="text-etc-rc-conf">
<p>
The next main configuration file in FreeBSD is an <code>/etc/rc.conf</code>. Here, as
stated in <a href="https://man.freebsd.org/cgi/man.cgi?rc.conf(5)">rc.conf(5)</a>, stored the next settings:
</p>
<ul class="org-ul">
<li>Network configuration, including hostname, interface(s) configuration, etc.</li>
<li>List services to run at system startup.</li>
<li>Sometimes, it includes configuration for <b>system</b> services.</li>
</ul>

<p>
List of services already populated by <code>bsdinstaller</code>, but I've added a lot more:
</p>
<div class="org-src-container">
<pre class="src src-shell"><span class="linenr"> 1: </span><span style="color: #93a1a1;">####################</span>
<span class="linenr"> 2: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Services to start:</span>
<span class="linenr"> 3: </span><span style="color: #93a1a1;">####################</span>
<span class="linenr"> 4: </span><span style="color: #268bd2;">local_unbound_enable</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr"> 5: </span><span style="color: #268bd2;">clear_tmp_enable</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr"> 6: </span><span style="color: #268bd2;">sshd_enable</span>=<span style="color: #2aa198;">"NO"</span>
<span class="linenr"> 7: </span><span style="color: #268bd2;">ntpd_enable</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr"> 8: </span><span style="color: #268bd2;">autofs_enable</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr"> 9: </span><span style="color: #268bd2;">zfs_enable</span>=<span style="color: #2aa198;">"YES"</span>
<span id="coderef-rc-conf-custom-lines" class="coderef-off"><span class="linenr">10: </span><span style="color: #268bd2;">dbus_enable</span>=<span style="color: #2aa198;">"YES"</span></span>
<span id="coderef-rc-conf-lightdm" class="coderef-off"><span class="linenr">11: </span><span style="color: #268bd2;">lightdm_enable</span>=<span style="color: #2aa198;">"YES"</span></span>
<span class="linenr">12: </span><span style="color: #268bd2;">powerd_enable</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">13: </span><span style="color: #268bd2;">wifibox_enable</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">14: </span><span style="color: #268bd2;">webcamd_enable</span>=<span style="color: #2aa198;">"YES"</span>
<span id="coderef-rc-conf-devmatch" class="coderef-off"><span class="linenr">15: </span><span style="color: #268bd2;">devmatch_enable</span>=<span style="color: #2aa198;">"YES"</span></span>
<span id="coderef-rc-conf-vm" class="coderef-off"><span class="linenr">16: </span><span style="color: #268bd2;">vm_enable</span>=<span style="color: #2aa198;">"YES"</span></span>
<span id="coderef-rc-conf-linux" class="coderef-off"><span class="linenr">17: </span><span style="color: #268bd2;">linux_enable</span>=<span style="color: #2aa198;">"YES"</span></span>
<span id="coderef-rc-conf-microcode-update" class="coderef-off"><span class="linenr">18: </span><span style="color: #268bd2;">microcode_update_enable</span>=<span style="color: #2aa198;">"YES"</span></span>
</pre>
</div>

<p>
My custom settings starting from line <a href="#coderef-rc-conf-custom-lines" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-rc-conf-custom-lines');" onmouseout="CodeHighlightOff(this, 'coderef-rc-conf-custom-lines');">10</a>. First, I enable
D-Bus — sadly, it is necessary for some programs even if I use i3wm, despite
it was created for KDE or Gnome — for example for <del>Firefox</del> Librewolf and
<a href="https://fprint.freedesktop.org/">fprintd</a> utilities.
</p>

<p>
Then (<a href="#coderef-rc-conf-lightdm" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-rc-conf-lightdm');" onmouseout="CodeHighlightOff(this, 'coderef-rc-conf-lightdm');">11</a>), I enable LightDM service — the nice and lightweight
login screen for X server:
</p>


<div class="figure">
<p><img src="/assets/static/lightdm.jpg" alt="LightDM login window" align="center" />
</p>
<p style="text-align: center"><i>LightDM login screen</i></p>
</div>

<p>
LightDM configuration for i3 was a bit tricky. But after some experiments I
added these lines to <code>/usr/local/etc/lightdm/lightdm.conf</code>:
</p>

<div class="org-src-container">
<pre class="src src-nil"><span class="linenr">1: </span>[Seat:*]
<span class="linenr">2: </span>xserver-share=true
<span class="linenr">3: </span>greeter-session=lightdm-gtk-greeter
<span class="linenr">4: </span>session-wrapper=/usr/local/etc/lightdm/Xsession
<span id="coderef-lightdm-conf-2k" class="coderef-off"><span class="linenr">5: </span>display-setup-script=xrandr --output DP-3 --primary --dpi 130</span>
</pre>
</div>

<p>
On the line <a href="#coderef-lightdm-conf-2k" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-lightdm-conf-2k');" onmouseout="CodeHighlightOff(this, 'coderef-lightdm-conf-2k');">5</a> there is a special command to properly setup X
server to display login screen on the right display with a right DPI.
</p>

<p>
Lets return to the <code>/etc/rc.conf</code>. Line <a href="#coderef-rc-conf-devmatch" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-rc-conf-devmatch');" onmouseout="CodeHighlightOff(this, 'coderef-rc-conf-devmatch');">15</a> enables auto-loading
of kernel modules with <a href="https://man.freebsd.org/cgi/man.cgi?query=devmatch&amp;sektion=8&amp;apropos=0&amp;manpath=FreeBSD+14.2-RELEASE+and+Ports">devmatch(8)</a> — I need it to blacklist some modules,
which is unnecessary in my configuration but load by default. And the line
<a href="#coderef-rc-conf-microcode-update" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-rc-conf-microcode-update');" onmouseout="CodeHighlightOff(this, 'coderef-rc-conf-microcode-update');">18</a> enables service to update CPU microcode on the
start (if package <code>sysutils/cpu-microcode-intel</code> is installed).
</p>

<p>
Then, I enable the <code>vm</code> service for <a href="https://github.com/churchers/vm-bhyve">bhyve-vm management console</a> (line
<a href="#coderef-rc-conf-vm" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-rc-conf-vm');" onmouseout="CodeHighlightOff(this, 'coderef-rc-conf-vm');">16</a>). And a <a href="https://docs.freebsd.org/en/books/handbook/linuxemu/">Linuxulator</a> — Linux compatibility layer — on the line
<a href="#coderef-rc-conf-linux" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-rc-conf-linux');" onmouseout="CodeHighlightOff(this, 'coderef-rc-conf-linux');">17</a>. Usually it is not necessary for normal FreeBSD operation
because all necessary programs built for FreeBSD. I don't remember why I
enable it, maybe to launch Dwarf Fortress, may be to lauch <a href="https://cataclysmdda.org/">Cataclysm-DDA</a>.
</p>

<p>
The most of the system-related configuration is already populated by the
<code>bsdinstaller</code>. So I've just added the few lines:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">19: </span><span style="color: #93a1a1;">#######################</span>
<span class="linenr">20: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">System configuration:</span>
<span class="linenr">21: </span><span style="color: #93a1a1;">#######################</span>
<span class="linenr">22: </span><span style="color: #268bd2;">hostname</span>=<span style="color: #2aa198;">"freebsd"</span>
<span id="coderef-rc-conf-kld-list" class="coderef-off"><span class="linenr">23: </span><span style="color: #268bd2;">kld_list</span>=<span style="color: #2aa198;">"fusefs ipsec ng_l2tp cuse"</span></span>
<span class="linenr">24: </span><span style="color: #268bd2;">syslogd_flags</span>=<span style="color: #2aa198;">"-ss"</span>
<span class="linenr">25: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Set dumpdev to "AUTO" to enable crash dumps, "NO" to disable</span>
<span class="linenr">26: </span><span style="color: #268bd2;">dumpdev</span>=<span style="color: #2aa198;">"NO"</span>
<span id="coderef-rc-conf-blacklist" class="coderef-off"><span class="linenr">27: </span><span style="color: #268bd2;">devmatch_blocklist</span>=<span style="color: #2aa198;">"if_iwm if_iwlwifi"</span></span>
</pre>
</div>

<ul class="org-ul">
<li>In the line <a href="#coderef-rc-conf-kld-list" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-rc-conf-kld-list');" onmouseout="CodeHighlightOff(this, 'coderef-rc-conf-kld-list');">23</a> I load some kernel modules: the <code>fusefs</code> and
the <code>cuse</code> modules. The first is necessary to work with <a href="https://en.wikipedia.org/wiki/Filesystem_in_Userspace">userspace
filesystems</a>. And the second is necessary for webcamd to operate with my
web-camera. Also, for some experiments with <a href="https://en.wikipedia.org/wiki/Layer_2_Tunneling_Protocol">L2TP</a> I load <code>ipsec</code> and <code>ng_l2tp</code>
modules.</li>
<li>And in the line <a href="#coderef-rc-conf-blacklist" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-rc-conf-blacklist');" onmouseout="CodeHighlightOff(this, 'coderef-rc-conf-blacklist');">27</a> I blacklisted modules for FreeBSD WiFi —
because I use <a href="https://man.freebsd.org/cgi/man.cgi?query=wifibox&amp;apropos=0&amp;sektion=8&amp;manpath=freebsd-ports&amp;format=html">wifibox(8)</a>, all FreeBSD related wireless networking shouldn't
interfere with it.</li>
</ul>

<p>
The daemons' configuration also populated by <code>bsdinstaller</code>:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">28: </span><span style="color: #93a1a1;">#########################</span>
<span class="linenr">29: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Services configuration:</span>
<span class="linenr">30: </span><span style="color: #93a1a1;">#########################</span>
<span class="linenr">31: </span><span style="color: #268bd2;">ntpd_sync_on_start</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">32: </span><span style="color: #268bd2;">moused_nondefault_enable</span>=<span style="color: #2aa198;">"NO"</span>
<span id="coderef-rc-conf-webcamd-conf" class="coderef-off"><span class="linenr">33: </span><span style="color: #268bd2;">webcamd_0_flags</span>=<span style="color: #2aa198;">"-d ugen0.5"</span></span>
<span id="coderef-rc-conf-vm-conf" class="coderef-off"><span class="linenr">34: </span><span style="color: #268bd2;">vm_dir</span>=<span style="color: #2aa198;">"zfs:hdd/vms"</span></span>
</pre>
</div>

<p>
Here I just added an option for <code>webcamd</code> to use only specified device as a my
web-camera (<a href="#coderef-rc-conf-webcamd-conf" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-rc-conf-webcamd-conf');" onmouseout="CodeHighlightOff(this, 'coderef-rc-conf-webcamd-conf');">33</a>), as written <a href="https://docs.freebsd.org/en/books/handbook/multimedia/index.html#webcam-setup">in documentation</a>. And
specified the separate ZFS pool on the thirdt HDD to use for my VMs.
</p>
</div>
</div>
<div id="outline-container-etc-sysctl-conf" class="outline-2">
<h2 id="etc-sysctl-conf">/etc/sysctl.conf</h2>
<div class="outline-text-2" id="text-etc-sysctl-conf">
<p>
The last main configuration file is a <code>/etc/sysctl.conf</code> with various system
variables.
</p>

<p>
The first section in my file is just a kernel-related settings:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr"> 1: </span><span style="color: #93a1a1;">##################</span>
<span class="linenr"> 2: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Kernel settings:</span>
<span class="linenr"> 3: </span><span style="color: #93a1a1;">##################</span>
<span class="linenr"> 4: </span>kern.geom.label.disk_ident.enable=<span style="color: #2aa198;">"0"</span>
<span class="linenr"> 5: </span>kern.geom.label.gptid.enable=<span style="color: #2aa198;">"0"</span>
<span class="linenr"> 6: </span>kern.randompid=1
<span class="linenr"> 7: </span>kern.coredump=0
<span class="linenr"> 8: </span>kern.corefile=/dev/null
<span class="linenr"> 9: </span>kern.vt.enable_bell=0
<span class="linenr">10: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Make desktop more responsive under high CPU load:</span>
<span class="linenr">11: </span>kern.sched.preempt_thresh=224
<span class="linenr">12: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Prevent shared memory from being swapped to disk:</span>
<span class="linenr">13: </span>kern.ipc.shm_use_phys=1
</pre>
</div>

<p>
Aside from the first lines added by the <code>bsdinstaller</code> and the commented lines,
there are the following settings:
</p>
<ul class="org-ul">
<li>Coredumps are disabled</li>
<li>Bell on the console is also disabled.</li>
</ul>

<p>
The next section in the file is hardware-specific:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">14: </span><span style="color: #93a1a1;">###################</span>
<span class="linenr">15: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Hardware setings:</span>
<span class="linenr">16: </span><span style="color: #93a1a1;">###################</span>
<span id="coderef-sysctl-conf-trackpoint" class="coderef-off"><span class="linenr">17: </span>hw.psm.trackpoint.sensitivity=150</span>
<span class="linenr">18: </span>hw.psm.trackpoint.upper_plateau=125
<span class="linenr">19: </span>hw.syscons.bell=0
<span class="linenr">20: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Enable sleep:</span>
<span id="coderef-sysctl-conf-suspend" class="coderef-off"><span class="linenr">21: </span>hw.pci.do_power_suspend=0</span>
<span class="linenr">22: </span>hw.pci.do_power_nodriver=1
<span class="linenr">23: </span>hw.acpi.lid_switch_state=S3
<span class="linenr">24: </span>hw.acpi.sleep_button_state=S3
<span class="linenr">25: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Override ACPI coretemp values:</span>
<span id="coderef-sysctl-conf-acpi-thermal" class="coderef-off"><span class="linenr">26: </span>hw.acpi.thermal.user_override=1</span>
<span class="linenr">27: </span>hw.acpi.thermal.tz0._PSV=80C
<span class="linenr">28: </span>hw.acpi.thermal.tz1._PSV=80C
<span class="linenr">29: </span>hw.acpi.thermal.tz0._CRT=199C
<span class="linenr">30: </span>hw.acpi.thermal.tz1._CRT=199C
</pre>
</div>

<p>
Here are my specific trackpoint sensivity values, starting at
line <a href="#coderef-sysctl-conf-trackpoint" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-sysctl-conf-trackpoint');" onmouseout="CodeHighlightOff(this, 'coderef-sysctl-conf-trackpoint');">17</a>. I chose these numbers experimentally, to get
the best user experience.
</p>

<p>
The four lines starting at <a href="#coderef-sysctl-conf-suspend" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-sysctl-conf-suspend');" onmouseout="CodeHighlightOff(this, 'coderef-sysctl-conf-suspend');">21</a>, configure the suspend
behavior for my laptop. The first two lines are from the FreeBSD forum. They
make my peripherals (especially the PCI Express card with USB3.0 ports in it)
work properly after the laptop wakes up. The last two lines tell the OS to go
to S3 state when I close the lid or press the sleep key (Fn+F4 on my Thinkpad
X220).
</p>

<p>
The five lines from <a href="#coderef-sysctl-conf-acpi-thermal" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-sysctl-conf-acpi-thermal');" onmouseout="CodeHighlightOff(this, 'coderef-sysctl-conf-acpi-thermal');">26</a> line are the <b>DANGEROUS</b> ones!
The first allows you to override thermal protections for the laptop. So, if
you configure something wrong, the laptop might melt🫠. The next two lines
lower the default temperature to disable the passive cooling — the defaults
were set to 90°C, which is too high for me.
</p>

<p>
And the last two lines are necessary to prevent some weird behaviour of my
laptop when it wakes up from the sleep state. Due to a some bug in the
Libreboot, my ThinkPad X220 doing some hard calculations with it's CPU for a
second, when it is waking up. And this second is enough for ACPI to decide,
"on ho, the CPU is overheating — let's turn off the everything!"
</p>

<p>
So, to prevent this unwanted shutdown I added those two lines. For now, laptop
still overheats for a second (fan noise increases) but it is successfully
wakes up and working like a charm. And it is not melt (yet)!
</p>

<p>
The next few lines are filesystem specific settings. Most of these are also
set by <code>bsdinstaller</code>.
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">29: </span><span style="color: #93a1a1;">###############</span>
<span class="linenr">30: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">VFS settings:</span>
<span class="linenr">31: </span><span style="color: #93a1a1;">###############</span>
<span id="coderef-sysctl-conf-usermount" class="coderef-off"><span class="linenr">32: </span>vfs.usermount=1</span>
<span class="linenr">33: </span>vfs.read_max=128
<span class="linenr">34: </span>vfs.zfs.min_auto_ashift=12 <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">4 KB blocks</span>
<span class="linenr">35: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Increase ZFS transaction timeout to save battery</span>
<span id="coderef-sysctl-conf-zfs-timeout" class="coderef-off"><span class="linenr">36: </span>vfs.zfs.txg.timeout=<span style="color: #2aa198;">"10"</span></span>
</pre>
</div>

<p>
I just made the following changes:
</p>
<ul class="org-ul">
<li>Allow user to mount filesystems in line <a href="#coderef-sysctl-conf-usermount" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-sysctl-conf-usermount');" onmouseout="CodeHighlightOff(this, 'coderef-sysctl-conf-usermount');">32</a>. Since I'm
the only one user of my laptop, I obviously allow myself to mount
filesystems from various USB drives, SD cards, etc.</li>
<li>The line <a href="#coderef-sysctl-conf-zfs-timeout" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-sysctl-conf-zfs-timeout');" onmouseout="CodeHighlightOff(this, 'coderef-sysctl-conf-zfs-timeout');">36</a> I took from the someone's blog. I can't
say that it significantly increases the battery life of the laptop&#x2026;</li>
</ul>

<p>
The next lines are not written by me — I took them from <a href="https://www.sacredheartsc.com/blog/freebsd-14-on-the-desktop/">this blogpost</a>:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">37: </span><span style="color: #93a1a1;">#############################</span>
<span class="linenr">38: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Network performance tuning:</span>
<span class="linenr">39: </span><span style="color: #93a1a1;">#############################</span>
<span class="linenr">40: </span>kern.ipc.maxsockbuf=2097152
<span class="linenr">41: </span>kern.ipc.soacceptqueue=1024
<span class="linenr">42: </span>kern.ipc.somaxconn=1024
<span class="linenr">43: </span>net.inet.tcp.abc_l_var=44
<span class="linenr">44: </span>net.inet.tcp.cc.abe=1
<span class="linenr">45: </span>net.inet.tcp.cc.algorithm=htcp
<span class="linenr">46: </span>net.inet.tcp.cc.htcp.adaptive_backoff=1
<span class="linenr">47: </span>net.inet.tcp.cc.htcp.rtt_scaling=1
<span class="linenr">48: </span>net.inet.tcp.ecn.enable=1
<span class="linenr">49: </span>net.inet.tcp.fast_finwait2_recycle=1
<span class="linenr">50: </span>net.inet.tcp.fastopen.server_enable=1
<span class="linenr">51: </span>net.inet.tcp.finwait2_timeout=5000
<span class="linenr">52: </span>net.inet.tcp.initcwnd_segments=44
<span class="linenr">53: </span>net.inet.tcp.keepcnt=2
<span class="linenr">54: </span>net.inet.tcp.keepidle=62000
<span class="linenr">55: </span>net.inet.tcp.keepinit=5000
<span class="linenr">56: </span>net.inet.tcp.minmss=536
<span class="linenr">57: </span>net.inet.tcp.msl=2500
<span class="linenr">58: </span>net.inet.tcp.mssdflt=1448
<span class="linenr">59: </span>net.inet.tcp.nolocaltimewait=1
<span class="linenr">60: </span>net.inet.tcp.recvbuf_max=2097152
<span class="linenr">61: </span>net.inet.tcp.recvspace=65536
<span class="linenr">62: </span>net.inet.tcp.sendbuf_inc=65536
<span class="linenr">63: </span>net.inet.tcp.sendbuf_max=2097152
<span class="linenr">64: </span>net.inet.tcp.sendspace=65536
<span class="linenr">65: </span>net.local.stream.recvspace=65536
<span class="linenr">66: </span>net.local.stream.sendspace=65536
</pre>
</div>

<p>
The next lines were added when I was experimenting with sleep on my
librebooted laptop. I couldn't get it to work properly — the laptop still
sometimes overheats and shuts down due to ACPI temperature protection.
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">67: </span><span style="color: #93a1a1;">####################################################</span>
<span class="linenr">68: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Switch virtual consoles back and forth on suspend:</span>
<span class="linenr">69: </span><span style="color: #93a1a1;">####################################################</span>
<span class="linenr">70: </span>kern.vt.suspendswitch=0
<span class="linenr">71: </span>hw.acpi.sleep_delay=0
<span class="linenr">72: </span>hw.acpi.verbose=1
</pre>
</div>

<p>
After librebooting my laptop and suddenly finding that my RTC battery is
dead — I force the kernel to save system time to the RTC on system shutdown:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">73: </span><span style="color: #93a1a1;">#######################</span>
<span class="linenr">74: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Save datetime to RTC:</span>
<span class="linenr">75: </span><span style="color: #93a1a1;">#######################</span>
<span class="linenr">76: </span>machdep.disable_rtc_set=0
</pre>
</div>

<p>
Of course, I replaced the dead battery with the new one, but because I'm using
the laptop in the places where the Internet may not exists — I'm really
dependent on the right time value from the RTC chip.
</p>
</div>
</div>
<div id="outline-container-x-window-system" class="outline-2">
<h2 id="x-window-system">X Window System</h2>
<div class="outline-text-2" id="text-x-window-system">
<p>
I still use the X server in all my computers because … it just works and
requires minimal or no configuration itself (unless you need very special
features). I read a lot of comments on Reddit where people blame the X server
for requiring manual configuration, problems with video output, freezes,
crashes, and so on. But I have never experienced such problems with my Radeon,
NVidia and Intel integrated cards. The last time I was forced to configure X
server by hand was almost 2006-2007<sup><a id="fnr.slackware" class="footref" href="#fn.slackware" role="doc-backlink">3</a></sup>. The problems usually came with
video drivers in the extremely customized systems, like Gentoo with a custom
kernel and FreeBSD on the machine with a soldered-on 2K expansion board and 2K
display.
</p>

<p>
On my BSD box I have these lines in
<code>/usr/local/etc/X11/xorg.conf.d/10-intel.conf</code> to get the nice transparency and
other effects with picom:
</p>
<div class="org-src-container">
<pre class="src src-nil"><span class="linenr"> 1: </span>Section "Device"
<span class="linenr"> 2: </span>    Identifier  "Card0"
<span class="linenr"> 3: </span>    Driver      "intel"
<span class="linenr"> 4: </span>    BusID       "PCI:0:2:0"
<span class="linenr"> 5: </span>    Option      "Accel"        "true"
<span class="linenr"> 6: </span>    Option      "AccelMethod"  "SNA"
<span class="linenr"> 7: </span>    Option      "DRI"          "3"
<span class="linenr"> 8: </span>    Option      "TearFree"     "true"
<span class="linenr"> 9: </span>EndSection
<span class="linenr">10: </span>
<span class="linenr">11: </span>Section "Module"
<span class="linenr">12: </span>    Load        "dri3"
<span class="linenr">13: </span>EndSection
</pre>
</div>

<p>
Sometimes I use an external IBM MU29J ball mouse with two buttons:
</p>

<p>
    <img alt="IBM black ball mouse" style="height: 100%; width: 100%;
        object-fit: cover" src="/assets/images/uses/mouse.jpg"/>
</p>

<p>
So I added the next configuration for the X server to
<code>/usr/local/etc/X11/xorg.conf.d/20-ibm.conf</code>. This allows me to press the left
and right buttons at the same time to simulate pressing the middle button.
</p>

<div class="org-src-container">
<pre class="src src-nil"><span class="linenr">1: </span>Section "InputClass"
<span class="linenr">2: </span>    Identifier "IBM MU29J Mouse"
<span class="linenr">3: </span>    Driver "libinput"
<span class="linenr">4: </span>    MatchDevicePath "/dev/input/event9"
<span class="linenr">5: </span>    Option "MiddleEmulation" "on"
<span class="linenr">6: </span>    Option "AccelProfile" "flat"
<span class="linenr">7: </span>    Option "AccelSpeed" "1.0"
<span class="linenr">8: </span>EndSection
</pre>
</div>

<p>
The path <code>/dev/input/event9</code> is taken from <code>/var/log/Xorg.0.log</code> — it is printed
in this file after the mouse is connected.
</p>

<p>
The last custom configuration is a few lines to disable the touchpad when the
external mouse is connected and to send a click event when I tap on the
touchpad (it was disabled by default):
</p>

<div class="org-src-container">
<pre class="src src-nil"><span class="linenr">1: </span>Section "InputClass"
<span class="linenr">2: </span>    Identifier "X220 Touchpad"
<span class="linenr">3: </span>    MatchIsTouchpad "on"
<span class="linenr">4: </span>    MatchDevicePath "/dev/input/event*"
<span class="linenr">5: </span>    Driver "libinput"
<span class="linenr">6: </span>    Option "Tapping" "on"
<span class="linenr">7: </span>    Option "SendEventsMode" "disabled-on-external-mouse"
<span class="linenr">8: </span>EndSection
</pre>
</div>

<p>
I saved it as <code>/usr/local/etc/X11/xorg.conf.d/30-touchpad.conf</code> and after
restarting the X server, my touchpad automatically disables when the IBM mouse
is connected.
</p>
</div>
</div>
<div id="outline-container-power-management" class="outline-2">
<h2 id="power-management">Power management</h2>
<div class="outline-text-2" id="text-power-management">
<p>
To prolong life of the laptop when it's running on battery, I've just been
using the <a href="https://man.freebsd.org/cgi/man.cgi?powerd">powerd(8)</a> (this line from the <code>/etc/rc.conf</code>):
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #268bd2;">powerd_enable</span>=<span style="color: #2aa198;">"YES"</span>
</pre>
</div>

<p>
All necessary configuration are also placed in the <code>/etc/rc.conf</code>:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">35: </span><span style="color: #93a1a1;">######################</span>
<span class="linenr">36: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Power configuration:</span>
<span class="linenr">37: </span><span style="color: #93a1a1;">######################</span>
<span class="linenr">38: </span><span style="color: #268bd2;">powerd_flags</span>=<span style="color: #2aa198;">"-a hiadaptive -b adaptive -i 75 -N -M 2000"</span>
<span class="linenr">39: </span><span style="color: #268bd2;">performance_cx_lowest</span>=<span style="color: #2aa198;">"Cmax"</span>
<span class="linenr">40: </span><span style="color: #268bd2;">economy_cx_lowest</span>=<span style="color: #2aa198;">"Cmax"</span>
</pre>
</div>

<p>
Here I just select the <code>hiadaptive</code> mode when the laptop is running on AC power
and the <code>adaptive</code> mode when it is running on battery. As described in the
powerd man page:
</p>

<pre class="example">
hiadaptive  Like adaptive mode, but tuned for systems where performance
            and interactivity are more important than power consump-
            tion.  It increases frequency faster, reduces frequency
            less aggressively, and will maintain full frequency for
            longer.  May be abbreviated as hadp.
</pre>

<pre class="example">
adaptive    Attempt to strike a balance by degrading performance when
            the system appears idle and increasing it when the system
            is busy.  It offers a good balance between a small perfor-
            mance loss for greatly increased power savings.  May be ab-
            breviated as adp.
</pre>

<p>
Then I slightly increase the CPU load percent level at which powerd will start
to degrade performance to save the battery power. The default was at 50% and I
set it to the 75%.
</p>

<p>
And I set the maximum frequency that powerd will use to 2 GHz. Out of the box
my CPU can run at a maximum of 2.7 GHz, but I don't need so much computation
power, so I keep it at 2 GHz. The most CPU-intensive program — Librewolf with
a YouTube video playing in a tab — still works well with a 2 GHz CPU.
</p>

<p>
But I don't like it when my CPU is too hot (close to 50-60°C) when I watch the
YouTube videos. So, in order to trade some silence for CPU temperature, I
install the <a href="https://github.com/claudiozz/bsdfan">bsdfan</a> utility. This little thing allows me to tweak the
temperature levels at which the fan starts spinning.
</p>

<p>
This daemon starts with these simple lines in <code>/etc/rc.local</code>:
</p>
<div class="org-src-container">
<pre class="src src-shell"><span style="color: #93a1a1;">#</span><span style="color: #93a1a1;">!/bin/</span><span style="color: #859900; font-weight: bold;">sh</span>

/usr/local/bin/bsdfan -d
</pre>
</div>

<p>
And to stop the daemon on system shutdown, these lines were added to the
<code>/etc/rc.shutdown.local</code>:
</p>
<div class="org-src-container">
<pre class="src src-shell"><span style="color: #93a1a1;">#</span><span style="color: #93a1a1;">!/bin/</span><span style="color: #859900; font-weight: bold;">sh</span>

/usr/bin/pkill bsdfan
</pre>
</div>

<p>
I use the default configuration file, placed in the <code>/usr/local/etc/bsdfan.conf</code>
with tweaked values that I choose experimentally:
</p>
<div class="org-src-container">
<pre class="src src-nil">#Levels are defined with: level(level_number, level_min_temperature, level_max_temperature)
#level_number goes from 0 (fan not active) to 7 (fan at full speed)
#not all levels have to be used

#the first level 'level_min_temperature' must be equal to 0 and the last level 'level_max_temperature' must be &gt;150
#please define levels in ascending order by level_number
#be careful

level (0,0,39)
level (1,38,46)
level (3,39,49)
level (4,44,51)
level (5,46,52)
level (7,49,32767)
</pre>
</div>
</div>
</div>
<div id="outline-container-networking" class="outline-2">
<h2 id="networking">Networking</h2>
<div class="outline-text-2" id="text-networking">
<p>
I have the two network interfaces on the laptop:
</p>
<ul class="org-ul">
<li><code>em0</code> — the Ethernet card</li>
<li><code>wlan0</code> — the WiFi card.</li>
</ul>

<p>
Speaking of Ethernet it's pretty easy to configure. Just ask the DHCP server
for the network configuration and do it in the background so the system
doesn't wait at boot time if it's not connected to any networks:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">41: </span><span style="color: #93a1a1;">########################</span>
<span class="linenr">42: </span><span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">Network configuration:</span>
<span class="linenr">43: </span><span style="color: #93a1a1;">########################</span>
<span class="linenr">44: </span><span style="color: #268bd2;">ifconfig_em0</span>=<span style="color: #2aa198;">"DHCP"</span>
<span class="linenr">45: </span><span style="color: #268bd2;">ifconfig_em0_descr</span>=<span style="color: #2aa198;">"Ethernet"</span>
<span class="linenr">46: </span><span style="color: #268bd2;">background_dhclient</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">47: </span><span style="color: #268bd2;">background_dhclient_em0</span>=<span style="color: #2aa198;">"YES"</span>
<span id="coderef-rc-conf-route-delay" class="coderef-off"><span class="linenr">48: </span><span style="color: #268bd2;">defaultroute_delay</span>=<span style="color: #2aa198;">"0"</span></span>
</pre>
</div>

<p>
Line <a href="#coderef-rc-conf-route-delay" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-rc-conf-route-delay');" onmouseout="CodeHighlightOff(this, 'coderef-rc-conf-route-delay');">48</a> tells the system not to wait at boot while the
interface(s) are getting address(es) from DHCP — it's also to speed up booting
when there are no networks.
</p>

<p>
The WiFi configuration is much trickier. Since I'm using an Intel 8260 WiFi
card<sup><a id="fnr.4" class="footref" href="#fn.4" role="doc-backlink">4</a></sup>, I can't (for now<sup><a id="fnr.freebsd-wifi" class="footref" href="#fn.freebsd-wifi" role="doc-backlink">5</a></sup>) rely on the default FreeBSD
drivers if I want to use the new enough IEEE 802.11 standards. So I start
using the <a href="https://github.com/pgj/freebsd-wifibox">wifibox</a>:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span style="color: #268bd2;">wifibox_enable</span>=<span style="color: #2aa198;">"YES"</span>
</pre>
</div>

<p>
The system-side configuration is quite simple, and copies the configuration
for the <code>em0</code> interface:
</p>

<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">49: </span><span style="color: #268bd2;">ifconfig_wifibox0_descr</span>=<span style="color: #2aa198;">"WiFi (wifibox)"</span>
<span class="linenr">50: </span><span style="color: #268bd2;">ifconfig_wifibox0</span>=<span style="color: #2aa198;">"SYNCDHCP"</span>
<span class="linenr">51: </span><span style="color: #268bd2;">background_dhclient_wifibox0</span>=<span style="color: #2aa198;">"YES"</span>
</pre>
</div>

<p>
The configuration of the wifibox is well described in it's documentation and I
won't write about it here.
</p>
</div>
<div id="outline-container-usb-tethering" class="outline-3">
<h3 id="usb-tethering">USB tethering</h3>
<div class="outline-text-3" id="text-usb-tethering">
<p>
After reading the FreeBSD Handbook for the nth time, I found a few sentences
about USB tethering.
</p>

<p>
Back in the days, then phones didn't have the "smart" prefix, I used the cable
to connect my laptop to the Internet with my phone. The setup looks like this:
</p>
<ul class="org-ul">
<li>The phone connects to the Internet via the GPRS</li>
<li>The laptop connects to the phone via the USB cable</li>
<li>The driver in the OS (Linux) sees the phone as a usual modem (from the
dial-up era, of course).</li>
<li>Then the laptop can connect to the Internet via the <code>ppp</code>, just like in the
old days of 56K.</li>
</ul>

<p>
Times have changed and now smartphones can share their Internet connection via
WiFi. I have used this feature for some time. It has some advantages — for
example, if the WiFi interface is already configured on the system, then the
user should just connect to the right AP with the right password as usual to
connect to the Internet. There are also some disadvantages — the WiFi AP is
visible to everyone and the radio transmission drains the batteries of both
the laptop and the phone.
</p>

<p>
So I decided to experiment with USB tethering on the modern system to extend
the battery life and reduce the EMR for my devices. I used the Android phone,
other phones should use the different kernel modules<sup><a id="fnr.tethering-modules" class="footref" href="#fn.tethering-modules" role="doc-backlink">6</a></sup>.
</p>

<p>
On the FreeBSD side, the configuration is simple — I've just added the next
lines to <code>/etc/rc.conf</code> and rebooted:
</p>
<div class="org-src-container">
<pre class="src src-shell"><span class="linenr">52: </span><span style="color: #268bd2;">if_urndis_load</span>=<span style="color: #2aa198;">"YES"</span>
<span class="linenr">53: </span><span style="color: #268bd2;">ifconfig_ue0</span>=<span style="color: #2aa198;">"DHCP"</span>
<span class="linenr">54: </span><span style="color: #268bd2;">ifconfig_ue0_descr</span>=<span style="color: #2aa198;">"Motorola Defy (tethering)"</span>
</pre>
</div>

<p>
On the phone side, the configuration is much easier — just connect the phone
to the laptop with the USB cable and select "USB tethering" in the
notification area.
</p>

<p>
After that, the <code>dmesg</code> should show that the OS has recognized the device as a
USB Ethernet peripheral:
</p>
<pre class="example">
ugen1.2: &lt;unknown TrebleDroid vanilla&gt; at usbus1
ugen1.2: &lt;unknown TrebleDroid vanilla&gt; at usbus1 (disconnected)
ugen1.2: &lt;unknown TrebleDroid vanilla&gt; at usbus1
urndis0 on uhub0
urndis0: &lt;unknown TrebleDroid vanilla, class 0/0, rev 2.00/4.19, addr 1&gt; on usbus1
ue0: &lt;USB Ethernet&gt; on urndis0
ue0: Ethernet address: 16:b5:c1:e6:61:58
</pre>

<p>
Then, to establish the connection through the new interface, the following
commands can be issued:
</p>
<pre class="example">
# service netif restart ue0
# service dhclient restart ue0
</pre>

<p>
I wrote a simple script to connect over the phone without typing a lot of
commands:
</p>
<div class="org-src-container">
<pre class="src src-shell"><span style="color: #93a1a1;">#</span><span style="color: #93a1a1;">!/usr/bin/</span><span style="color: #859900; font-weight: bold;">env</span><span style="color: #93a1a1;"> zsh</span>

<span style="color: #859900; font-weight: bold;">if</span> [ -f /usr/bin/x11-ssh-askpass ]; <span style="color: #859900; font-weight: bold;">then</span>
    <span style="color: #657b83; font-weight: bold;">export</span> <span style="color: #268bd2;">SUDO_ASKPASS</span>=<span style="color: #2aa198;">"/usr/bin/x11-ssh-askpass"</span>
<span style="color: #859900; font-weight: bold;">elif</span> [ -f /usr/local/bin/x11-ssh-askpass ]; <span style="color: #859900; font-weight: bold;">then</span>
    <span style="color: #657b83; font-weight: bold;">export</span> <span style="color: #268bd2;">SUDO_ASKPASS</span>=<span style="color: #2aa198;">"/usr/local/bin/x11-ssh-askpass"</span>
<span style="color: #859900; font-weight: bold;">else</span>
    <span style="color: #859900; font-weight: bold;">exit</span> 1
<span style="color: #859900; font-weight: bold;">fi</span>

<span style="color: #859900; font-weight: bold;">case</span> $(<span style="color: #657b83; font-weight: bold;">echo</span> <span style="color: #2aa198;">"disable wifi:phone connect:phone disconnect"</span> | rofi -dpi 0 -dmenu -sep <span style="color: #2aa198;">":"</span> -p <span style="color: #2aa198;">"Select"</span>) <span style="color: #859900; font-weight: bold;">in</span>
    <span style="color: #2aa198;">"disable wifi"</span>)
        sudo -A service wifibox stop
        ;;
    <span style="color: #2aa198;">"phone connect"</span>)
        sudo -A service netif stop em0
        sudo -A service wifibox stop
        sudo -A service netif restart ue0
        sudo -A service dhclient restart ue0
        ;;
    <span style="color: #2aa198;">"phone disconnect"</span>)
        sudo -A service netif restart
        sudo -A service wifibox restart
        sudo -A service dhclient restart em0
        sudo -A service dhclient restart wifibox0
        ;;
<span style="color: #859900; font-weight: bold;">esac</span>
</pre>
</div>

<p>
This code displays a rofi menu with the three items and runs the appropriate
commands with sudo. The sudo will ask for a password using the askpass facility and
then execute the necessary set of commands to enable/disable network
interfaces.
</p>
</div>
</div>
</div>
<div id="outline-container-storage" class="outline-2">
<h2 id="storage">Storage</h2>
<div class="outline-text-2" id="text-storage">
<p>
Let's review my storage-specific configuration. As you can see from the <a href="#etc-rc-conf">/etc/rc.conf</a> section, I'm using the <a href="https://man.freebsd.org/cgi/man.cgi?query=autofs&amp;sektion=5&amp;format=html">autofs(5)</a> to automount the removable USB
drives with the next (default) configuration in the <code>/etc/auto_master</code>:
</p>
<pre class="example">
#
# Automounter master map, see auto_master(5) for details.
#
/net		-hosts		-nobrowse,nosuid,intr
# When using the -media special map, make sure to edit devd.conf(5)
# to move the call to "automount -c" out of the comments section.
/media		-media		-nosuid
</pre>

<p>
As you can see from the output of the <code>zpool status zroot</code> command at the top of
the post — I am using two disks in a pool for the root filesystem. Some data
is written to the 500 Gb SSD and some is written to the 150 Gb SSD:
</p>
<pre class="example">
# zpool iostat -v zroot
                capacity     operations     bandwidth
pool          alloc   free   read  write   read  write
------------  -----  -----  -----  -----  -----  -----
zroot         97.1G   482G     59     17  6.26M   622K
  ada0p3.eli  35.3G  99.7G     21      7  2.26M   231K
  ada2p3.eli  61.9G   382G     38     10  3.99M   391K
------------  -----  -----  -----  -----  -----  -----
</pre>

<p>
There is no redundancy — if one disk fails, the entire root filesystem
fails. So backups a very important to me.
</p>

<p>
ZFS comes to the rescue here! To make a snapshot of the root filesystem, I use
the next command (after the <code>@</code> symbol you can add any string you like, usually
the timestamp):
</p>
<pre class="example">
# zfs snapshot -r zroot@2025-03-09
</pre>

<p>
To check which snapshot was created, I use the next command for the <code>zroot</code>
mounted on the <code>/</code>:
</p>
<pre class="example">
% s ls -ls /.zfs/snapshot
total 255
17 drwxr-xr-x  20 root wheel   26B Jun 26  2024 2024-06-26-21:56:36-0/
17 drwxr-xr-x  20 root wheel   26B Jun 26  2024 2024-06-26-22:36:03-0/
17 drwxr-xr-x  20 root wheel   26B Jun 26  2024 2024-06-26-22:39:36-0/
17 drwxr-xr-x  20 root wheel   26B Jun 27  2024 2024-06-26-22:48:38-0/
17 drwxr-xr-x  20 root wheel   26B Aug 23  2024 2024-08-23-17:11:49-0/
17 drwxr-xr-x  20 root wheel   26B Sep  5  2024 2024-09-05-08:32:00-0/
17 drwxr-xr-x  20 root wheel   26B Oct 10 10:29 2024-10-10-10:58:23-0/
17 drwxr-xr-x  22 root wheel   28B Oct 30 20:09 2024-10-30-21:48:22-0/
17 drwxr-xr-x  22 root wheel   28B Jan 26 14:59 2025-01-26-17:15:24-0/
17 drwxr-xr-x  22 root wheel   28B Jan 26 17:17 2025-01-26-17:18:53-0/
17 drwxr-xr-x  22 root wheel   28B Feb  4 21:18 2025-02-04-21:20:58-0/
17 drwxr-xr-x  22 root wheel   28B Feb 10 01:32 2025-02-10-02:16:57-0/
17 drwxr-xr-x  22 root wheel   28B Feb 25 00:30 2025-02-25-00:45:45-0/
17 drwxr-xr-x  22 root wheel   28B Mar  9 10:40 2025-03-09/
17 drwxr-xr-x  21 root wheel   27B Oct 27 01:45 backup_recursive_2024-10-27/
</pre>

<p>
As you can see, there are a lot of outdated backups, mostly created by the
<code>freebsd-update</code> utility. I remove them with the <code>zfs destroy</code> command:
</p>
<pre class="example">
# zfs destroy -R zroot@backup_recursive_2024-10-27
# zfs destroy -R zroot/ROOT/default@2024-06-26-21:56:36-0
# zfs destroy -R zroot/ROOT/default@2024-06-26-22:36:03-0
# zfs destroy -R zroot/ROOT/default@2024-06-26-22:39:36-0
...
</pre>

<p>
After that, the only one (current) snapshot remains in the system:
</p>
<pre class="example">
# zfs list -r -t snapshot
NAME                            USED  AVAIL  REFER  MOUNTPOINT
zroot@2025-03-09                  0B      -    96K  -
zroot/ROOT@2025-03-09             0B      -    96K  -
zroot/ROOT/default@2025-03-09     0B      -  43.6G  -
zroot/home@2025-03-09             0B      -  49.9G  -
zroot/tmp@2025-03-09              0B      -   224K  -
zroot/usr@2025-03-09              0B      -    96K  -
zroot/usr/ports@2025-03-09        0B      -  2.65G  -
zroot/usr/src@2025-03-09          0B      -   857M  -
zroot/var@2025-03-09              0B      -    96K  -
zroot/var/audit@2025-03-09        0B      -   360K  -
zroot/var/crash@2025-03-09        0B      -    96K  -
zroot/var/log@2025-03-09          0B      -  3.93M  -
zroot/var/mail@2025-03-09         0B      -   576K  -
zroot/var/tmp@2025-03-09          0B      -   104K  -
# ls -ls /.zfs/snapshot
total 17
17 drwxr-xr-x  22 root wheel   28B Mar  9 10:40 2025-03-09/
</pre>

<p>
Restoring from this snapshot can be done with the:
</p>
<pre class="example">
# zfs rollback zroot@2025-03-09
</pre>

<p>
Snapshot can also be sent anywhere with the:
</p>
<pre class="example">
# zfs send zroot@2025-03-09 | send_it_somewhere
</pre>

<p>
or:
</p>

<pre class="example">
# zfs send zroot@2025-03-09 &gt; /backup/2025-03-09-zroot.snap
</pre>

<p>
To check the health of my disks and to verify the checksums of the files in my
pools, here are the next set of commands:
</p>
<pre class="example">
 $ zpool status -x
all pools are healthy
# zpool scrub zroot
# zpool scrub hdd
</pre>

<p>
The last two commands start a lot of heavy I/O operations, so don't launch
them if the system is already using the disks intensively! Estimates and
results of the scrubbing operation can be viewed using the <code>zpool status</code>
command.
</p>

<p>
The FreeBSD Handbook recommends launch scrubbing at least once a month.
</p>
</div>
</div>
<div id="outline-container-fingerprint-scanner" class="outline-2">
<h2 id="fingerprint-scanner">Fingerprint scanner</h2>
<div class="outline-text-2" id="text-fingerprint-scanner">
<p>
Some day, some time, I decided to configure fingerprint scanner on my
laptop. Many years ago I wrote an article about libfprint for IBM Portal, so I
thought that setting up fingerprint service will not be so difficult.
</p>


<div class="figure">
<p><img src="/assets/static/fingerprint_scanner.jpg" alt="fingerprint scanner with turned on green LED on the left" align="center" width="50%" />
</p>
<p style="text-align: center"><i>Thinkpad X220 fingerprint scanner</i></p>
</div>

<p>
As a starting documentation I take the next blog post:
<a href="https://hauweele.net/~gawen/blog/?p=408">https://hauweele.net/~gawen/blog/?p=408</a> and slightly modify some steps to fit
them to my system:
</p>

<ol class="org-ol">
<li><p>
First, I install all the necessary packages:
</p>
<pre class="example">
pkg install fprintd libfprint
</pre></li>
<li><p>
Then, I add my user to the <code>fprint</code> group to access the scanner device
without elevating to root:
</p>
<pre class="example">
pw groupadd fprint
pw groupmod fprint -m drag0n
</pre></li>
<li><p>
To get the correct permissions on the device file itself, I play with
<code>devd</code> — create the file <code>/usr/local/etc/devd/fingerprint.conf</code> and add the
following lines:
</p>
<pre class="example">
notify 100 {
    match "system"      "USB";
    match "subsystem"   "DEVICE";
    match "type"        "ATTACH";
    match "vendor"      "0x147e";
    match "product"     "0x2016";
    action "chown drag0n:fprint /dev/$cdev &amp;&amp; chmod 660 /dev/$cdev";
};
</pre>

<p>
After that I reboot the system to apply the new settings.
</p></li>
<li><p>
Then, I ran into the D-Bus-related problems🤮. The <code>libfprint</code> utilities
communicate with the daemon via D-Bus and my user can't connect to the
daemon via it.
</p>

<p>
I don't use D-Bus in my system — I only have it to work with the <a href="https://dunst-project.org/">dunst
notification daemon</a>. There is a lightweight replacement for the big
notification daemons of a large desktop environments, which I obviously
don't use either. It works fine for me out of the box.
</p>

<p>
But it is not a case of <code>libfprint</code> utilities. So I've added the next lines
to <code>/usr/local/share/dbus-1/system.d/net.reactivated.Fprint.conf</code>:
</p>

<pre class="example">
&lt;policy user="drag0n"&gt;
  &lt;allow own="net.reactivated.Fprint"/&gt;
&lt;/policy&gt;
</pre></li>
<li><p>
And finally it's time to use fingerprints instead of passwords! Because I'm
a bit paranoid, I don't want to use fingerprints instead of a login
password or any other high-value passwords (like a password to unlock a GPG
key). Obviously, if I do that, then <i>some</i> bad actors can forcibly roll my
finger on the scanner and get access to my system.
</p>

<p>
So, I decide to use fingerprint instead of password only with <code>sudo</code>. If I'm
already logged in and someone catches me and forcibly rolls my finger —
then I'm <b>already</b> <i>sooo fucked up</i> before that event!
</p>

<p>
To use the fingerprint scanner with <code>sudo</code>, I've just added this line to the
top of the file <code>/usr/local/etc/pam.d/sudo</code>:
</p>

<pre class="example">
auth       sufficient  /usr/local/lib/security/pam_fprintd.so
</pre></li>
<li>Finally, I soft reboot the system with <code>reboot -r</code> and enroll my finger with
the <code>sudo fprintd-enroll drag0n</code> command. To verify that the finger was
successfully scanned, I killed the <code>fprintd</code> daemon and verified the finger
with the <code>fprintd-verify</code> command.</li>
</ol>

<p>
Now, <code>sudo</code> asks me for my finger first and then asks for the password after
three failed attempts to get a proper fingerprint:
</p>
<pre class="example">
~ % sudo uname
Swipe your right index finger across the fingerprint reader
Your finger was not centered, try swiping your finger again
FreeBSD
</pre>
</div>
</div>
<div id="outline-container-files-to-download" class="outline-2">
<h2 id="files-to-download">Files to download</h2>
<div class="outline-text-2" id="text-files-to-download">
<ul class="org-ul">
<li><a href="/assets/static/loader.conf.txt">/boot/loader.conf</a></li>
<li><a href="/assets/static/rc.conf.txt">/etc/rc.conf</a></li>
<li><a href="/assets/static/sysctl.conf.txt">/etc/sysctl.conf</a></li>
<li><a href="/assets/static/10-intel.conf.txt">/usr/local/etc/X11/xorg.conf.d/10-intel.conf</a></li>
<li><a href="/assets/static/20-ibm.conf.txt">/usr/local/etc/X11/xorg.conf.d/20-ibm.conf</a></li>
<li><a href="/assets/static/30-touchpad.conf.txt">/usr/local/etc/X11/xorg.conf.d/30-touchpad.conf</a></li>
<li><a href="/assets/static/bsdfan.conf.txt">/usr/local/etc/bsdfan.conf</a></li>
<li><a href="/assets/static/phone-connect.sh.txt">phone-connect.sh</a></li>
</ul>
</div>
</div>
<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Notes</h2>
<div class="outline-text-2" id="text-notes">
</div>
</div>
<div id="footnotes">

<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.modesetting-wiki" class="footnum" href="#fnr.modesetting-wiki" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://en.wikipedia.org/wiki/Mode_setting">https://en.wikipedia.org/wiki/Mode_setting</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.dtrace-internal" class="footnum" href="#fnr.dtrace-internal" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
For example, it is possible to call <code>panic()</code> via DTrace.
</p></div></div>

<div class="footdef"><sup><a id="fn.slackware" class="footnum" href="#fnr.slackware" role="doc-backlink">3</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
In these times I used Slackware (MOPSLinux) and <code>Xconfigure</code>
generates wrong <code>/etc/X11/xorg.conf</code> for my AGP video card and CRT monitor, so I
was forced to write it by hands with proper monitor description and
proprietary driver's section included.
</p>

<p class="footpara">
<a href="https://eugene-andrienko.com/en/it/2024/01/02/life-in-console">https://eugene-andrienko.com/en/it/2024/01/02/life-in-console</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.4" class="footnum" href="#fnr.4" role="doc-backlink">4</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
TL-8260D2W
</p></div></div>

<div class="footdef"><sup><a id="fn.freebsd-wifi" class="footnum" href="#fnr.freebsd-wifi" role="doc-backlink">5</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://freebsdfoundation.org/blog/why-laptop-support-why-now-freebsds-strategic-move-toward-broader-adoption/">Why laptop support, why now: FreeBSD’s strategic move toward
broader adoption</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.tethering-modules" class="footnum" href="#fnr.tethering-modules" role="doc-backlink">6</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
See the documentation:
<a href="https://docs.freebsd.org/en/books/handbook/advanced-networking/#network-usb-tethering">https://docs.freebsd.org/en/books/handbook/advanced-networking/#network-usb-tethering</a>
</p></div></div>


</div>
</div>]]></content><author><name>Eugene Andrienko</name></author><category term="it" /><category term="freebsd" /><category term="thinkpad" /><summary type="html"><![CDATA[Since I've wrote post about my specific FreeBSD settings for Thinkpad X220 near 5 years have passed. That post has a lot of additions and become a bit messy. So, after I updated FreeBSD on my laptop up to 14.2 version and finally found some time to carefully read a "FreeBSD handbook", I decided to write a new article about my configuration and about few useful utilities and tricks.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://eugene-andrienko.com/assets/static/freebsd14-2-thinkpad.jpg" /><media:content medium="image" url="https://eugene-andrienko.com/assets/static/freebsd14-2-thinkpad.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="ru"><title type="html">LineageOS 21 на Motorola Defy (2021)</title><link href="https://eugene-andrienko.com/it/2025/02/08/motorola-defy-2021-lineage-os.html" rel="alternate" type="text/html" title="LineageOS 21 на Motorola Defy (2021)" /><published>2025-02-08T00:00:00+03:00</published><updated>2025-02-08T00:00:00+03:00</updated><id>https://eugene-andrienko.com/it/2025/02/08/motorola-defy-2021-lineage-os</id><content type="html" xml:base="https://eugene-andrienko.com/it/2025/02/08/motorola-defy-2021-lineage-os.html"><![CDATA[<p>
Вот уже около 3 лет я пользуюсь смартфоном <a href="https://www.gsmarena.com/motorola_defy_(2021)-10969.php">Motorola Defy (2021)</a>. Это один из
немногих защищённых телефонов с поддержкой стандарта <a href="https://en.wikipedia.org/wiki/IP_code#Code_breakdown">IP68</a>, который не
выделяется своей толщиной и влезает в обычный карман. Со стороны кажется будто
это просто обычный телефон в чехле, но на самом деле это не чехол, а корпус
самого телефона.
</p>

<p>
За 3 года использования я много раз проверял его защищённость:
</p>
<ul class="org-ul">
<li>Ронял боком на кафельный пол и на асфальт.</li>
<li>Использовал под дождём и в условиях крайне высокой влажности.</li>
<li>Ронял дисплеем вниз на кафельный пол.</li>
<li>Ронял дисплеем вниз на асфальт, прямо в лужу.</li>
</ul>

<p>
Тем не менее единственное повреждение телефона — небольшая вмятина на углу,
когда я уронил телефон выходя из машины.
</p>

<p>
К сожалению, не могу похвалить теми же словами software внутри
телефона. Внутри есть ненужное мне (но не удаляемое) приложение для просмотра
прогнозов погоды от Motorola. И полный набор неудаляемых приложений от Google,
который я либо не использую, либо в принципе не могу использовать, в силу
недоступности соответствующих сервисов в РФ (например Google Pay).
</p>

<p>
Также, после того как я вошёл в свой Google-аккаунт с телефона — магазин
приложений Google Play сошёл с ума и начал устанавливать кучу ненужных мне
российских приложений: Госуслуги, ВК, Одноклассники, чуть ли не все приложения
Яндекса, MirPay и вроде бы даже какое-то приложение от СберБанка. К счастью,
они устанавливались как обычные приложения и их было легко удалить.
</p>

<p>
Большую часть времени я использовал FOSS-приложения из F-Droid и горя не
знал. Но, как это обычно бывает, после того как прилетело очередное обновление
от Google, начались проблемы. Иногда, при установке или обновления приложения
показывалось примерно вот такое «предупреждающее» окно от Google Safety Net:
</p>


<div class="figure">
<p><img src="/assets/static/google_play_protect.png" alt="Google safety warning than installing applications from F-Droid" align="center" width="25%" />
</p>
</div>

<p>
В конечном итоге, подобное «заботливое» поведение Google мне надоело. Заодно,
хотелось избавиться от ряда предустановленных приложений и получить
возможность устанавливать и обновлять приложения из F-Droid нажатием одной
кнопки, без постоянно всплывающего диалогового окна от Android: «а вы точно
хотите установить это приложение?»
</p>

<p>
Я знал, что можно получить всё желаемое, установив какую-нибудь опенсорсную
сборку Android на телефон — главное чтобы она поддерживала железо телефона и
предоставляла доступ к пользователю root. Поскольку телефон не очень
популярный — <a href="https://grapheneos.org/">GrapheneOS</a>, <a href="https://postmarketos.org/">postmarketOS</a> и прочие операционные системы, известные
в узких кругах, не поддерживали его железо.
</p>

<p>
К счастью, на форуме XDA Developers, <a href="https://xdaforums.com/f/motorola-defy-2021.12369/">в разделе</a> посвящённом Motorola Defy
(2021) нашлись кое-какие темы, которые могли мне помочь.
</p>
<div class="outline-2">
<h2>TOC&#xa0;&#xa0;&#xa0;<span class="tag"></span></h2>
<div class="outline-text-2">
<ul class="org-ul">
<li><a href="#preparations">Подготовка к перепрошивке телефона</a></li>
<li><a href="#bootloader-unlock">Разблокировка загрузчика</a></li>
<li><a href="#system-software-reflash">Перезапись всего системного ПО</a></li>
<li><a href="#lineage-os-install">Установка Lineage OS</a></li>
<li><a href="#android-root">Получение доступа к пользователю root</a></li>
<li><a href="#4g-calls-sms">Звонки и СМС с 4G</a></li>
<li><a href="#disable-floating-shit-on-copy">Отключение всплывающей ерунды при копировании текста</a></li>
<li><a href="#turn-off-usb-debugging">Отключение отладки по USB</a></li>
<li><a href="#root-apps">Приложения, ради которых нужен root</a>
<ul class="org-ul">
<li><a href="#appstores">Магазины приложений</a></li>
<li><a href="#firewall">Firewall (AFWall+)</a></li>
<li><a href="#adblocker">System-wide блокировщик рекламы (AdAway)</a></li>
<li><a href="#acca">AccA — управление зарядкой/разрядкой аккумулятора</a></li>
<li><a href="#colorblendr">Изменение цветов системной темы (ColorBlendr)</a></li>
<li><a href="#sdmaid2se">SD Maid 2/SE — очистка системы от мусора</a></li>
</ul></li>
<li><a href="#backups">Резервное копирование</a>
<ul class="org-ul">
<li><a href="#neobackup">Neo Backup</a></li>
<li><a href="#flash-memory-backup">Резервное копирование flash-памяти телефона</a></li>
</ul></li>
<li><a href="#bugs">BUGS</a></li>
<li><a href="#notes">Примечания</a></li>
</ul>
</div>
</div>
<div id="outline-container-preparations" class="outline-2">
<h2 id="preparations">Подготовка к перепрошивке телефона</h2>
<div class="outline-text-2" id="text-preparations">
<p>
В первую очередь, я сделал список нужных мне приложений на телефоне, чтобы
установить их в новую ОС. Потом, забекапил важные для меня данные, благо
практически все FOSS-приложения на телефоне позволяют сделать резервные копии
пользовательских данных и настроек.
</p>

<p>
Также, на всякий случай, я переписал на бумажку свой IMEI — впоследствии он не
пригодился, но само наличие такой бумажки сохранило множество нервных клеток.
</p>

<p>
Для перепрошивки со стокового Android'а на LineageOS потребовалась всего пара
утилит, установленных на PC:
</p>
<ol class="org-ol">
<li><a href="https://developer.android.com/tools/adb">adb</a> (<code>dev-util/android-tools</code> в Gentoo) — понадобится для доступа к
различным, скрытым от пользователя, настройкам, и для перезагрузки не в
основную ОС, а в различные сервисные программы, которые есть во флеш-памяти
телефона.</li>
<li><a href="https://en.wikipedia.org/wiki/Fastboot">fastboot</a> (устанавливается в том же пакете, что и adb) — позволяет
перепрошивать флеш-память телефона.</li>
</ol>

<p>
Для успешного выполнения одного из следующих шагов я также проверил модель
телефона и код локализации в настройках. <b>NB!</b> Все действия ниже выполнялись для
телефона модели XT2083-9 с локализацией RETEU!
</p>
</div>
</div>
<div id="outline-container-bootloader-unlock" class="outline-2">
<h2 id="bootloader-unlock">Разблокировка загрузчика</h2>
<div class="outline-text-2" id="text-bootloader-unlock">
<p>
По умолчанию, «с завода», Android-смартфоны поставляются с заблокированным
загрузчиком — телефон не позволит перезаписать области флеш-памяти, содержащие
операционную систему или сам загрузчик. С одной стороны это полезная штука,
которая не позволит кому угодно записать что угодно в соответствующие области
памяти, если он получил физический доступ к вашему телефону. С другой стороны,
она же не позволит мне, как владельцу телефона, делать с ним всё, что я захочу.
</p>

<p>
Мне пришлось разблокировать загрузчик, чтобы прошить LineageOS во
флеш-память. Основные шаги перечислены вот по этой ссылке:
<a href="https://source.android.com/docs/core/architecture/bootloader/locking_unlocking">https://source.android.com/docs/core/architecture/bootloader/locking_unlocking</a>.
</p>

<p>
Для начала, нужно было получить доступ к «Developer Options» в настройках. Тут
всё, как обычно — я открыл «System⇒About Phone» и после какого-то количества
тапов по версии Android'а в настройках я получил доступ к нужному пункту
меню. Потом включил «USB debugging» через подменю: «System⇒Advanced⇒Developer
options». Дальше мне надо было перезагрузить телефон в UI загрузчика вместо
основной ОС:
</p>
<ol class="org-ol">
<li>Телефон подключается к PC при помощи USB-кабеля.</li>
<li>В шторке с уведомлениями надо ткнуть на «USB Preferences» и выбрать «Use
USB for: PTP».</li>
<li>Всплывёт окно с предупреждением об отладочном подключении к PC — его надо
разрешить.</li>
<li><p>
Потом стоит проверить, что <code>adb</code> видит подключенный телефон:
</p>
<pre class="example">
% adb devices
List of devices attached
ZY32DG32K2      device
</pre></li>
<li>И наконец, телефон перезагружается командой: <code>adb reboot bootloader</code>.</li>
</ol>

<p>
В результате, экран телефона отобразил вот такой интерфейс:
</p>


<div class="figure">
<p><img src="/assets/static/bootloader.jpg" alt="Motorola Defy (2021) in the bootloader mode" align="center" />
</p>
<p style="text-align: center"><i>Motorola Defy (2021), загруженный в bootloader</i></p>
</div>

<p>
Дальше в дело вступил <code>fastboot</code>. В моём случае эта утилита сначала не видела
телефон. Но после изменения прав доступа на <code>/dev/bus/usb/001/018</code> всё
заработало:
</p>

<pre class="example">
% fastboot devices -l
% lsusb
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 001 Device 002: ID 8087:0024 Intel Corp. Integrated Rate Matching Hub
Bus 001 Device 003: ID 046d:c24e Logitech, Inc. G500s Laser Gaming Mouse
Bus 001 Device 018: ID 22b8:2e80 Motorola PCS Fastboot bathena S
% ls -l /dev/bus/usb/001/
total 0
crw-rw-r-- 1 root usb     189,  0 Dec 31 00:09 001
crw-rw-r-- 1 root usb     189,  1 Dec 31 00:09 002
crw-rw-r-- 1 root usb     189,  2 Dec 31 00:09 003
crw-rw---- 1 root android 189, 17 Dec 31 17:28 018
% sudo chown -R drag0n:drag0n /dev/bus/usb/001/018
% fastboot devices
ZY32DG32K2       fastboot
</pre>

<p>
Чтобы неискушенные пользователи не разблокировали загрузчик по незнанию,
получив таким образом менее защищённый телефон, а искушённые пользователи не
могли делать с телефоном то что им хочется — различные производители требуют
выполнять дополнительные шаги и связываться с ними для выполнения этого
действия. В моём случае для разблокировки загрузчика требовался некий unlock
code:
</p>

<pre class="example">
% fastboot flashing unlock
(bootloader) usage: fastboot oem unlock &lt; unlock code &gt;
FAILED (remote: '')
fastboot: error: Command failed
% fastboot flashing get_unlock_ability
(bootloader) use "oem get_unlock_data" and web portal
(bootloader)     http://motorola.com/unlockbootloader
OKAY [  0.001s]
Finished. Total time: 0.001s
% fastboot oem get_unlock_data
(bootloader) Unlock data:
(bootloader) ███████████████████████████████
(bootloader) ███████████████████████████████
(bootloader) ███████████████████████████████
(bootloader) ███████████████████████████████
(bootloader) ██████████████████
OKAY [  0.017s]
Finished. Total time: 0.017s
</pre>

<p>
К счастью, Motorola не стала изобретать велосипед и просто сделала форму на
сайте, которая принимает «unlock data» и высылает ключ разблокировки,
уникальный для каждого конкретного телефона, на почту. К несчастью, ссылка,
предоставленная командой <code>get_unlock_ability</code> не работала (как обычно), но после
непродолжительного поиска в Интернете мне удалось найти нужную форму на
американской версии сайта Motorola:
<a href="https://en-us.support.motorola.com/app/standalone/bootloader/unlock-your-device-a">https://en-us.support.motorola.com/app/standalone/bootloader/unlock-your-device-a</a>. И
через эту форму я смог получить письмо с кодом разблокировки.
</p>

<p>
Ну а дальше просто разблокировал загрузчик командой:
</p>

<pre class="example">
% fastboot oem unlock ███████████████████████████████
(bootloader) Bootloader is unlocked!
OKAY [ 22.503s]
Finished. Total time: 22.503s
</pre>
</div>
</div>
<div id="outline-container-system-software-reflash" class="outline-2">
<h2 id="system-software-reflash">Перезапись всего системного ПО</h2>
<div class="outline-text-2" id="text-system-software-reflash">
<p>
Согласно инструкции по установке Lineage OS с форума XDA — первым делом мне
нужно было скачать архив с «заводскими» дампами ряда разделов флеш-памяти для
телефона — и прошить их. Как я подозреваю, это нужно как минимум для того,
чтобы иметь у себя на жёстком диске тот же <code>boot.img</code>, что и во флеш-памяти
телефона — этот файл понадобится для получения root'а на телефоне.
</p>

<p>
Основываясь <a href="https://xdaforums.com/t/flash-stock-rom-via-fastboot.4524845/">на этом посте</a> я нашёл <a href="https://www.getdroidtips.com/motorola-defy-2021-stock-firmware/">ссылку</a> на подходящее для моей модели
телефона (XT2083-9, build number RZD31.31) зеркало и внутри, по пути
<code>/firmware/lenomola/2021/bathena/official/RETEU/</code>, был архив
<code>XT2083-9_BATHENA_RETEU_11_RZD31.31_subsidy-DEFAULT_regulatory-XT2083-9-EUROPE-SAR_CFC.xml.zip</code>
с дампами разделов флеш-памяти для телефона:
</p>

<pre class="example">
% unzip XT2083-9_BATHENA_RETEU_11_RZD31.31_subsidy-DEFAULT_regulatory-XT2083-9-EUROPE-SAR_CFC.xml.zip
Archive:  XT2083-9_BATHENA_RETEU_11_RZD31.31_subsidy-DEFAULT_regulatory-XT2083-9-EUROPE-SAR_CFC.xml.zip
inflating: recovery.img
inflating: gpt.bin
inflating: boot.img
inflating: dspso.bin
inflating: BTFM.bin
inflating: vbmeta.img
inflating: radio.img
inflating: dtbo.img
inflating: logo.bin
inflating: bootloader.img
inflating: super.img_sparsechunk.0
inflating: super.img_sparsechunk.1
inflating: super.img_sparsechunk.2
inflating: super.img_sparsechunk.3
inflating: super.img_sparsechunk.4
inflating: super.img_sparsechunk.5
inflating: super.img_sparsechunk.6
inflating: super.img_sparsechunk.7
inflating: super.img_sparsechunk.8
inflating: flashfile.xml
inflating: servicefile.xml
extracting: slcf_rev_d_default_v1.0.nvm
inflating: regulatory_info_xt2083_9_europe_sar.png
inflating: signing-info.txt
inflating: BATHENA_RETAIL_RZD31.31_subsidy-DEFAULT_regulatory-XT2083-9-EUROPE-SAR_CFC.info.txt
</pre>

<p>
Флеш-память телефона разбита на много разных разделов, часть из которых
уникальна для разных моделей телефонов. По крайней мере в Motorola Defy (2021)
можно посмотреть список разделов, перезагрузив телефон в bootloader и выполнив
команду <code>fastboot oem partition</code>:
</p>

<pre class="example">
~ % fastboot oem partition
(bootloader) xbl_a: offset=65536KB, size=5120KB
(bootloader) xbl_b: offset=70656KB, size=5120KB
(bootloader) xbl_config_a: offset=75776KB, size=128KB
(bootloader) xbl_config_b: offset=75904KB, size=128KB
(bootloader) tz_a: offset=76032KB, size=4096KB
(bootloader) tz_b: offset=80128KB, size=4096KB
(bootloader) rpm_a: offset=84224KB, size=512KB
(bootloader) rpm_b: offset=131072KB, size=512KB
(bootloader) hyp_a: offset=196608KB, size=512KB
(bootloader) hyp_b: offset=197120KB, size=512KB
(bootloader) cmnlib_a: offset=197632KB, size=512KB
(bootloader) cmnlib_b: offset=198144KB, size=512KB
(bootloader) cmnlib64_a: offset=198656KB, size=512KB
(bootloader) cmnlib64_b: offset=199168KB, size=512KB
(bootloader) keymaster_a: offset=199680KB, size=512KB
(bootloader) keymaster_b: offset=200192KB, size=512KB
(bootloader) prov_a: offset=200704KB, size=256KB
(bootloader) prov_b: offset=200960KB, size=256KB
(bootloader) abl_a: offset=201216KB, size=1024KB
(bootloader) abl_b: offset=202240KB, size=1024KB
(bootloader) uefisecapp_a: offset=203264KB, size=2048KB
(bootloader) uefisecapp_b: offset=205312KB, size=2048KB
(bootloader) devcfg_a: offset=207360KB, size=128KB
(bootloader) devcfg_b: offset=207488KB, size=128KB
(bootloader) qupfw_a: offset=207616KB, size=80KB
(bootloader) qupfw_b: offset=207696KB, size=80KB
(bootloader) storsec_a: offset=207776KB, size=128KB
(bootloader) storsec_b: offset=207904KB, size=128KB
(bootloader) ddr: offset=208032KB, size=1024KB
(bootloader) modem_a: offset=209056KB, size=184320KB
(bootloader) modem_b: offset=393376KB, size=184320KB
(bootloader) bluetooth_a: offset=577696KB, size=1024KB
(bootloader) bluetooth_b: offset=578720KB, size=1024KB
(bootloader) dsp_a: offset=579744KB, size=65536KB
(bootloader) dsp_b: offset=645280KB, size=65536KB
(bootloader) boot_a: offset=710816KB, size=98304KB
(bootloader) boot_b: offset=809120KB, size=98304KB
(bootloader) dtbo_a: offset=907424KB, size=24576KB
(bootloader) dtbo_b: offset=932000KB, size=24576KB
(bootloader) recovery_a: offset=983040KB, size=102400KB
(bootloader) recovery_b: offset=1085440KB, size=102400KB
(bootloader) ssd: offset=1245184KB, size=8KB
(bootloader) utags: offset=1310720KB, size=512KB
(bootloader) utagsBackup: offset=1311232KB, size=512KB
(bootloader) kpan: offset=1311744KB, size=8192KB
(bootloader) dhob: offset=1319936KB, size=32KB
(bootloader) msadp: offset=1376256KB, size=256KB
(bootloader) persist: offset=1441792KB, size=32768KB
(bootloader) prodpersist: offset=1474560KB, size=8192KB
(bootloader) metadata: offset=1482752KB, size=16384KB
(bootloader) misc: offset=1499136KB, size=1024KB
(bootloader) frp: offset=1500160KB, size=512KB
(bootloader) cid: offset=1507328KB, size=128KB
(bootloader) logo_a: offset=1507456KB, size=16384KB
(bootloader) logo_b: offset=1523840KB, size=16384KB
(bootloader) carrier: offset=1572864KB, size=16384KB
(bootloader) devinfo: offset=1638400KB, size=4KB
(bootloader) apdp: offset=1638404KB, size=256KB
(bootloader) spunvm: offset=1703936KB, size=8192KB
(bootloader) logfs: offset=1769472KB, size=8192KB
(bootloader) vbmeta_a: offset=1777664KB, size=64KB
(bootloader) vbmeta_b: offset=1777728KB, size=64KB
(bootloader) vbmeta_system_a: offset=1777792KB, size=64KB
(bootloader) vbmeta_system_b: offset=1777856KB, size=64KB
(bootloader) limits: offset=1777920KB, size=4KB
(bootloader) uefivarstore: offset=1777924KB, size=512KB
(bootloader) modemst1: offset=1835008KB, size=2560KB
(bootloader) modemst2: offset=1837568KB, size=2560KB
(bootloader) fsg_a: offset=1840128KB, size=65536KB
(bootloader) fsg_b: offset=1905664KB, size=65536KB
(bootloader) fsc: offset=1971200KB, size=128KB
(bootloader) hw: offset=2031616KB, size=8192KB
(bootloader) sp: offset=2097152KB, size=8192KB
(bootloader) padA: offset=2105344KB, size=640KB
(bootloader) super: offset=2105984KB, size=11631616KB
(bootloader) padB: offset=13737600KB, size=384KB
(bootloader) userdata: offset=13737984KB, size=47333359KB
(bootloader) system_a: offset=2105984KB, size=2376024KB
(bootloader) system_b: offset=2105984KB, size=165052KB
(bootloader) vendor_a: offset=2105984KB, size=585820KB
(bootloader) vendor_b: offset=2105984KB, size=0KB
(bootloader) product_b: offset=2105984KB, size=0KB
(bootloader) product_a: offset=2105984KB, size=4KB
OKAY [  0.015s]
Finished. Total time: 0.015s
</pre>

<p>
К счастью, не все эти разделы мне нужно было перезаписывать. Во-первых,
поскольку на устройстве используются <a href="https://source.android.com/docs/core/ota/virtual_ab">A/B-partitions</a>, в выводе <code>partition</code> многие
разделы повторяются два раза: с суффиксами <code>_a</code> и <code>_b</code>. Для установки Lineage OS,
согласно инструкциям, нужно будет использовать разделы с суффиксом <code>_a</code>.
</p>

<p>
Во-вторых, согласно списку файлов из архива и списку команд, которые надо
будет запускать для прошивки — придётся иметь дело лишь с:
</p>

<table border="2" cellspacing="0" cellpadding="6" frame="void">
<caption class="t-above"><span class="table-number">Table 1:</span> Описание разделов, в которые записываются бинарные дампы</caption>

<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Раздел(ы)</th>
<th scope="col" class="org-left">Файл с дампом</th>
<th scope="col" class="org-left">Описание</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">gpt.bin</td>
<td class="org-left">General Partition Table (GPT) — грубо говоря это как MBR, только новее.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">bootloader.img</td>
<td class="org-left">Разбивается на несколько файлов при прошивке, которые описаны ниже.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">radio.img</td>
<td class="org-left">Аналогично.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">bluetooth_a</td>
<td class="org-left">BTFM.bin</td>
<td class="org-left">Бинарный блоб c firmware для Bluetooth.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">dsp_a</td>
<td class="org-left">dspso.bin</td>
<td class="org-left">Бинарный блоб с firmware для графического ускорителя.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">logo_a</td>
<td class="org-left">logo.bin</td>
<td class="org-left">Картинки, которые отображаются на экране во время загрузки или зарядки выключенного телефона.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">boot_a</td>
<td class="org-left">boot.img</td>
<td class="org-left">Здесь лежит основное ядро Linux, ramdisk и прочие файлы, нужные для загрузки основной системы.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">recovery_a</td>
<td class="org-left">recovery.img</td>
<td class="org-left">Здесь лежит ещё одно ядро Linux, плюс ряд сопутствующих файлов, используемых при обновлении основной системы, factory reset и т.д.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">dbto_a</td>
<td class="org-left">dtbo.img</td>
<td class="org-left">Device Tree Blobs Overlay — описание тех устройств для ядра Linux, которые оно неспособно обнаружить при загрузке<sup><a id="fnr.device_tree" class="footref" href="#fn.device_tree" role="doc-backlink">1</a></sup>.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">vbmeta_a</td>
<td class="org-left">vbmeta.img</td>
<td class="org-left">Информация для проверки системы и ряда других разделов на подлинность, перед загрузкой их в память.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">super</td>
<td class="org-left">super.img_sparsechunk.0</td>
<td class="org-left">Этот и остальные 8 файлов записываются в раздел с dynamic partitions. Я не нашёл информации по тому, что внутри. Подробности реализации <a href="https://source.android.com/docs/core/ota/dynamic_partitions/implement">тут</a>.</td>
</tr>

<tr>
<td class="org-left">super</td>
<td class="org-left">super.img_sparsechunk.1</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">super</td>
<td class="org-left">super.img_sparsechunk.2</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">super</td>
<td class="org-left">super.img_sparsechunk.3</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">super</td>
<td class="org-left">super.img_sparsechunk.4</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">super</td>
<td class="org-left">super.img_sparsechunk.5</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">super</td>
<td class="org-left">super.img_sparsechunk.6</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">super</td>
<td class="org-left">super.img_sparsechunk.7</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">super</td>
<td class="org-left">super.img_sparsechunk.8</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">userdata</td>
<td class="org-left">/dev/null</td>
<td class="org-left">Раздел с пользовательскими приложениями и данными. По инструкции очищается.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">ddr</td>
<td class="org-left">/dev/null</td>
<td class="org-left">Судя по тому, что я нашёл в интернете, сюда мапится оперативная память устройства. Очищается согласно инструкции.</td>
</tr>
</tbody>
</table>

<table border="2" cellspacing="0" cellpadding="6" frame="void">
<caption class="t-above"><span class="table-number">Table 2:</span> Описание файлов из bootloader.img и соответствующих им разделов</caption>

<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Раздел(ы)</th>
<th scope="col" class="org-left">Файл с дампом</th>
<th scope="col" class="org-left">Описание</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">keymaster</td>
<td class="org-left">keymaster.mbn</td>
<td class="org-left">Данные для работы Qualcomm Secure (Verified) Boot.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">hyp</td>
<td class="org-left">hyp.mbn</td>
<td class="org-left"><a href="https://en.wikipedia.org/wiki/Hypervisor">Гипервизор</a> от Qualcomm, под которым запускается Linux.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">tz</td>
<td class="org-left">tz.mbn</td>
<td class="org-left"><a href="https://research.checkpoint.com/2019/the-road-to-qualcomm-trustzone-apps-fuzzing/">TrustZone</a> firmware.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">devcfg</td>
<td class="org-left">devcfg.mbn</td>
<td class="org-left">Не нашёл информации по этому разделу.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">storsec</td>
<td class="org-left">storsec.mbn</td>
<td class="org-left">Не нашёл информации по этому разделу.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">prov</td>
<td class="org-left">prov64.mbn</td>
<td class="org-left">Не нашёл информации по этому разделу.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">rpm</td>
<td class="org-left">rpm.mbn</td>
<td class="org-left">Resource Power Management — блоб для контроля питания модема.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">abl</td>
<td class="org-left">abl.elf</td>
<td class="org-left">Android BootLoader — second stage загрузчик для верификации и загрузки Android или содержимого recovery.img.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">uefisecapp</td>
<td class="org-left">uefi_sec.mbn</td>
<td class="org-left">Не нашёл информации по этому разделу.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">qupfw</td>
<td class="org-left">qupfw.elf</td>
<td class="org-left">Не нашёл информации по этому бинарнику.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">xbl_config</td>
<td class="org-left">xbl_config.elf</td>
<td class="org-left">Вероятно, это что-то вроде HAL для загрузчика<sup><a id="fnr.xbl" class="footref" href="#fn.xbl" role="doc-backlink">2</a></sup>.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">xbl</td>
<td class="org-left">xbl.elf</td>
<td class="org-left">См. выше.</td>
</tr>
</tbody>
</table>

<table border="2" cellspacing="0" cellpadding="6" frame="void">
<caption class="t-above"><span class="table-number">Table 3:</span> Описание файлов из radio.img и соответствующих им разделов</caption>

<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Раздел(ы)</th>
<th scope="col" class="org-left">Файл с дампом</th>
<th scope="col" class="org-left">Описание</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">modem</td>
<td class="org-left">NON-HLOS.bin</td>
<td class="org-left">Блоб с региональными настройками и частотами для радиомодуля.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">fsg</td>
<td class="org-left">fsg.mbn</td>
<td class="org-left">Modem File System Golden copy. Firmware blob для модема, калибровочные данные и IMEI. Необходимость перезаписи неясна<sup><a id="fnr.fsg" class="footref" href="#fn.fsg" role="doc-backlink">3</a></sup>.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">modemst1</td>
<td class="org-left">/dev/null</td>
<td class="org-left">Очищается при прошивке radio.img. Сюда будет сохранено содержимое раздела fsg при первом запуске системы.</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">modemst2</td>
<td class="org-left">/dev/null</td>
<td class="org-left">Резервная копия modemst1. Тоже очищается при прошивке radio.img.</td>
</tr>
</tbody>
</table>

<p>
Ну а дальше всё было просто:
</p>
<ol class="org-ol">
<li>Я снова перезагрузил телефон в bootloader при помощи <code>adb</code>, как уже описывал
выше.</li>
<li><p>
Прошил распакованные бинарники в телефон командами:
</p>
<pre class="example">
fastboot flash partition gpt.bin
fastboot flash bootloader bootloader.img
fastboot reboot-bootloader
fastboot flash radio radio.img
fastboot reboot-bootloader
fastboot flash bluetooth BTFM.bin
fastboot flash dsp dspso.bin
fastboot flash logo logo.bin
fastboot flash boot boot.img
fastboot flash recovery recovery.img
fastboot flash dtbo dtbo.img
fastboot flash vbmeta vbmeta.img
fastboot flash super super.img_sparsechunk.0
fastboot flash super super.img_sparsechunk.1
fastboot flash super super.img_sparsechunk.2
fastboot flash super super.img_sparsechunk.3
fastboot flash super super.img_sparsechunk.4
fastboot flash super super.img_sparsechunk.5
fastboot flash super super.img_sparsechunk.6
fastboot flash super super.img_sparsechunk.7
fastboot flash super super.img_sparsechunk.8
fastboot erase userdata
fastboot erase ddr
fastboot oem fb_mode_clear
fastboot reboot
</pre></li>
</ol>

<p>
Мой лог прошивки лежит <a href="/assets/static/bathena-flash.txt">тут</a>.
</p>

<p>
После этой операции на телефоне появился стоковый Android от Motorola, без
каких-либо пользовательских программ и настроек.
</p>
</div>
</div>
<div id="outline-container-lineage-os-install" class="outline-2">
<h2 id="lineage-os-install">Установка Lineage OS</h2>
<div class="outline-text-2" id="text-lineage-os-install">
<p>
Здесь я опирался на <a href="https://xdaforums.com/t/flash-gsi-rom-arm64-ab.4524895/#post-88309263">вот этот комментарий</a> с форума XDA — по ссылке пользователь
HUN_Gyuszi писал про успешную установку Lineage OS версии 20.0 со приложениями
Google и без root.
</p>

<p>
<a href="https://sourceforge.net/projects/andyyan-gsi/files/">В репозитории</a>, на который он ссылался, я обнаружил более новые сборки — с
Lineage OS 21.0 — и естественно захотел поставить именно её. Но здесь пришлось
поэкспериментировать:
</p>
<ul class="org-ul">
<li>Версию с установленными приложениями Google (код
<code>bgN</code><sup><a id="fnr.gsi_naming_conventions" class="footref" href="#fn.gsi_naming_conventions" role="doc-backlink">4</a></sup>) я не хотел использовать по понятным
причинам. Но установил её для теста — она запустилась и прекрасно работала.</li>
<li><p>
Потом я попробовал версию без приложений Google, но с разблокированным
пользователем root (<code>bvS</code>). Доступ к суперпользователю я получил, но зато
«потерял» IMEI телефона — операционная система использовала нулевой IMEI
вместо оригинального и в итоге телефон просто не подключался к мобильной
сети.
</p>

<p>
К счастью, я заранее сохранил оригинальный IMEI. К несчастью, подсунуть свой
IMEI в Android, работающий на чипсете Qualcomm Snapdragon, по-видимому не
так-то просто и у меня так и не получилось восстановить свой IMEI. Начав
подозревать, что пользоваться телефоном как телефоном больше не получится, я
решил на всякий случай перезагрузиться в bootloader и посмотреть в меню
«Barcodes» о каких серийных номерах он знает.
</p>

<p>
Как оказалось, bootloader по-прежнему «видит» мой оригинальный IMEI, а
значит оный не пропал бесследно из телефона. После этого, я снова прошил
бинарники из раздела <a href="#system-software-reflash">«Перезапись всего системного ПО»</a> в телефон и, после
загрузки оригинального Android'а, увидел что он спокойно отображает
правильные IMEI в настройках телефона.
</p>

<p>
По-видимому, в использованном мною образе LineageOS был какой-то баг, из-за
которого он и считал, что IMEI равен нулю и не считывал его из того места,
откуда его читал bootloader.
</p></li>
<li>Ну и наконец я проэкспериментировал с последним оставшимся образом, в
котором нет приложений Google, но также нет и доступа к пользователю root
(код <code>bvN</code>). С ним уже не возникло никаких проблем и на нём я и остановился.</li>
</ul>

<p>
Сам процесс установки был достаточно простым:
</p>
<ol class="org-ol">
<li>Как я уже писал, после перезаписи всего системного ПО у меня был тот самый
старый Android, с которым телефон и был куплен. Здесь мне пришлось снова
получать доступ к «Developer options», включать отладку по USB и
перезапускать телефон командой <code>adb reboot fastboot</code>.</li>
<li><p>
После перезапуска экран телефона выглядел следующим образом:
</p>

<div class="figure">
<p><img src="/assets/static/fastbootd.jpg" alt="Phone rebooted to fastbootd" align="center" />
</p>
</div></li>
<li><p>
Теперь можно было прошивать скачанный образ LineageOS следующей командой:
</p>
<pre class="example">
motorola_defy/LineageOS % fastboot flash system lineage-21.0-20241118-UNOFFICIAL-arm64_bvN.img
</pre>

<p>
Лог успешной прошивки можно посмотреть <a href="/assets/static/lineage-os-flash.txt">тут</a>.
</p></li>
<li><p>
Но, <i>в моём случае</i> запись образа в соответствующий раздел на Flash-памяти
прервалась с ошибкой:
</p>
<pre class="example">
motorola_defy/LineageOS % fastboot flash system lineage-21.0-20241118-UNOFFICIAL-arm64_bvN.img
Resizing 'system_a'                                FAILED (remote: 'Not enough space to resize partition')
fastboot: error: Command failed
</pre>

<p>
Раздел <code>system_а</code> на 2.3 Гб с небольшим не хватало для установки
LineageOS. Выход я нашёл на всё том же XDA Forum — нужно было удалить
раздел <code>product_a</code>, увеличить раздел <code>system_a</code> до 4.2 Гб и пересоздать раздел
<code>product_a</code> с размером в 1 байт:
</p>
<pre class="example">
motorola_defy/LineageOS % fastboot set_active a
Setting current slot to 'a'                        OKAY [  0.139s]
Finished. Total time: 0.140s
motorola_defy/LineageOS % fastboot delete-logical-partition product_a
Deleting 'product_a'                               OKAY [  0.045s]
Finished. Total time: 0.045s
motorola_defy/LineageOS % fastboot resize-logical-partition system_a 4200000000
Resizing 'system_a'                                OKAY [  0.006s]
Finished. Total time: 0.049s
motorola_defy/LineageOS % fastboot create-logical-partition product_a 1
Creating 'product_a'                               OKAY [  0.045s]
Finished. Total time: 0.045s
</pre>

<p>
Раздел <code>product_a</code> <a href="https://source.android.com/docs/core/architecture/partitions/product-partitions">используется стоковым Android'ом</a> в качестве хранилища
всяких вендорско-специфичных вещей для ОС. LineageOS не использует его,
поэтому можно было спокойно уменьшать его до одного байта.
</p></li>
<li><p>
После установки системы, по инструкции с форума, нужно было почистить
разделы с пользовательскими данными:
</p>
<pre class="example">
motorola_defy/LineageOS % fastboot -w
Erasing 'userdata'                                 OKAY [  0.511s]
Erase successful, but not automatically formatting.
File system type raw not supported.
wipe task partition not found: cache
Erasing 'metadata'                                 OKAY [  0.007s]
Erase successful, but not automatically formatting.
File system type raw not supported.
Finished. Total time: 0.527s
</pre></li>
<li>И наконец, я выбрал пункт «Reboot system now» в меню на экране, нажал на
кнопку блокировки экрана и перезагрузился в свежую LineageOS.</li>
</ol>
</div>
</div>
<div id="outline-container-android-root" class="outline-2">
<h2 id="android-root">Получение доступа к пользователю root</h2>
<div class="outline-text-2" id="text-android-root">
<p>
Здесь всё было крайне просто — я взял уже известный мне <a href="https://topjohnwu.github.io/Magisk/">проект Magisk</a>, который
подменяет стандартный Linux'овый <code>init</code> своим <code>magiskinit</code>. Через «общение» с этим
<code>init</code> и происходит получение root-прав на телефоне.
</p>

<p>
Установка и получение доступа к <code>root</code> крайне просты — достаточно лишь следовать
<a href="https://topjohnwu.github.io/Magisk/install.html">инструкции</a> и иметь под рукой дамп раздела <code>boot_a</code> (<code>boot.img</code>) с телефона.
</p>

<p>
После, через настройки приложения Magisk я скрыл его от остальных приложений
системы и через настройку «Configure DenyList» запретил <b>всем приложениям</b> на
телефонe получать доступ к пользователю <code>root</code>. Кроме нескольких избранных
программ, о которых написано ниже&#x2026;
</p>


<div class="figure">
<p><img src="/assets/static/magisk.png" alt="Magisk settings for hiding itself: Zygisk and DenyList" align="center" width="50%" />
</p>
<p style="text-align: center"><i>Настройки Magisk для скрытия своего присутствия от остальных приложений</i></p>
</div>
</div>
</div>
<div id="outline-container-4g-calls-sms" class="outline-2">
<h2 id="4g-calls-sms">Звонки и СМС с 4G</h2>
<div class="outline-text-2" id="text-4g-calls-sms">
<p>
Через какое-то время я заметил странное поведение телефона — стоит
подключиться к сети оператора через 4G вместо 3G, как ко мне перестают
приходить любые СМСки и до меня становится невозможно дозвониться.
</p>

<p>
Как оказалось, дело здесь было в следующем. Раньше, вплоть до введения в строй
4G, звонки происходили «по старинке» — телефон соединялся с базовой станцией
по радиоканалу и дальше, через несколько АТС, с телефоном другого абонента, с
которым я разговариваю в данный момент. То есть, примерно по тому же принципу,
по которому раньше работали обычные стационарные телефоны — через <a href="https://en.wikipedia.org/wiki/Circuit_switching">сеть с
коммутацией каналов</a>, когда для телефонного разговора сначала выделялся
канал, а потом по нему передавался голос абонента<sup><a id="fnr.pstn" class="footref" href="#fn.pstn" role="doc-backlink">5</a></sup>.
</p>

<p>
Но, через некоторое время после введения в строй сетей 4G, всё
поменялось. Телефония стала <a href="https://en.wikipedia.org/wiki/Voice_over_IP">IP-телефонией</a> — теперь нет никакого выделенного
канала между абонентами. Голос разбивается на пакеты, которые отправляются по
различным маршрутам к другому абоненту, через Интернет. Собственно, как и
любые другие пакеты в Интернете.
</p>

<p>
Стандартизированный для мобильных телефонов доступ к такой <a href="https://en.wikipedia.org/wiki/Packet_switching">сети с пакетной
коммутацией</a>, по которой происходит передача голоса, происходит через <a href="https://en.wikipedia.org/wiki/IP_Multimedia_Subsystem">IP
Multimedia subsystem</a> (IMS). На телефоне для этого должно быть установлено
специальное приложение. В обычный стоковый Android от Motorola (как и в
телефонах других производителей) оно, по-видимому, устанавливается по
умолчанию. Но в моей версии LineageOS его не было, вероятно из-за проблем с
лицензиями.
</p>

<p>
К счастью, в настройках была опция для скачивания IMS-приложения от вендора:
«Phh Treble Settings⇒IMS features».
</p>


<div class="figure">
<p><img src="/assets/static/ims.png" alt="IMS features in the LineageOS, &quot;Force IMS&quot; is enabled" align="center" width="50%" />
</p>
</div>

<p>
После установки приложения через пункт меню «Install IMS APK for Qualcomm
vendor» и включения опции «Request IMS network» — звонки и СМС через 4G начали
работать как обычно.
</p>
</div>
</div>
<div id="outline-container-disable-floating-shit-on-copy" class="outline-2">
<h2 id="disable-floating-shit-on-copy">Отключение всплывающей ерунды при копировании текста</h2>
<div class="outline-text-2" id="text-disable-floating-shit-on-copy">
<p>
В Android 14 я обнаружил <i>очередную</i> «инновацию» от Google. При копировании
любого текста в буфер обмена, в левом нижнем углу всплывает прямоугольник со
скопированным текстом. Естественно, при копировании пароля из <a href="https://www.passwordstore.org/">pass</a> в буфер
обмена — этот пароль показывается plain-text'ом в этом прямоугольнике.
</p>


<div class="figure">
<p><img src="/assets/static/clipboard_bubble.png" alt="Clipboard bubble with &quot;Hello&quot; string inside" align="center" width="25%" />
</p>
</div>

<p>
Присутствие такой «фичи» как всегда обосновывается «удобством пользователя» —
чтобы он был уверен в том, что что-то скопировалось. Но, как мне кажется, тут
больше задумывались об удобстве любого злоумышленника, подглядывающего через
плечо за происходящим на экране чужого телефона. Тем более что это всплывающее
окно неотключаемо через настройки — соответствующего пункта меню просто нет.
</p>

<p>
К счастью, после непродолжительного поиска я обнаружил, что на телефонах с
root эта штука отключается очень просто:
</p>
<ol class="org-ol">
<li>Надо открыть терминал.</li>
<li>Получить root-доступ через <code>su</code>.</li>
<li>Выполнить от рута команду <code>appops set com.android.systemui READ_CLIPBOARD
   ignore</code>.</li>
</ol>

<p>
Готово! Теперь эта штука будет отключена <b>навсегда</b> и не вернётся даже после
перезагрузки.
</p>
</div>
</div>
<div id="outline-container-turn-off-usb-debugging" class="outline-2">
<h2 id="turn-off-usb-debugging">Отключение отладки по USB</h2>
<div class="outline-text-2" id="text-turn-off-usb-debugging">
<p>
Довольно быстро я обнаружил, что отладка по USB почему-то оказывается
включённой после каждой перезагрузки. Естественно, негоже оставлять такую дыру
в системе для любого ловкача с USB-кабелем. В случае с разблокированным
загрузчиком включенная отладка по USB позволит записать что угодно во
флеш-память телефона, после перезагрузки в bootloader.
</p>

<p>
В баг-трекере LineageOS я нашёл исправления для этого бага в LineageOS <a href="https://review.lineageos.org/c/LineageOS/android_device_xiaomi_sdm845-common/+/253967">в
версии 16.0</a> и <a href="https://review.lineageos.org/c/LineageOS/android_device_oneplus_sdm845-common/+/330486">в 19.1</a>, но только для Xiaomi. «Стандартное решение» проблемы
через <code>setprop persist.vendor.usb.config ""</code> — не помогло, эта опция всё равно
сбрасывалась в <code>"adb"</code> и отладка по USB оказывалась снова включена после
перезапуска телефона.
</p>

<p>
Беглый поиск по файловой системе показал, что файлы, которые изменялись в
задачах из багтрекера, есть и в моей файловой системе, в каталоге <code>/vendor/</code>:
</p>
<pre class="example">
:/ # find / -type f -name init.qcom.usb.sh
/vendor/bin/init.qcom.usb.sh
:/ # find / -type f -name default.prop
/vendor/default.prop
</pre>

<p>
Каталог <code>/vendor</code> оказался точкой монтирования для устройства <code>/dev/block/dm-5</code> и
я немедленно попробовал перемонтировать его в RW режиме, увы безуспешно:
</p>
<pre class="example">
:/ # mount | grep 'on /vendor'
/dev/block/dm-5 on /vendor type ext4 (ro,seclabel,relatime)
:/ # mount -o remount,rw /vendor
'/dev/block/dm-5' is read-only
</pre>

<p>
После этого я полез в каталог <code>/etc/init</code>, где по идее должны лежать
инициализационные скрипты. Там обнаружились файлы, отдалённо похожие на
unit-файлы systemd. Сначала я попробовал просто добавить свой файл, который
будет отключать отладку по USB каждый раз, когда её кто-то включает:
</p>
<pre class="example">
on property:persist.vendor.usb.config="adb"
    settings put global adb_enabled 0
    setprop persist.vendor.usb.config ""
</pre>

<p>
К сожалению, корневая ФС тоже оказалась смонтированной в read-only и
отказалась перемонтироваться через <code>mount -o remount,rw /</code>.
</p>

<p>
Но, когда я решил для теста выполнить в root-терминале пару
команд<sup><a id="fnr.disable_usb" class="footref" href="#fn.disable_usb" role="doc-backlink">6</a></sup> для отключения режима отладки по USB и перезапустил
телефон — у меня всё получилось. Отладка через USB отключилась и больше не
включалась после перезагрузки.
</p>
</div>
</div>
<div id="outline-container-root-apps" class="outline-2">
<h2 id="root-apps">Приложения, ради которых нужен root</h2>
<div class="outline-text-2" id="text-root-apps">
<p>
Теперь, пара слов о приложениях, ради которых мне потребовалось получать
доступ к пользователю <code>root</code> на телефоне.
</p>
</div>
<div id="outline-container-appstores" class="outline-3">
<h3 id="appstores">Магазины приложений</h3>
<div class="outline-text-3" id="text-appstores">
<p>
Во-первых, это естественно <a href="https://f-droid.org/">F-Droid</a>.
</p>


<div class="figure">
<p><img src="/assets/static/f-droid.png" alt="F-Droid main window" align="center" />
</p>
</div>

<p>
Самому приложению <code>root</code> не нужен, но для Magisk-расширения <a href="https://github.com/entr0pia/Fdroid-Priv">Fdroid-Priv</a> он
просто необходим. Это расширение позволяет устанавливать и обновлять
приложения одним нажатием кнопки, без постоянно всплывающего окна «Install
this application?»
</p>

<p>
Во-вторых, это <a href="https://f-droid.org/en/packages/com.aurora.store/">Aurora Store</a> — FOSS замена Google Play. В отличие от Google
Play это приложение не показывает рекламу на каждый чих и не перегружено
вкладками и настройками. На главном экране есть всего три вкладки:
</p>
<ol class="org-ol">
<li>список приложений из Google Play</li>
<li>список игр оттуда же</li>
<li>список локальных приложений, требующих обновления.</li>
</ol>


<div class="figure">
<p><img src="/assets/static/aurora-store.png" alt="Aurora Store main window" align="center" width="50%" />
</p>
</div>

<p>
Научить Aurora Store устанавливать и обновлять приложения нажатием одной
кнопки оказалось достаточно просто:
</p>
<ul class="org-ul">
<li>Сначала в F-Droid подключается репозиторий «<a href="https://apt.izzysoft.de/fdroid/">IzzyOnDroid F-Droid Repository</a>».</li>
<li>Потом оттуда устанавливается приложение <a href="https://shizuku.rikka.app/">Shizuku</a>, которое обеспечивает
единообразный интерфейс для доступа к <code>root</code>.</li>
<li>В настройках Aurora Store надо было открыть экран «Installation⇒Installation
method» и разрешить приложению <b>однократный</b> доступ к <code>root</code>.</li>
<li><p>
На этом экране надо выбрать «Shizuku» в качестве метода установки
приложений.
</p>


<div class="figure">
<p><img src="/assets/static/aurora-store-shizuku.png" alt="Installation methods from Aurora Store. Shizuku method is selected" align="center" width="50%" />
</p>
</div></li>
</ul>

<p>
В итоге, в Aurora Store приложения из Google Play будут устанавливаться по
нажатию одной кнопки.
</p>

<p>
В третьих, это <a href="https://f-droid.org/en/packages/dev.imranr.obtainium.fdroid/">Obtainium</a> — он умеет загружать APK с GitHub, GitLab и прочих
аналогичных сайтов.
</p>


<div class="figure">
<p><img src="/assets/static/obtainium.png" alt="Obtainium main window with ForkGram, LawnIcons and Shattered Pixel Dungeon" align="center" />
</p>
</div>

<p>
Некоторые FOSS-приложения распространяются только через Google Play и их нет в
F-Droid<sup><a id="fnr.no-in-fdroid" class="footref" href="#fn.no-in-fdroid" role="doc-backlink">7</a></sup>. Так как я предпочитаю использовать Aurora Store только
для загрузки всяких проприетарных приложений — я устанавливаю такие
FOSS-приложения через Obtainium.
</p>
</div>
</div>
<div id="outline-container-firewall" class="outline-3">
<h3 id="firewall">Firewall (AFWall+)</h3>
<div class="outline-text-3" id="text-firewall">
<p>
В качестве firewall'а я использую <a href="https://f-droid.org/en/packages/dev.ukanth.ufirewall/">AFWall+</a> — он умеет работать с iptables и не
занимает единственный VPN-слот в системе, как это делают разные другие
firewall'ы, не требующие root для своей работы.
</p>


<div class="figure">
<p><img src="/assets/static/afwall.png" alt="AFWall+ firewall main windows with two profiles: Default and special profile for some apps" align="center" />
</p>
</div>

<p>
С этой штукой я могу достаточно гибко настраивать какие приложения, когда и
каким образом могут выходить в интернет — можно запретить отдельным
приложениям как полностью выходить в Интернет, так и пользоваться какими-то
отдельными видами соединений: WiFi, мобильным интернетом, мобильным интернетом
в роуминге, VPN и так далее. Плюс, как видно на скриншоте, есть поддержка
профилей — можно завести отдельный профиль с разрешённым доступом в Интернет
для определённых приложений и включать его только при необходимости.
</p>

<p>
К сожалению, без минусов не обошлось — в текущей версии (3.6.0) AFWall+ даёт
экспортировать созданные правила в файл без каких-либо предупреждений о том,
что за импорт этого файла надо будет заплатить денег разработчику. ИМХО,
честнее было бы предупредить пользователя об этом сразу же во время экспорта.
</p>

<p>
Один нюанс (я не могу назвать это минусом), о котором нужно знать: если
настраивать firewall как надо — запретив доступ в интернет всем, кому явно не
разрешили это правилами — то проверка на наличие доступа в Интернет методом
«стучимся на сервера Гугла после подключения к сети» работать не будет. Я не
стал искать какой системный процесс отвечает за это и как поменять адрес
<a href="http://clients3.google.com/">http://clients3.google.com/</a> на какой-нибудь более приличный — и просто
отключил captive portal check <a href="https://github.com/ukanth/afwall/wiki/FAQ#61-what-is-androids-captive-portal-check">по инструкции из FAQ AFWall+</a>.
</p>
</div>
</div>
<div id="outline-container-adblocker" class="outline-3">
<h3 id="adblocker">System-wide блокировщик рекламы (AdAway)</h3>
<div class="outline-text-3" id="text-adblocker">
<p>
<a href="https://f-droid.org/en/packages/org.adaway/">Эту штуку</a> я выбирал по тому же принципу, что и AFWall+ — чтобы она могла
работать, не занимая VPN-слот.
</p>


<div class="figure">
<p><img src="/assets/static/adaway.png" alt="AdAway main window" align="center" />
</p>
</div>

<p>
В AdAway можно импортировать свои любимые списки для блокировки всяких
ненужных и вредных хостов, например известный <a href="https://someonewhocares.org/hosts/hosts">Dan Pollocks hosts file</a> или
<a href="https://raw.githubusercontent.com/mtxadmin/ublock/master/hosts.txt">hosts-файл</a> для блокировки русскоязычной рекламы.
</p>
</div>
</div>
<div id="outline-container-acca" class="outline-3">
<h3 id="acca">AccA — управление зарядкой/разрядкой аккумулятора</h3>
<div class="outline-text-3" id="text-acca">
<p>
Меня всегда беспокоило то, что мой телефон включает режим "turbo-зарядки"
сразу же как только его подключают к чему-то современнее, чем старый зарядник
с USB2.0. Отключить эту «фичу» нет возможности, а с ней аккумулятор заряжается
с бОльшим, относительно нормального, током зарядки и сильно при этом
греется. Конечно при этом он заряжается быстрее, но одновременно и <a href="https://batteryuniversity.com/article/bu-808-how-to-prolong-lithium-based-batteries">уменьшается
срок службы аккумулятора</a>.
</p>

<p>
И тут я нашёл <a href="https://github.com/MatteCarra/AccA">приложение AccA</a> и связанный с ним <a href="https://github.com/VR-25/acc">демон acc</a>. Демон умеет делать
всё, что мне было надо:
</p>
<ul class="org-ul">
<li>он не даёт аккумулятору заряжаться до 100%, останавливая зарядку на 70% (по
умолчанию)</li>
<li>не даёт телефону работать на последних процентах заряда аккумулятора,
выключая систему по достижении 10% заряда (поведение по умолчанию)</li>
<li>умеет ставить зарядку на паузу, если аккумулятор нагрелся до 60°C, чтобы он
остыл и не перегревался</li>
<li>отключает turbo-зарядку на повышенных токах.</li>
</ul>

<p>
Ну а AccA это просто фронтенд для демона, который упрощает его установку и
настройку:
</p>


<div class="figure">
<p><img src="/assets/static/acca.png" alt="AccA main window with battery realtime parameters" align="center" />
</p>
</div>

<p>
С настройками со скриншота я по-прежнему спокойно использую телефон весь день,
а ночью он стоит на зарядке. Если мне понадобится быстро зарядить его до 100%
и использовать аккумулятор на всю катушку — в Acca для этого есть кнопка
«Charge once to #% without restrictions».
</p>
</div>
</div>
<div id="outline-container-colorblendr" class="outline-3">
<h3 id="colorblendr">Изменение цветов системной темы (ColorBlendr)</h3>
<div class="outline-text-3" id="text-colorblendr">
<p>
Это простенькое приложение умеет менять цвета используемой в системе
темы. Немного поигравшись с ним, я смог сделать что-то вроде мой любимой
Solarized Light темы на своём телефоне:
</p>


<div class="figure">
<p><img src="/assets/static/colorblendr.png" alt="ColorBlendr main window" align="center" />
</p>
</div>

<p>
<a href="https://f-droid.org/en/packages/com.drdisagree.colorblendr/">Ссылка на приложение</a>.
</p>
</div>
</div>
<div id="outline-container-sdmaid2se" class="outline-3">
<h3 id="sdmaid2se">SD Maid 2/SE — очистка системы от мусора</h3>
<div class="outline-text-3" id="text-sdmaid2se">
<p>
Эту программу я начал использовать ещё давно — она позволяет очищать
флеш-память и SD-карту телефона от всякого мусора, которым они со временем
забиваются: логи приложений, пустые каталоги, дубликаты файлов, всякие кэши,
«остатки» от уже удалённых приложений и т.д.
</p>


<div class="figure">
<p><img src="/assets/static/sdmaid2se.png" alt="SD Maid 2/SE main window" align="center" />
</p>
</div>

<p>
С root-доступом SD Maid 2/SE способна на большее — на удаление закешированных
APK, оставшихся после установки приложения, на очистку системных кэшей и
логов, удаление bug report'ов и так далее.
</p>

<p>
За несколько месяцев использования эта программа удалила мне около 10 Гб
различных мусорных файлов, которые в противном случае просто занимали бы место
на флэш-памяти.
</p>

<p>
<a href="https://f-droid.org/en/packages/eu.darken.sdmse/">Ссылка на SD Maid 2/SE</a>.
</p>
</div>
</div>
</div>
<div id="outline-container-backups" class="outline-2">
<h2 id="backups">Резервное копирование</h2>
<div class="outline-text-2" id="text-backups">
<blockquote>
<p>
Люди делятся на два типа — на тех кто ещё не делает бекапы и на тех, кто уже
делает бекапы.
</p>
</blockquote>
</div>
<div id="outline-container-neobackup" class="outline-3">
<h3 id="neobackup">Neo Backup</h3>
<div class="outline-text-3" id="text-neobackup">
<p>
Для рядового резервного копирования я пользуюсь FOSS-приложением <a href="https://f-droid.org/packages/com.machiav3lli.backup/">Neo Backup</a>.
</p>


<div class="figure">
<p><img src="/assets/static/neobackup.png" alt="Neo Backup application's backup tab with list of applications on it" align="center" />
</p>
</div>

<p>
Оно конечно же требует <code>root</code> для работы и умеет:
</p>
<ol class="org-ol">
<li>Делать резервные копии приложений.</li>
<li>Делать резервные копии данных и настроек у этих приложений.</li>
<li>Сжимать бекапы через zstd или gzip.</li>
<li>Шифровать их.</li>
</ol>

<p>
Взамен, оно <b>очень сильно</b> нагружает своим IO тот носитель, который используется
для резервного копирования. Поэтому, лучше делать бэкап на SD-карту, которую
поменять легче, чем флеш-память с выработанным ресурсом записи в телефоне.
</p>

<p>
Резервная копия <a href="https://eugene-andrienko.com/uses">всех моих</a> установленных приложений заняла чуть меньше часа,
при включённом сжатии и шифровании. И она вышла не сильно большой по
современным меркам — всего около 3.6 Гб.
</p>
</div>
</div>
<div id="outline-container-flash-memory-backup" class="outline-3">
<h3 id="flash-memory-backup">Резервное копирование flash-памяти телефона</h3>
<div class="outline-text-3" id="text-flash-memory-backup">
<p>
В принципе, идеально было бы сделать ещё и резервную копию основных разделов с
флэш-памяти телефона, при помощи <code>fastboot fetch</code>. Но внезапно оказалось, что на
стороне телефона эта команда не поддерживается:
</p>

<pre class="example">
phone_backup/fastboot % fastboot fetch partition gpt.bin
(bootloader) max-fetch-size: not found
fastboot: error: Unable to get max-fetch-size. Device does not support fetch command.
</pre>

<p>
С одной стороны это не позволит мне сделать резервную копию. С другой стороны,
это <i>никому</i> не позволит прочитать содержимое флэш-памяти телефона без его
разборки.
</p>
</div>
</div>
</div>
<div id="outline-container-bugs" class="outline-2">
<h2 id="bugs">BUGS</h2>
<div class="outline-text-2" id="text-bugs">
<p>
Естественно, не обошлось без багов!
</p>

<ul class="org-ul">
<li><p>
Настройки «Phh Treble Settings⇒Misc features⇒Set rounded corner diameter» и
«Phh Treble Settings⇒Misc features⇒Set forced/faked rounded corners
diameter» не работают. После непродолжительного поиска в Интернете я выяснил
лишь то, что эти настройки ни у кого не работают.
</p>

<p>
К счастью, мне повезло и эта проблема не повлияла на удобство использования
телефона. Все, что она затронула:
</p>
<ul class="org-ul">
<li>Кусок имени ОПСОСа в панели с уведомлениями на экране блокировки
обрезается слева.</li>
<li>Небольшая часть самой левой иконки с нотификацией в этой же панели — тоже
обрезается слева.</li>
<li>Кнопки на нижней панели в игре Shattered Pixel Dungeon немного вылезают за
пределы экрана, если пользоваться портретной ориентацией.</li>
</ul></li>
<li>Не работает NFC, в системе нет ни одного упоминания о нём и даже нет плашки
«включить/выключить NFC» в панели уведомлений. Эту проблему я не исследовал,
потому что так и не нашёл, как использовать эту технологию.</li>
</ul>
</div>
</div>
<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Примечания</h2>
<div class="outline-text-2" id="text-notes">
</div>
</div>
<div id="footnotes">

<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.device_tree" class="footnum" href="#fnr.device_tree" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://elinux.org/Device_Tree_Reference">https://elinux.org/Device_Tree_Reference</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.xbl" class="footnum" href="#fnr.xbl" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://xdaforums.com/t/location-and-function-of-xbl-elf-qupv3fw-elf-cmnlib-mbn-in-the-aosp-output-build.4351213/#post-88989497">https://xdaforums.com/t/location-and-function-of-xbl-elf-qupv3fw-elf-cmnlib-mbn-in-the-aosp-output-build.4351213/#post-88989497</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.fsg" class="footnum" href="#fnr.fsg" role="doc-backlink">3</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Тем не менее <code>fastboot</code> очищает этот раздел при прошивке <code>radio.img</code>.
</p></div></div>

<div class="footdef"><sup><a id="fn.gsi_naming_conventions" class="footnum" href="#fnr.gsi_naming_conventions" role="doc-backlink">4</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://github.com/phhusson/treble_experimentations/wiki/Frequently-Asked-Questions-(FAQ)#naming-conventions-that-some-gsi-buildermaintainer-uses">Naming conventions that some GSI builder/maintainer
uses</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.pstn" class="footnum" href="#fnr.pstn" role="doc-backlink">5</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
См. статью про <a href="https://en.wikipedia.org/wiki/Public_switched_telephone_network">PSTN</a> (Public switched telephone network).
</p></div></div>

<div class="footdef"><sup><a id="fn.disable_usb" class="footnum" href="#fnr.disable_usb" role="doc-backlink">6</a></sup> <div class="footpara" role="doc-footnote"><pre class="example">
:/ # settings put global adb_enabled 0
:/ # setprop persist.vendor.usb.config ""
</pre></div></div>

<div class="footdef"><sup><a id="fn.no-in-fdroid" class="footnum" href="#fnr.no-in-fdroid" role="doc-backlink">7</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Возможно, из-за того, что F-Droid требует reproducible builds
или имеет <a href="https://f-droid.org/en/docs/Inclusion_Policy/">чёткие требования</a> к приложениям, которые в нём можно публиковать.
</p></div></div>


</div>
</div>]]></content><author><name>Eugene Andrienko</name></author><category term="it" /><summary type="html"><![CDATA[Вот уже около 3 лет я пользуюсь смартфоном Motorola Defy (2021). Это один из немногих защищённых телефонов с поддержкой стандарта IP68, который не выделяется своей толщиной и влезает в обычный карман. Со стороны кажется будто это просто обычный телефон в чехле, но на самом деле это не чехол, а корпус самого телефона.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://eugene-andrienko.com/assets/static/header-lineageos.jpg" /><media:content medium="image" url="https://eugene-andrienko.com/assets/static/header-lineageos.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="ru"><title type="html">Как я заменил BIOS в Thinkpad X220 свободной прошивкой</title><link href="https://eugene-andrienko.com/it/2024/12/21/thinkpad-x220-libreboot.html" rel="alternate" type="text/html" title="Как я заменил BIOS в Thinkpad X220 свободной прошивкой" /><published>2024-12-21T00:00:00+03:00</published><updated>2024-12-21T00:00:00+03:00</updated><id>https://eugene-andrienko.com/it/2024/12/21/thinkpad-x220-libreboot</id><content type="html" xml:base="https://eugene-andrienko.com/it/2024/12/21/thinkpad-x220-libreboot.html"><![CDATA[<p>
Предполагаю, практически всем читателям моего блога известно, что одна из
первых программ запускаемых при старте компьютера — это BIOS. Обычно всё что с
ним можно сделать — зайти в меню с настройками и что-нибудь там поменять:
порядок загрузки с носителей, дату/время, различные настройки периферийных
устройств и так далее. Либо, при определённой доле везения, возможно отыскать
модифицированный хакерами BIOS, который добавляет новые функции или убирает
ненужные ограничения, и прошить его вместо оригинального (не имея возможности
хотя бы посмотреть, что там внутри, без навыков reverse engineering'а). К
сожалению, исходные коды BIOS закрыты и в деле инициализации <i>своего</i> компьютера
приходится полагаться на милость нескольких корпораций, которые разрабатывают
BIOS'ы (например, <a href="https://en.wikipedia.org/wiki/American_Megatrends">AMI</a> или <a href="https://en.wikipedia.org/wiki/Award_Software">Award Software International</a>) и вендоров вашего
железа.
</p>

<p>
Пока компьютер используется «как есть», особых проблем это не вызывает. Но,
как это обычно бывает с проприетарным ПО, любой шаг вправо или влево приводит
к необходимости применения таких переподвывертов, по сравнению с которыми
сборка собственного ядра Linux из исходников покажется детской шалостью.
</p>

<p>
В моём случае, когда я модифицировал свой Thinkpad X220, обновив ряд
компонентов ноутбука и припаяв плату расширения для нового 2K-экрана — BIOS
превратился в проблему. Во-первых, whitelist от Lenovo просто не позволял мне
использовать новую периферию, потому что она «не была одобрена
производителем»<sup><a id="fnr.manufacturer_approve" class="footref" href="#fn.manufacturer_approve" role="doc-backlink">1</a></sup>. Во-вторых, оригинальный
проприетарный BIOS был сделан в расчёте на то, что к ноутбуку <b>всегда</b> будет
подключен его родной экран по шине LVDS, поэтому его интерфейс отображается
только на этом экране, даже если подключить второй дисплей через Display Port
(или если подключить дисплей через припаянную к линиям DP-3 плату
расширения). Досадное упущение, видимо сделанное в расчёте на то, что
пользователь не будет модифицировать свой компьютер, удовлетворившись
возможностью поменять жёсткий диск или память на более ёмкие!
</p>

<p>
К счастью, сообщество OpenSource спешит здесь на помощь! Существует проект
<a href="https://www.coreboot.org/">coreboot</a> — опенсорсная реализация BIOS'а для ряда материнских плат.
</p>
<div class="outline-2">
<h2>Содержание&#xa0;&#xa0;&#xa0;<span class="tag"></span></h2>
<div class="outline-text-2">
<ul class="org-ul">
<li><a href="#coreboot">Coreboot</a></li>
<li><a href="#libreboot">Libreboot</a>
<ul class="org-ul">
<li><a href="#libreboot-preparations">Подготовка к прошивке Libreboot</a></li>
<li><a href="#get-libreboot-binary">Получение бинарного файла Libreboot</a></li>
<li><a href="#prepare-libreboot-binary">Подготовка бинарника Libreboot к прошивке</a></li>
<li><a href="#libreboot-flashing">Прошивка готового бинарника с Libreboot</a></li>
<li><a href="#mac-address">MAC адрес</a></li>
</ul></li>
<li><a href="#libreboot-customization">Кастомизация libreboot</a></li>
<li><a href="#notes">Примечания</a></li>
</ul>
</div>
</div>
<div id="outline-container-coreboot" class="outline-2">
<h2 id="coreboot">Coreboot</h2>
<div class="outline-text-2" id="text-coreboot">
<p>
Coreboot изначально возник как проект, нацеленный на использование в
компьютерных кластерах — тогда он ещё назывался LinuxBIOS. Один из его авторов
(Ron Minnich) столкнулся с тем, что из-за проприетарного BIOS'а ему приходится
подключать каждую ноду самодельного кластера к KVM-свитчу, чтобы вручную
нажать на F1 и продолжить загрузку машины, если вдруг что-то пошло не так. Ron
Minnich же хотел, чтобы BIOS грузился побыстрее и не требовал
пользовательского ввода<sup><a id="fnr.linuxbios" class="footref" href="#fn.linuxbios" role="doc-backlink">2</a></sup>. Впоследствии, в проекте coreboot появилась
поддержка множества различных <a href="https://doc.coreboot.org/mainboard/index.html">материнских плат</a> и <a href="https://doc.coreboot.org/soc/index.html">SoC</a> — включая и материнскую
плату моего Thinkpad X220.
</p>

<p>
Я начал использовать coreboot после того как обнаружил, что оригинальный BIOS
работает только со стоковым экраном ноутбука. Если дополнительно подключить
2K-экран через припаянную плату расширения, то BIOS на этом экране не будет
показываться.
</p>

<p>
Столкнувшись с этой проблемой, я вспомнил, что множество людей, занимавшихся
модификацией своих Thinkpad'ов, зачем-то заменяли оригинальный BIOS на
coreboot. И на фотографиях их ноутбуков после успешной прошивки на экране было
что-то вроде framebuffer'а, а не простая текстовая консоль. А в документации
проекта coreboot я как раз обнаружил упоминание некоей опенсорсной библиотеки
libgfxinit, предназначенной для инициализации видео при старте компьютера. В
итоге у меня появилась надежда, что эта библиотека сможет работать с моим
экраном на шине DP-3. Особенно после того как я посмотрел её исходники&#x2026;
</p>

<p>
Естественно, с первого раза ничего не получилось. Сначала, coreboot не хотел
отображаться на втором экране, с какими опциями я его ни компилировал. Потом,
я нечаянно сжёг материнскую плату ноутбука, некорректно отключив её от
аккумулятора.
</p>

<p>
С новой материнской платой я сначала сделал битую резервную копию
оригинального BIOS'а — оба его дампа имели одинаковый MD5-хэш, но одинаково
неверные данные внутри. Как я это понял? Сначала прошил в микросхему с памятью
свой старый бинарник с coreboot от первой материнской платы — посмотреть будет
ли он работать. Когда эта прошивка ожидаемо не заработала, я вернул обратно
«оригинальный» BIOS — а с ним ноутбук <b>внезапно</b> отказался запускаться. Увы, к
моменту, когда я это обнаружил, оригинальный BIOS уже был перезаписан.
</p>

<p>
Тем не менее мне удалось использовать файл с битой резервной копией для
получения бинарных блобов, которые нужны были для работы coreboot на
Thinkpad X220:
</p>
<ul class="org-ul">
<li>Intel Flash Descriptor — 4 Kb с данными об остальных регионах памяти на
чипе, включая возможность их чтения/записи CPU.</li>
<li><p>
Intel ME blob — тут какие-то данные относящиеся к Intel ME. Технология, <a href="https://en.wikipedia.org/wiki/Intel_Management_Engine">как
утверждается</a>, полезная если нужно удалённо управлять парком машин в
датацентре. Но на личном ноутбуке такая <a href="https://www.fsf.org/blogs/sysadmin/the-management-engine-an-attack-on-computer-users-freedom">дыра в безопасности</a>, очевидно не
нужна — зачем мне ещё один процессор внутри CPU, на котором работает
непонятно какая программа с закрытыми исходными кодами, даже если ноутбук
выключен (но на материнскую плату подаётся питание) и имеющая доступ к
DMA-контроллеру, к сетевой карте (и свой отдельный MAC адрес),
зарезервированное место в оперативной памяти и встроенную JVM с классами для
работы с криптографией<sup><a id="fnr.intel_me" class="footref" href="#fn.intel_me" role="doc-backlink">3</a></sup>?
</p>

<p>
К сожалению, без этого блоба в микросхеме памяти — ноутбук может либо не
запуститься, либо самостоятельно выключаться спустя какое-то время, ради
«безопасности» пользователя.
</p></li>
<li>GbE blob — конфигурация Ethernet-контроллера, включая его MAC адрес.</li>
</ul>

<p>
Собранный coreboot запустился на моём ноутбуке и даже вывел лог загрузки на
новый 2K-экран. Как я сейчас понимаю, всё дело в том, что к тому моменту
оригинальный экран был отключен от LVDS и новый экран был единственным,
который был подключен к видеоядру через DP-3.
</p>

<p>
Насколько я могу судить без знания языка Ada — coreboot (при условии, что
материнская плата исправна) при старте пробегается по всем портам,
подключенным к видеоядру и выводит на первый найденный дисплей свой
framebuffer, если <code>Primary</code> дисплей не подключен к плате:
</p>

<div class="org-src-container">
<label class="org-src-name">Список видеовыходов для X220 из src/mainboard/lenovo/x220/gma-mainboard.ads</label><pre class="src src-ada">private package GMA.Mainboard is

   ports : constant Port_List :=
     (DP1,
      DP2,
      DP3,
      HDMI1,
      HDMI2,
      HDMI3,
      Analog,
      LVDS,
      others =&gt; Disabled);

end GMA.Mainboard;
</pre>
</div>

<div class="org-src-container">
<label class="org-src-name">Инициализация видеоядра в src/drivers/intel/gma/hires_fb/gma-gfx_init.adb</label><pre class="src src-ada">HW.GFX.GMA.Display_Probing.Scan_Ports (configs, ports);

if configs (Primary).Port /= Disabled then
   for i in Pipe_Index loop
      exit when configs (i).Port = Disabled;

      min_h := pos32'min (min_h, configs (i).Mode.H_Visible);
      min_v := pos32'min (min_v, configs (i).Mode.V_Visible);
   end loop;

   fb := configs (Primary).Framebuffer;
   fb.Width    := Width_Type (min_h);
   fb.Height   := Height_Type (min_v);
   fb.Stride   := Div_Round_Up (fb.Width, 16) * 16;
   fb.V_Stride := fb.Height;

   for i in Pipe_Index loop
      exit when configs (i).Port = Disabled;

      configs (i).Framebuffer := fb;
   end loop;
</pre>
</div>

<p>
Поэтому, пока к LVDS (который прописан в конфигурации coreboot как primary)
был подключен оригинальный дисплей — coreboot упорно работал с ним, игнорируя
дисплей на DP-3. Стоило отключить оригинальный дисплей, как лог загрузки начал
отображаться на новом дисплее.
</p>
</div>
</div>
<div id="outline-container-libreboot" class="outline-2">
<h2 id="libreboot">Libreboot</h2>
<div class="outline-text-2" id="text-libreboot">
<p>
Какое-то время я пользовался ноутбуком с coreboot. Но работал он не очень
стабильно — по-видимому из-за того, что именно в блобе с Intel ME, вырезанном
из битого дампа биоса, были некорректные данные. Иногда, всегда в случайные
моменты времени, ноутбук зависал и перезапустить его можно было только по
зажатию кнопки Power. Иногда он и вовсе не включался — моргал светодиодами и
подсветкой экрана и на этом всё. Именно эти симптомы описывались <a href="https://doc.coreboot.org/northbridge/intel/sandybridge/me_cleaner.html">в
документации coreboot</a> и в разнообразных гайдах как «то что будет с вашей
системой, если вы совсем избавитесь от блоба с Intel ME».
</p>

<p>
К тому же, при сборке coreboot я указал разрешение framebuffer равное 1366x768
для своего 2K-экрана. В итоге, framebuffer отображался не на весь экран (в
X-сервере всё было ок):
</p>


<div class="figure">
<p><img src="/assets/static/broken_framebuffer.jpg" alt="Broken framebuffer due to wrong configuration" align="center" />
</p>
<p style="text-align: center"><i>Framebuffer отображался только внутри зелёной рамки</i></p>
</div>

<p>
В конечном итоге, мне всё это надоело и пришло время разбираться с
coreboot. Основной моей проблемой был навсегда утерянный BIOS от этого
ноутбука — и я не знал откуда взять «правильные» бинарные блобы с нужным
машинным кодом внутри.
</p>

<p>
Поэтому, вполне ожидаемо, что я первым делом начал читать про <a href="https://libreboot.org/">libreboot</a>. Это
своего рода дистрибутив coreboot, который стараются собирать так, чтобы внутри
у него не было штук с закрытым исходным кодом. Если для чего-то — например для
инициализации памяти — есть работающая опенсорсная реализация, то используется
именно она. Естественно 100% открытости всего кода добиться <a href="https://libreboot.org/news/policy.html">не получается</a>, но
как я понял:
</p>
<ul class="org-ul">
<li>IFD генерируется сразу в процессе сборки, специальным скриптом. Благо формат
Intel Firmware Descriptor известен.</li>
<li>Intel ME — скачивается у вендора и немедленно отключается через <a href="https://github.com/corna/me_cleaner">me_cleaner</a>.</li>
<li>GbE — опять-таки генерируется «на месте» специальным скриптом.</li>
</ul>

<p>
Иными словами — оригинальный BIOS для установки Libreboot на Thinkpad X220 мне
не нужен! Всё что надо — <a href="https://libreboot.org/docs/install/spi.html#do-not-use-ch341a">правильный программатор</a>, который не сожжёт микросхему
памяти и южный мост. К счастью, у меня как раз есть китайский CH341 с
джампером для выбора нужного логического уровня (5 В TTL либо 3.3 В CMOS):
</p>


<div class="figure">
<p><img src="/assets/static/ch341-1.jpg" alt="CH341 programmer with jumper to select logical level (at the bottom)" align="center" />
</p>
<p style="text-align: center"><i>Программатор CH341 с джампером для выбора логического уровня (жёлтый, снизу)</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/ch341-2.jpg" alt="1-2 jumper position enables CMOS logical level, 2-3 enables TTL level" align="center" />
</p>
<p style="text-align: center"><i>Китайская шелкография на плате CH341 (положение 1-2 включает CMOS logical level, 2-3: TTL level)</i></p>
</div>

<p>
<b>Disclaimer!</b> Все описанные ниже действия проверялись только на моём
Thinkpad'е. Часть из них была проделана из-за определённых «исторических
предпосылок», возникших в ходе модификации этого ноутбука. В любом случае,
нужно ориентироваться сначала официальную документацию!
</p>

<p>
Итак, вооружившись отвёрткой, программатором и целым вечером свободного
времени, я принялся приближать свой ноутбук к недостижимому совершенству.
</p>
</div>
<div id="outline-container-libreboot-preparations" class="outline-3">
<h3 id="libreboot-preparations">Подготовка к прошивке Libreboot</h3>
<div class="outline-text-3" id="text-libreboot-preparations">
</div>
<div id="outline-container-reading-docs" class="outline-4">
<h4 id="reading-docs">Внимательное (нет) чтение документации</h4>
<div class="outline-text-4" id="text-reading-docs">
<p>
Первым делом, нужно было прочитать много нужной документации на сайте проекта:
<a href="https://libreboot.org">https://libreboot.org</a>. Вот небольшой список из полезных ссылок, с помощью
которых можно составить определённое представление о том, что, как и почему
нужно делать:
</p>
<ul class="org-ul">
<li><a href="https://libreboot.org/docs/install/">https://libreboot.org/docs/install/</a> — тут написано, что мой Thinkpad
поддерживается Libreboot.</li>
<li><a href="https://libreboot.org/news/safety.html">https://libreboot.org/news/safety.html</a> — документация по необходимым
бинарным блобам.</li>
<li><a href="https://libreboot.org/docs/install/ivy_has_common.html">https://libreboot.org/docs/install/ivy_has_common.html</a> — команды для
подготовки бинарника libreboot к прошивке.</li>
<li><a href="https://libreboot.org/docs/maintain/#environmental-variables">https://libreboot.org/docs/maintain/#environmental-variables</a>,
<a href="https://libreboot.org/docs/build/">https://libreboot.org/docs/build/</a> и <a href="https://libreboot.org/git.html">https://libreboot.org/git.html</a> —
документация по системе сборки lbmk.</li>
</ul>
</div>
</div>
<div id="outline-container-mac-addr-saving" class="outline-4">
<h4 id="mac-addr-saving">Сохранение MAC-адреса встроенной сетевой карты</h4>
<div class="outline-text-4" id="text-mac-addr-saving">
<p>
Тут всё просто — поскольку этот MAC-адрес записан внутри области с GbE — он
будет стёрт при установке Libreboot. Поэтому, я просто записал вывод <code>ifconfig
em0</code> в надёжное место, чтобы не потерять свой уникальный адрес и записать его в
область с GbE, перед прошивкой Libreboot.
</p>
</div>
</div>
<div id="outline-container-coreboot-backup" class="outline-4">
<h4 id="coreboot-backup">Резервная копия текущей прошивки</h4>
<div class="outline-text-4" id="text-coreboot-backup">
<p>
Бекап текущей прошивки — это может быть единственным, что удержит ноутбук от
превращения в бесполезный чёрный кирпич, если вдруг что пойдёт не так. В моём
случае, нужна была резервная копия coreboot.
</p>

<p>
Для этого и пригодится программатор. Как я обнаружил, чтение содержимого чипа
памяти со включённого ноутбука возвращает каждый раз разные
дампы<sup><a id="fnr.coreboot_readings" class="footref" href="#fn.coreboot_readings" role="doc-backlink">4</a></sup>.
</p>

<p>
Для начала надо:
</p>
<ol class="org-ol">
<li>Отключить ноутбук от сети.</li>
<li>Снять аккумулятор.</li>
<li>Открутить 7 винтов снизу, которые держат клавиатуру и палмрест.</li>
<li>Снять клавиатуру и палмрест.</li>
<li>Отключить батарейку RTC (и не забыть проверить напряжение на ней).</li>
<li>Отклеить уголок защитной водонепроницаемой плёнки от левого нижнего угла
материнской платы. Под ней будет искомый чип.</li>
</ol>

<p>
Потом к обесточенному ноутбуку подключается «прищепка» от программатора:
</p>


<div class="figure">
<p><img src="/assets/static/ch341_on_winbond.jpg" alt="CH341 programmer connected to Winbond W23Q64CV" align="center" />
</p>
<p style="text-align: center"><i>Программатор CH341, подключенный к чипу Winbond W25Q64CV</i></p>
</div>

<p>
Команда для чтения содержимого чипа:
</p>
<pre class="example">
sudo flashrom -p ch341a_spi -c "W25Q64BV/W25Q64CV/W25Q64FV" -r coreboot_original1.rom -V
</pre>

<p>
И она должна выдавать примерно следующее, а не сообщения ошибках:
</p>
<pre class="example">
thinkpad/libreboot % sudo flashrom -p ch341a_spi -c "W25Q64BV/W25Q64CV/W25Q64FV" -r coreboot_original1.rom -V

flashrom v1.3.0 on Linux 6.1.57-gentoo-x86_64 (x86_64)
flashrom is free software, get the source code at https://flashrom.org

Using clock_gettime for delay loops (clk_id: 1, resolution: 1ns).
flashrom was built with GCC 13.3.1 20241024, little endian
Command line (7 args): flashrom -p ch341a_spi -c W25Q64BV/W25Q64CV/W25Q64FV -r coreboot_original1.rom -V
Initializing ch341a_spi programmer
Device revision is 3.0.4
The following protocols are supported: SPI.
Probing for Winbond W25Q64BV/W25Q64CV/W25Q64FV, 8192 kB: compare_id: id1 0xef, id2 0x4017
Added layout entry 00000000 - 007fffff named complete flash
Found Winbond flash chip "W25Q64BV/W25Q64CV/W25Q64FV" (8192 kB, SPI) on ch341a_spi.
Chip status register is 0x00.
This chip may contain one-time programmable memory. flashrom cannot read
and may never be able to write it, hence it may not be able to completely
clone the contents of this chip (see man page for details).
Reading flash... done.
</pre>

<p>
Уже потеряв один BIOS, я прочитал дамп BIOS три раза, а потом сравнил
полученные файлы — они должны были совпадать. Но, поскольку программатор был
подключен к USB-порту на лицевой панели компьютера, через концентратор внутри
системного блока, MD5-суммы не совпадали:
</p>
<pre class="example">
thinkpad/libreboot % md5sum *
115b37ab22dbe43bc7ff746bf174ac1f  coreboot_original1.rom
840cc3456aa5b0b3ba96353165f2ee3e  coreboot_original2.rom
ee978f3ed5fb4aab34b1d0a79cef455c  coreboot_original3.rom
</pre>

<p>
Стоило подключить его напрямую к USB-порту от материнской платы, как ошибки
чтения исчезли:
</p>
<pre class="example">
thinkpad/libreboot % md5sum *
ee978f3ed5fb4aab34b1d0a79cef455c  coreboot_original1.rom
ee978f3ed5fb4aab34b1d0a79cef455c  coreboot_original2.rom
ee978f3ed5fb4aab34b1d0a79cef455c  coreboot_original3.rom
</pre>

<p>
В принципе, этого достаточно для получения резервной копии, но я пошёл немного
дальше (из сентиментальных соображений) — хотелось, чтобы на материнской плате
стоял чип памяти от первой (сгоревшей) материнской платы — Macronix
MX25L6406E:
</p>


<div class="figure">
<p><img src="/assets/static/macronix.jpg" alt="Macronix MX25L6406E" align="center" />
</p>
<p style="text-align: center"><i>Macronix MX25L6406E</i></p>
</div>

<p>
Сначала я отпаял чип со старой платы за пару простых шагов:
</p>
<ol class="org-ol">
<li>При помощи паяльника смешал бессвинцовый припой на ногах чипа с обычным,
свинцовым припоем, чтобы температура плавления этой смеси в итоге была
ниже, чем у бессвинцового припоя.</li>
<li>Снял чип при помощи паяльного фена, разогретого до 380°С (китайских
градусов, поэтому температура определялась на глаз по тому, насколько бодро
фен плавит припой с катушки).</li>
</ol>

<p>
Посадочное место под чип выглядит вот так:
</p>


<div class="figure">
<p><img src="/assets/static/chip_footprint.jpg" alt="BIOS chip footprint" align="center" />
</p>
<p style="text-align: center"><i>Посадочное место под чип памяти с BIOS на материнской плате Thinkpad X220</i></p>
</div>

<p>
Четыре контактных площадки в центре очевидно не задействованы — потому что он
в корпусе SOIC 8, у которого только 8 ножек по бокам.
</p>

<p>
Таким же способом я снял чип Winbond с рабочей материнской платы и положил его
в антистатический пакетик. Теперь у меня был надежный, железный бекап, если
вдруг что пойдёт не так🙃.
</p>

<p>
Ну и потом, на всякий пожарный, я проверил свой бекап. Припаял чип от Macronix
на плату:
</p>


<div class="figure">
<p><img src="/assets/static/soldered_macronix.jpg" alt="Macronix chip on the working motherboard" align="center" />
</p>
<p style="text-align: center"><i>Чип Macronix на работающей материнской плате</i></p>
</div>

<p>
И прошил в него резервную копию coreboot, считанную ранее, при помощи команды:
</p>
<pre class="example">
sudo flashrom -p ch341a_spi -c "MX25L6406E/MX25L6408E" -w coreboot_original1.rom -V
</pre>

<p>
Которая успешно всё записала:
</p>
<pre class="example">
Erase/write done.
Verifying flash... VERIFIED.
</pre>

<p>
В итоге, ноутбук запустился, а значит старый-новый чип был успешно припаян и
резервная копия coreboot была прочитана верно.
</p>
</div>
</div>
</div>
<div id="outline-container-get-libreboot-binary" class="outline-3">
<h3 id="get-libreboot-binary">Получение бинарного файла Libreboot</h3>
<div class="outline-text-3" id="text-get-libreboot-binary">
<p>
Простой путь:
</p>
<ol class="org-ol">
<li>Выбрать зеркало проекта вот тут: <a href="https://libreboot.org/download.html">https://libreboot.org/download.html</a></li>
<li>Скачать архив с прошивкой по пути <code>/pub/libreboot/stable/20240612/roms</code> (на
данный момент это самый последний релиз).</li>
</ol>

<p>
Путь <del>посложнее</del> для крипто-параноиков:
</p>
<ol class="org-ol">
<li>Надо скачать GPG-ключ разработчиков для проверки подписанного архива с
прошивкой: <a href="https://mirror.math.princeton.edu/pub/libreboot/lbkey.asc">https://mirror.math.princeton.edu/pub/libreboot/lbkey.asc</a></li>
<li><p>
С выбранного зеркала проекта нужно скачать следующие три файла для
Thinkpad X220:
</p>
<pre class="example">
libreboot-20240612_x220_8mb.tar.xz
libreboot-20240612_x220_8mb.tar.xz.sha512
libreboot-20240612_x220_8mb.tar.xz.sig
</pre></li>
<li><p>
Потом нужно проверить SHA512 сумму у архива:
</p>
<pre class="example">
thinkpad/libreboot % sha512sum -c libreboot-20240612_x220_8mb.tar.xz.sha512
./libreboot-20240612_x220_8mb.tar.xz: OK
</pre></li>
<li><p>
И последний пункт — надо импортировать GPG-ключ от разработчиков:
</p>
<pre class="example">
thinkpad/libreboot % gpg --show-keys --with-fingerprint lbkey.asc
pub   rsa4096 2023-12-28 [SC] [expires: 2028-12-26]
8BB1 F7D2 8CF7 696D BF4F  7192 5C65 4067 D383 B1FF
uid                      Leah Rowe &lt;info@minifree.org&gt;
sub   rsa4096 2023-12-28 [E] [expires: 2028-12-26]

thinkpad/libreboot % gpg --import lbkey.asc
gpg: key 5C654067D383B1FF: public key "Leah Rowe &lt;info@minifree.org&gt;" imported
gpg: Total number processed: 1
gpg:               imported: 1
</pre>

<p>
После выполнения первой команды нужно сравнить fingerprint ключа с тем, что
указан <a href="https://libreboot.org/download.html">на странице загрузки</a> — они должны совпадать. Иначе, <i>кто-то</i> подсунул
неверный ключ.
</p>

<p>
Если всё ОК, то можно переходить к проверке подписи:
</p>
<pre class="example">
thinkpad/libreboot % gpg --verify libreboot-20240612_x220_8mb.tar.xz.sig libreboot-20240612_x220_8mb.tar.xz
gpg: Signature made Wed 12 Jun 2024 12:55:03 PM MSK
gpg:                using RSA key 8BB1F7D28CF7696DBF4F71925C654067D383B1FF
gpg: Good signature from "Leah Rowe &lt;info@minifree.org&gt;" [unknown]
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 8BB1 F7D2 8CF7 696D BF4F  7192 5C65 4067 D383 B1FF
</pre></li>
</ol>
</div>
</div>
<div id="outline-container-prepare-libreboot-binary" class="outline-3">
<h3 id="prepare-libreboot-binary">Подготовка бинарника Libreboot к прошивке</h3>
<div class="outline-text-3" id="text-prepare-libreboot-binary">
<p>
Очевидно, полностью избавиться от всех блобов для платы от X220 на данный
момент невозможно. Тот же Intel ME имеет криптографическую подпись, которая
проверяется каждый раз при запуске процессора — если подпись неверная, то
процессор не запускается.
</p>

<p>
В то же время, поставлять проприетарный блоб с этой штукой внутри бинарника
Libreboot невозможно из-за последующих проблем с лицензией. Разработчики
выкрутились из этой ситуации, предлагая специальный скрипт который скачивает
бинарник с Intel ME и вставляет его по нужному смещению внутрь бинарника с
Libreboot. Процесс описан на сайте разработчиков, вот тут:
<a href="https://libreboot.org/docs/install/ivy_has_common.html">https://libreboot.org/docs/install/ivy_has_common.html</a>. Ну а необходимые
скрипты лежат внутри lbmk — системы для сборки своего Libreboot, которую можно
склонировать отсюда: <a href="https://codeberg.org/libreboot/lbmk">https://codeberg.org/libreboot/lbmk</a>.
</p>

<p>
После установки нужных зависимостей, как описано в документации, можно сразу
скармливать скрипту скачанный tarball — он распакует бинарники из него и
встроит в каждый нужные блобы:
</p>
<pre class="example">
./vendor inject libreboot-20240612_x220_8mb.tar.xz
</pre>

<p>
Процесс не самый быстрый — lbmk будет клонировать необходимые репозитории,
собирать нужные ему утилиты и так далее. Успешное завершение будет выглядеть
примерно так:
</p>
<pre class="example">
File tmp/romdir/bin/x220_8mb/seabios_withgrub_x220_8mb_libgfxinit_txtmode_usqwerty_grubfirst.rom is 8388608 bytes
File vendorfiles/xx20/me.bin is 86016 bytes
Adding vendorfiles/xx20/me.bin as the Intel ME section of tmp/romdir/bin/x220_8mb/seabios_withgrub_x220_8mb_libgfxinit_txtmode_usqwerty_grubfirst.rom
Writing new image to tmp/romdir/bin/x220_8mb/seabios_withgrub_x220_8mb_libgfxinit_txtmode_usqwerty_grubfirst.rom
ROM image successfully patched: tmp/romdir/bin/x220_8mb/seabios_withgrub_x220_8mb_libgfxinit_txtmode_usqwerty_grubfirst.rom
</pre>

<p>
А подготовленные бинарники будут лежать в каталоге с lbmk по этому пути:
<code>./bin/release/x220_8mb/</code>.
</p>
</div>
</div>
<div id="outline-container-libreboot-flashing" class="outline-3">
<h3 id="libreboot-flashing">Прошивка готового бинарника с Libreboot</h3>
<div class="outline-text-3" id="text-libreboot-flashing">
<p>
Из всех бинарников из архива нужно было выбрать тот, который подходит для
клавиатуры, установленной в ноутбуке:
</p>


<div class="figure">
<p><img src="/assets/static/list-of-binaries.png" alt="List of binaries with added blobs" align="center" />
</p>
<p style="text-align: center"><i>Список бинарников с добавленными блобами</i></p>
</div>

<p>
В моём случае, в ноутбуке стоит клавиатура с US-раскладкой, поэтому необходимы
вот эти два файла:
</p>
<ul class="org-ul">
<li>seabios_withgrub_x220_8mb_libgfxinit_txtmode_usqwerty.rom</li>
<li>seabios_withgrub_x220_8mb_libgfxinit_corebootfb_usqwerty.rom</li>
</ul>

<p>
Libreboot из первого файла будет использовать текстовый режим для вывода
информации на экран — не факт, что в этом режиме он отобразится на дисплее на
шине DP-3. А вот во втором файле используется как раз libgfxinit.
</p>

<p>
Прошивается он всё так же через программатор, командой:
</p>
<pre class="example">
sudo flashrom -p ch341a_spi -c "MX25L6406E/MX25L6408E" -w seabios_withgrub_x220_8mb_libgfxinit_corebootfb_usqwerty.rom -V
</pre>


<div class="figure">
<p><img src="/assets/static/libreboot-flashing.jpg" alt="Flashing Libreboot" align="center" />
</p>
</div>

<p>
После этого ноутбук наконец-то начал стабильно запускаться после каждого
включения и перестал зависать в случайные моменты времени. А загрузка системы
наконец начала происходить в полноэкранном режиме:
</p>


<div class="figure">
<p><img src="/assets/static/framebuffer.jpg" alt="Laptop booting at fullscreen" align="center" />
</p>
</div>

<p>
Всё остальные системы ноутбука работали как и прежде, ведь всё было настроено
как нужно ещё во времена использования coreboot:
<a href="https://eugene-andrienko.com/it/2020/09/26/thinkpad-x220-freebsd#update-2024-04-28">https://eugene-andrienko.com/it/2020/09/26/thinkpad-x220-freebsd#update-2024-04-28</a>
</p>
</div>
</div>
<div id="outline-container-mac-address" class="outline-3">
<h3 id="mac-address">MAC адрес</h3>
<div class="outline-text-3" id="text-mac-address">
<p>
Те, кто читал документацию, могли заметить, что я не добавил свой MAC-адрес в
бинарник перед её прошивкой. В результате, у меня был забавный дефолтный
адрес:
</p>


<div class="figure">
<p><img src="/assets/static/default-mac.png" alt="Default Libreboot MAC address" align="center" />
</p>
</div>

<p>
Я поменял его, взяв прошитый бинарник и ещё раз использовав скрипт из lbmk:
</p>
<pre class="example">
libreboot/lbmk % ./vendor inject -r bin/release/x220_8mb/seabios_withgrub_x220_8mb_libgfxinit_corebootfb_usqwerty.rom -b x220_8mb -m ██:██:██:██:██:██
</pre>

<p>
Потом просто прошил модифицированный libreboot ещё раз в материнскую плату.
</p>
</div>
</div>
</div>
<div id="outline-container-libreboot-customization" class="outline-2">
<h2 id="libreboot-customization">Кастомизация libreboot</h2>
<div class="outline-text-2" id="text-libreboot-customization">
<p>
Теперь, всё было как надо. Почти всё. Авторы libreboot, когда собирали его для
ThinkPad X220, не стали делать отдельный набор прошивок для тех, кто любит
менять местами клавиши Ctrl и Fn на клавиатуре. Какое-то время я пытался
привыкнуть к стандартному для Thinkpad расположению этих клавиш, но не
преуспел в этом.
</p>

<p>
Сначала, чтобы поменять их местами, я решил просто пересобрать Libreboot с
нужной мне опцией:
</p>
<pre class="example">
Chipset:
  Swap Fn and Ctrl keys=y
</pre>

<p>
Казалось бы, раз я уже собирал coreboot и у меня есть вся нужная документация,
то никаких проблем возникнуть не должно. Просто задам нужные настройки через
<code>./mk -m coreboot x220_8mb</code>, а потом соберу бинарник:
</p>
<pre class="example">
export XBMK_THREADS=3
./mk -b coreboot x220_8mb
</pre>

<p>
Но, <b>внезапно</b>, libreboot оказался первой опенсорсной программой за 16 лет,
которую я не смог собрать должным образом. Хотя конфигурация и сборка
проходили успешно, в итоге бинарники всегда получались с конфигурацией «по
умолчанию», от разработчиков.
</p>

<p>
К счастью, оказалось, что <i>некоторые</i> опции можно поменять при помощи утилиты
<code>nvramtool</code> из поставки coreboot. И в списке опций была та самая, что меняет
местами клавиши:
</p>

<pre class="example">
% ../../coreboot/build/util/nvramtool/nvramtool -C seabios_withgrub_x220_8mb_libgfxinit_corebootfb_usqwerty.rom -a
boot_option = Fallback
reboot_counter = 0x0
debug_level = Debug
nmi = Enable
power_on_after_fail = Disable
first_battery = Primary
bluetooth = Enable
wwan = Enable
touchpad = Enable
wlan = Enable
trackpoint = Enable
fn_ctrl_swap = Disable
sticky_fn = Disable
power_management_beeps = Disable
sata_mode = AHCI
usb_always_on = Disable
me_state = Disabled
me_state_prev = 0x0
gfx_uma_size = 224M
volume = 0x3
</pre>

<p>
Дальше всё было так же как и в случае с установкой MAC-адреса:
</p>
<ol class="org-ol">
<li><p>
Бинарный файл с прошивкой меняется командой:
</p>
<pre class="example">
% ../../coreboot/build/util/nvramtool/nvramtool -C seabios_withgrub_x220_8mb_libgfxinit_corebootfb_usqwerty.rom -w fn_ctrl_swap=Enable
</pre></li>
<li>И прошивается в ноутбук.</li>
</ol>

<p>
В результате клавиши переназначены и ноутбук работает по-прежнему, без
зависаний.
</p>
</div>
</div>
<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Примечания</h2>
<div class="outline-text-2" id="text-notes">
</div>
</div>
<div id="footnotes">

<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.manufacturer_approve" class="footnum" href="#fnr.manufacturer_approve" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
С тех пор как IBM продала свой ноутбучный бизнес
компании Lenovo, дух старых ThinkPad'ов постепенно, но неумолимо, пропадает из
новых ноутбуков, выпускаемых под этой маркой.
</p>

<p class="footpara">
В этом процессе нет ничего удивительного — обычный корпоративный
<a href="https://web.archive.org/web/20240208152542/https://www.ft.com/content/6fb1602d-a08b-4a8c-bac0-047b7d64aba5">enshittification</a>. Одно из его проявлений — whitelist в BIOS'е Lenovo
ThinkPad X220. На материнской плате ноутбука есть два разъёма PCI Express, в
которые изначально установлены WiFi и WWAN карты (или WiFi-карта и SSD). Их
можно снять и установить какие-нибудь другие периферийные устройства,
подключаемые через шину PCI Express — аппаратное обеспечение будет работать с
этими устройствами. Но не программное обеспечение — при старте системы BIOS
«увидит», что ID устройств на шине не совпадает с его whitelist'ом, и
откажется работать с новыми «не одобренными» устройствами.
</p>

<p class="footpara">
Обосновывается такое обычно тем, что пользователя якобы «защищают» от
«некачественных» third-party комплектующих. Получается, несмотря на то, что я
купил себе ноутбук — я не владею им полностью. Даже при наличии необходимых
технических навыков, я не могу заменить WiFi-карточку на более современную,
потому что производитель держит меня за идиота! Происходит именно то, о чём
много раз писал RMS в своих эссе — если в вашем устройстве есть проприетарное
ПО, то вы не владеете в полной мере вычислительными мощностями купленного
устройства и производитель может диктовать вам свои условия. Например,
вынуждать использовать оборудование только из одобренного списка.
</p>

<p class="footpara">
Очевидно, <del>с финансовой точки зрения</del> с точки зрения увеличения прибыли ряда
корпораций ради красивого отчёта перед советом акционеров — подобные
ограничения очень выгодны — покупатель ноутбука будет вынужден использовать
только те устройства, производители которых договорились о включении своих
устройств в whitelist. А когда аппаратное обеспечение устареет — ему придётся
купить новый ноутбук вместо покупки одной маленькой и заменяемой
железяки. Если же что-то сломается и запасная деталь к тому моменту пропадёт с
рынка, то &#x2026; ему опять же придётся купить новый ноутбук вместо использования
подходящей замены. Об удобстве пользователя, уменьшении количества e-waste и
т.д. в этот момент естественно никто не думает (может кроме <a href="https://frame.work">Framework</a>).
</p>

<p class="footpara">
Поэтому, в ThinkPad X230 появился whitelist для аккумуляторных батарей
(<a href="http://zmatt.net/unlocking-my-lenovo-laptop-part-1/">http://zmatt.net/unlocking-my-lenovo-laptop-part-1/</a>), в ThinkPad X240 —
whitelist для дисплеев
(<a href="https://www.reddit.com/r/thinkpad/comments/dgydnf/x240_right_to_repair_no_brightness_control_after/">https://www.reddit.com/r/thinkpad/comments/dgydnf/x240_right_to_repair_no_brightness_control_after/</a>)
и так далее. Процесс enshittifica'ции конечно же не остановился на этом:
</p>
<ul class="org-ul">
<li>В ThinkPad X230 пропала семирядная клавиатура с пирамидальными кнопками — её
заменили на шестирядную клавиатуру, убрав кнопки:
<ul class="org-ul">
<li><code>Print Screen/System Request</code> — теперь не получится сделать скриншот
нажатием одной кнопки и стали недоступны <a href="https://en.wikipedia.org/wiki/Magic_SysRq_key">magic SysRq keys</a>.</li>
<li><code>Scroll Lock</code> — использовался для прокрутки вывода в текстовой консоли,
например лога загрузки ОС (очевидно, прокрутка в bash/zsh или в tmux
недоступна на этом этапе).</li>
<li><code>Pause/Break</code> — её можно использовать для того, чтобы поставить приложение
на паузу через <code>kill -17</code>:
<a href="https://vermaden.wordpress.com/2018/09/19/freebsd-desktop-part-16-configuration-pause-any-application/">https://vermaden.wordpress.com/2018/09/19/freebsd-desktop-part-16-configuration-pause-any-application/</a></li>
<li>2 кнопки для перехода вперёд и назад в браузере, с кодами <code>XF86Forward</code> и
<code>XF86Back</code> — их было очень удобно использовать для переключения между
буферами в Emacs.</li>
</ul></li>
<li><p>
В Thinkpad X240 пропали <b>отдельные</b> кнопки для TrackPoint'а — их перенесли на
тачпад. Изогнутый профиль левой и правой кнопок, а также рифлёная
поверхность средней кнопки позволяли не задумываясь, на мышечной памяти
нажимать их, зная что палец не попадёт на тачпад. С кнопками под плоской
поверхностью тачпада уже не получится — ничто <i>физически</i> не останавливает
палец от скольжения дальше, на сенсорную поверхность.
</p>

<p>
К тому же, руками в перчатках было удобнее нажимать именно отдельные,
<b>физические</b> кнопки.
</p>

<p>
К счастью, возмущение со стороны пользователей вернуло эти кнопки назад, но
Lenovo вновь попыталась убрать их в <a href="https://en.wikipedia.org/wiki/ThinkPad_X1_series#/media/File:Gladstone_ready_for_2017_Budget.jpg">Thinkpad X1 Carbon gen 2</a>. Впрочем, в
этой модели было столько неадекватных «иННоВаЦиЙ» в области
пользовательского ввода, что для их перечисления потребуется отдельный
список.
</p></li>
<li><p>
Постепенно, начиная с X200, с крышки ноутбука стали пропадать
светодиоды. Сначала в X220 со стороны дисплея исчез индикатор NumLock (1н
ну3ен чт1бы не печатат0 в1т так, а потом всё исправлять), индикатор сна
(нужен, чтобы понять состояние ноутбука, если его оставили с открытой
крышкой) и индикатор зарядки батареи (не нужен отдельный программный
индикатор, состояние которого видно только после загрузки ОС). Потом, в X230
пропал индикатор состояния Bluetooth (по нему можно понять, что rf
killswitch переключен в положение off), а в X240 убрали вообще все статусные
светодиоды со стороны дисплея (зато вернули обратно светящуюся красную точку
в логотипе).
</p>

<p>
В конечном итоге, у последнего ноутбука из X-серии —ThinkPad X13 Gen 4 нет
ни одного статусного светодиода ни на передней, ни на задней стороне
крышки🤷‍♂️ (кроме индикатора CapsLock).
</p></li>
<li><p>
В X280 убрали съёмную батарею — не получится самому сменить деградировавшую
батарею на новую, придётся нести ноутбук в сервисный центр. Также, не
получится купить и самостоятельно поставить более ёмкую батарею.
</p>

<p>
Неочевидный плюс от использования батареи большой ёмкости тоже пропал — тот
же X220 можно переносить в открытом состоянии по офису, просто положив его
на предплечье и придерживая четырьмя пальцами за выступающую часть батареи,
чтобы ноутбук не упал.
</p></li>
<li><p>
Заменили Display Port на HDMI.
</p>

<div class="figure">
<p><img src="/assets/static/display-port.png" alt="Fun fact. Display port is objectively better than HDMI. Royalty-free, baby" align="center" />
</p>
</div></li>
<li><p>
Заменили круглый разъём для зарядки на прямоугольный ради уменьшения толщины
ноутбука, но теперь у штекера только два положения, в которых его можно
вставить. Над подсветкой для клавиатуры тоже долго издевались. То заменят
привычный светодиод, встроенный в крышку, выдвигающейся конструкцией. То
уберут его совсем и поставят подсветку клавиатуры «как у всех» — тогда как у
светодиода в крышке был неоспоримый плюс: его можно было использовать для
освещения стола в экстренных случаях.
</p>

<p>
Аналогичная беда произошла с возможностью пристегнуть док-станцию или
дополнительную батарею снизу ноутбука, с отдельными кнопками для регулировки
громкости, со светодиодами, показывающими, что динамики или микрофон на мьюте
и так далее и тому подобное&#x2026;
</p></li>
</ul>

<p class="footpara">
Пока удаётся увеличивать прибыль за счёт ухудшения usability ноутбуков,
изначально спроектированных «инженерами для инженеров», за счёт простого
наращивания гигагерац и гигабайтов и за счёт копирования экстерьера MacBook'а,
продавая всё это простым пользователям как «инновации» — такие вещи будут
происходить. Уже звучат голоса за то, чтобы убрать TrackPoint из ThinkPad'ов:
«<a href="https://www.windowscentral.com/hardware/laptops/sorry-lenovo-but-its-time-to-kill-off-the-thinkpad-trackpoint-forever">Sorry Lenovo, but it's time to kill off the ThinkPad TrackPoint FOREVER</a>» —
хотя по этой статье понятно, что человек просто не умеет в «слепую печать» и
не работал в перчатках, поэтому ему кажется, что TrackPoint это «неудобная
фигня, которая мешается».
</p></div></div>

<div class="footdef"><sup><a id="fn.linuxbios" class="footnum" href="#fnr.linuxbios" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://web.archive.org/web/20120916212555/http://www.h-online.com/open/features/The-Open-Source-BIOS-is-Ten-An-interview-with-the-coreboot-developers-746525.html?view=print">https://web.archive.org/web/20120916212555/http://www.h-online.com/open/features/The-Open-Source-BIOS-is-Ten-An-interview-with-the-coreboot-developers-746525.html?view=print</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.intel_me" class="footnum" href="#fnr.intel_me" role="doc-backlink">3</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Цитата из <a href="https://libreboot.org/faq.html">https://libreboot.org/faq.html</a>:
</p>

<blockquote>
<p>
The ME consists of an ARC processor core (replaced with other processor cores
in later generations of the ME), code and data caches, a timer, and a secure
internal bus to which additional devices are connected, including a
cryptography engine, internal ROM and RAM, memory controllers, and a direct
memory access (DMA) engine to access the host operating system’s memory as
well as to reserve a region of protected external memory to supplement the
ME’s limited internal RAM. The ME also has network access with its own MAC
address through an Intel Gigabit Ethernet Controller. Its boot program, stored
on the internal ROM, loads a firmware “manifest” from the PC’s SPI flash
chip. This manifest is signed with a strong cryptographic key, which differs
between versions of the ME firmware. If the manifest isn’t signed by a
specific Intel key, the boot ROM won’t load and execute the firmware and the
ME processor core will be halted.
</p>

<p>
The ME firmware is compressed and consists of modules that are listed in the
manifest along with secure cryptographic hashes of their contents. One module
is the operating system kernel, which is based on a proprietary real-time
operating system (RTOS) kernel called “ThreadX”. The developer, Express Logic,
sells licenses and source code for ThreadX. Customers such as Intel are
forbidden from disclosing or sublicensing the ThreadX source code. Another
module is the Dynamic Application Loader (DAL), which consists of a Java
virtual machine and set of preinstalled Java classes for cryptography, secure
storage, etc. The DAL module can load and execute additional ME modules from
the PC’s HDD or SSD. The ME firmware also includes a number of native
application modules within its flash memory space, including Intel Active
Management Technology (AMT), an implementation of a Trusted Platform Module
(TPM), Intel Boot Guard, and audio and video DRM systems.
</p>
</blockquote></div></div>

<div class="footdef"><sup><a id="fn.coreboot_readings" class="footnum" href="#fnr.coreboot_readings" role="doc-backlink">4</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Когда-то я находил объяснение этому на Reddit'е, но увы не
смог найти ссылку при написании данного поста. То что flashrom возвращает
каждый раз разные дампы coreboot при использовании <code>-p internal</code> на
Thinkpad X220 — совершенно нормально и для получения <i>правильной</i> резервной
копии <b>надо</b> использовать программатор.
</p></div></div>


</div>
</div>]]></content><author><name>Eugene Andrienko</name></author><category term="it" /><category term="thinkpad" /><summary type="html"><![CDATA[Предполагаю, практически всем читателям моего блога известно, что одна из первых программ запускаемых при старте компьютера — это BIOS. Обычно всё что с ним можно сделать — зайти в меню с настройками и что-нибудь там поменять: порядок загрузки с носителей, дату/время, различные настройки периферийных устройств и так далее. Либо, при определённой доле везения, возможно отыскать модифицированный хакерами BIOS, который добавляет новые функции или убирает ненужные ограничения, и прошить его вместо оригинального (не имея возможности хотя бы посмотреть, что там внутри, без навыков reverse engineering'а). К сожалению, исходные коды BIOS закрыты и в деле инициализации своего компьютера приходится полагаться на милость нескольких корпораций, которые разрабатывают BIOS'ы (например, AMI или Award Software International) и вендоров вашего железа.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://eugene-andrienko.com/assets/static/header-libreboot.jpg" /><media:content medium="image" url="https://eugene-andrienko.com/assets/static/header-libreboot.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="ru"><title type="html">Фотографии осени 2024</title><link href="https://eugene-andrienko.com/photo/2024/12/16/autumn-photos-2024.html" rel="alternate" type="text/html" title="Фотографии осени 2024" /><published>2024-12-16T00:00:00+03:00</published><updated>2024-12-16T00:00:00+03:00</updated><id>https://eugene-andrienko.com/photo/2024/12/16/autumn-photos-2024</id><content type="html" xml:base="https://eugene-andrienko.com/photo/2024/12/16/autumn-photos-2024.html"><![CDATA[<div class="outline-2">
<h2>Стрит-фото</h2>
<div class="outline-text-2">

<div class="figure">
<p><img src="/assets/static/20240901_175512.JPG" alt="Cat in the bushes" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_172503.JPG" alt="Stairs and reflection of the stairs on the wall" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_180005.JPG" alt="Construction site" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_180049.JPG" alt="The house reflection in the water" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_180352.JPG" alt="The bridge, the river and the reflection of the bridge in the river" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_181003.JPG" alt="The black cat on the white car" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_183044.JPG" alt="20240901_183044.JPG" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_183448.JPG" alt="The plant behind the glass. The pipes are reflected on the glass" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_183504.JPG" alt="The pipes with the white winding on it" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_183735.JPG" alt="Turned on and rounded LED line" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_184537.JPG" alt="The white arc with people under it" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_184843.JPG" alt="Overexposured house entrance" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_185217.JPG" alt="Double exposured photo - the black dog and the empty street" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_185409.JPG" alt="Disfoqused flower and the wall of the house at the background" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_190652.JPG" alt="The oak leaves" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_190947.JPG" alt="The ornamental cabbage" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_211915.JPG" alt="Illuminated interior of the store at night" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240902_130540.JPG" alt="Backsides of the garages, filled with graffiti" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240902_130618.JPG" alt="Unknown cyclist in casual clothes" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240929_181202.JPG" alt="The rural house with blue roof" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240929_194649.JPG" alt="The green pond with concrete walls" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240929_195025.JPG" alt="The oaf brown leaf with green leaves around" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240929_195256.JPG" alt="Grocery store near the road at night" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240929_195606.JPG" alt="Backsides of grocery store at night. Illuminated by the red brake lights of the car." align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241016_150405.JPG" alt="Bird's wedge" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241023_170805.JPG" alt="Sunset with black city's roofs at the foreground" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241023_170913.JPG" alt="Sunset with black city's roofs at the foreground" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241024_221613.JPG" alt="Unfallen autumn leaves. Shot with flash" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241024_223031.JPG" alt="Brown colored lamp on the brown stone wall" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241024_223533.JPG" alt="Blue and orange colored pedestrian way" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241029_194625.JPG" alt="Road traffic shot with long exposure" align="center" />
</p>
<p style="text-align: center"><i>Дорожный трафик, снятый на длинную выдержку</i></p>
</div>
</div>
</div>
<div class="outline-2">
<h2>Всё, что с колёсами</h2>
<div class="outline-text-2">

<div class="figure">
<p><img src="/assets/static/20240901_171707.JPG" alt="Electric scooter's wheel" align="center" />
</p>
<p style="text-align: center"><i>Колесо электросамоката</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_184004.JPG" alt="Electric scooter's wheel" align="center" />
</p>
<p style="text-align: center"><i>Колесо электросамоката</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_185920.JPG" alt="20240901_185920.JPG" align="center :alt: Scooter's mirror" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_185943.JPG" alt="Scooter's mirror" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_185950.JPG" alt="Scooter's dashboard" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/mercedes.jpg" alt="Black and white and colored photos of an old mercedes" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240901_192947.JPG" alt="Red stoplight of the sea green car" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240902_131757.JPG" alt="Black-red stoplight of the blue car" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20241024_220136.JPG" alt="Foggy car window at night" align="center" />
</p>
</div>
</div>
</div>]]></content><author><name>Eugene Andrienko</name></author><category term="photo" /><summary type="html"><![CDATA[Стрит-фото]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://eugene-andrienko.com/assets/static/header_autumn_photos2024.jpg" /><media:content medium="image" url="https://eugene-andrienko.com/assets/static/header_autumn_photos2024.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="ru"><title type="html">Как я сделал Emacs-плагин для сборки своего блога</title><link href="https://eugene-andrienko.com/it/2024/12/01/emacs-plugin-jekyll-blog.html" rel="alternate" type="text/html" title="Как я сделал Emacs-плагин для сборки своего блога" /><published>2024-12-01T00:00:00+03:00</published><updated>2024-12-01T00:00:00+03:00</updated><id>https://eugene-andrienko.com/it/2024/12/01/emacs-plugin-jekyll-blog</id><content type="html" xml:base="https://eugene-andrienko.com/it/2024/12/01/emacs-plugin-jekyll-blog.html"><![CDATA[<div class="outline-2">
<h2>TOC&#xa0;&#xa0;&#xa0;<span class="tag"></span></h2>
<div class="outline-text-2">
<ul class="org-ul">
<li><a href="#preface">Введение</a></li>
<li><a href="#generator-first-version">Первая версия генератора блога</a></li>
<li><a href="#emacs-lisp-jekyll-gen">Генерация Jekyll-блога c помощью Emacs Lisp</a>
<ul class="org-ul">
<li><a href="#convert-org2html">Преобразование org-файлов в HTML</a></li>
<li><a href="#copy-2-tmp-catalog">Копирование файлов в промежуточный каталог</a></li>
<li><a href="#html-file-editing">Редактирование HTML файлов</a></li>
<li><a href="#static-files-export">Экспорт статических файлов</a></li>
<li><a href="#jekyll-build-from-emacs">Вызов Jekyll из Emacs</a></li>
<li><a href="#create-new-post">Создание нового поста</a></li>
<li><a href="#jekyll-local-server">Запуск локального сервера Jekyll</a></li>
<li><a href="#jekyll-clean">Очистка рабочего каталога Jekyll</a></li>
<li><a href="#transient-ui">Интерфейс пользователя (transient)</a></li>
<li><a href="#emacs-plugin">Оформление в виде плагина</a></li>
<li><a href="#loading-plugin-in-emacs">Загрузка плагина в Emacs</a></li>
</ul></li>
<li><a href="#source-code">Исходный код плагина</a></li>
<li><a href="#plugin-improvement">Что ещё можно улучшить?</a></li>
<li><a href="#notes">Примечания</a></li>
</ul>
</div>
</div>
<div id="outline-container-preface" class="outline-2">
<h2 id="preface">Введение</h2>
<div class="outline-text-2" id="text-preface">
<p>
В этом посте я рассказываю о том как написал свой небольшой Emacs-плагин
упрощающий работу с блогом на статическом движке. С этим плагином возможно
писать и публиковать посты для блога в OrgMode несмотря на то, что практически
все распространённые генераторы статических сайтов поддерживают в основном
языки разметки Markdown, reStructuredText или HTML🌚.
</p>

<p>
В плане блоггинга я успел перепробовать много всего:
</p>
<ul class="org-ul">
<li>Писал в LiveJournal</li>
<li>Сэлфхостил блог на Wordpress с «традиционным» LAMP-стэком</li>
<li>Вёл блог на Blogger.com</li>
<li>Снова сэлфхостил свой блог, собираемый при помощи генератора статических
сайтов Pelican, с добавлением комментариев на Disqus</li>
<li>Пробовал <a href="https://hackage.haskell.org/package/pencil">pencil</a></li>
<li>и так далее&#x2026;</li>
</ul>

<p>
В конечном итоге, необходимость администрирования и обновления Apache/Nginx,
MySQL/PostgreSQL, php-fpm и т.д. и т.п. — изрядно мне надоела. Как и всякие
куцые WYSIWYG-редакторы и ненужные «обновления» блоггинг-платформ. Тут же как
раз подоспел всякий «virtue signaling», из-за которого я
лишился<sup><a id="fnr.virtue_signaling" class="footref" href="#fn.virtue_signaling" role="doc-backlink">1</a></sup> своего VPS (он обеспечивал мне доступ в «большой
интернет» — раньше, в 90-х и нулевых была такая глобальная сеть, при помощи
которой можно было свободно общаться с людьми по всему миру и без границ,
блокировок по GeoIP и DPI). А также почти лишился доменного
имени<sup><a id="fnr.namecheap" class="footref" href="#fn.namecheap" role="doc-backlink">2</a></sup>.
</p>

<p>
Примерно в этот момент я пришёл к использованию <a href="https://jekyllrb.com/">Jekyll</a><sup><a id="fnr.jekyll" class="footref" href="#fn.jekyll" role="doc-backlink">3</a></sup> в качестве
статического генератора для своего блога. Его копия, со всеми HTML и CSS
файлами, хранится у меня на машине и не зависит от сторонних CDN, библиотек и
всего прочего, к чему я могу потерять доступ в любой момент. Пришлось
«немного» подправить тему <a href="https://github.com/jeffreytse/jekyll-theme-yat">Yat</a>, чтобы там не было ни JS<sup><a id="fnr.javascript" class="footref" href="#fn.javascript" role="doc-backlink">4</a></sup>, ни
подгрузки ресурсов со сторонних CDN. При локальном использовании, единственная
оставшаяся зависимость — от самого Jekyll и от его плагинов. Но они и так уже
лежат на жёстком диске и работают без подключения к Интернету — а с жёсткого
диска они никуда не пропадут (если помнить о бэкапах).
</p>

<p>
Тогда же я задумался о том, как бы организовать свои статьи для блога так,
чтобы:
</p>
<ol class="org-ol">
<li>Тексты постов были не сильно привязаны к генератору статических сайтов и я
мог без особой боли сменить один генератор на другой, если разработчики
Jekyll вдруг решат дискриминировать людей по гражданству или по месту
жительства (<a href="https://en.wikipedia.org/wiki/Discrimination_based_on_nationality">discrimination based on nationality</a>).</li>
<li>Блог как можно меньше зависел от чужой инфраструктуры. Единственная
зависимость, от которой я пока что не могу уйти — это зависимость от
регистратора доменных имён (остаётся только избегать регистраторов,
замеченных в дискриминации, а также тех, что работают в моей местной
юрисдикции). В качестве хостинга для статического сайта подойдёт же любая
микроволновка в правильном месте — в таком, где не занимаются разрушением
связности глобальной сети.</li>
<li>Можно было редактировать посты удобным мне методом — т.е. в Emacs, при
помощи Org Mode. А не с Markdown или же вообще в WYSIWYG веб-редакторе.</li>
<li>Я мог сам выбрать для себя структуру каталогов с исходниками статей, а не
пользоваться той, что навязана разработчиками генератора статических
сайтов.</li>
</ol>

<p>
Если п. 2 нельзя решить, написав немного кода на Emacs Lisp, то остальные
проблемы вполне себе решаемы подобным образом.
</p>
</div>
</div>
<div id="outline-container-generator-first-version" class="outline-2">
<h2 id="generator-first-version">Первая версия генератора блога</h2>
<div class="outline-text-2" id="text-generator-first-version">
<p>
Достаточно быстро я сделал первую версию конвертера OrgMode⇒Jekyll на основе
bash, sed, pandoc и самописного Java-фильтра для pandoc — и использовал её
почти год.
</p>

<p>
Все посты, которые обрабатывал этот конвертер, были размещены в каталоге
<code>articles/</code>, каждый в своём подкаталоге:
</p>

<pre class="example">
rsync/blog (master) % tree --noreport articles
articles/
├── arms/
├── cycling/
│   ├── 2020-05-17-thanks-for-living/
│   │   ├── article-ru.org
│   │   ├── hate of car drivers.jpg
│   │   ├── kamennoostrovskii.jpg
│   │   ├── trollface.jpg
│   │   ├── truck.gif
│   │   └── ushakovski most.jpg
│   ├── 2021-04-08-vk-cyclist-types/
│   │   ├── article-ru.org
│   │   ├── hate of car drivers.jpg
│   │   ├── usual-seat-as-urbanist-thinks.jpg
│   │   └── usual-seat.jpg
├── it/
│   ├── 2020-09-09-thinkpad-x220-freebsd/
│   │   ├── article-en.org
│   │   ├── article-ru.org
│   │   └── freebsd_intel_glitches.jpg
│   ├── 2023-12-20-plain-text-accounting/
│   ├── 2024-01-02-life-in-console/
│   ├── 2024-07-07-thinkpad-x220-second-life/
│   ├── 2024-10-27-freebsd-bhyve-windows/
│   ├── 2024-11-09-emacs-plugin-jekyll-blog/
│   ├── draft-palm-tung-e2-archaeological/
│   │   ├── 20231223_141710.jpg
│   │   ├── 20231223_142550.jpg
│   │   ├── 20231230_200500.jpg
│   │   ├── 20231231_144949.jpg
│   │   ├── 20231231_205901.jpg
│   │   ├── 20240101_162620.jpg
│   │   ├── 20240101_215815.jpg
│   │   ├── 20240101_215908.jpg
│   │   ├── article-ru.org
├── leatherwork/
│   └── 2021-01-29-leatherwork-useful-links/
│       └── article-ru.org
└── photo/
</pre>

<p>
Эту древовидную структуру я использую до сих пор. Она позволяет иметь перед
глазами все, относящиеся к конкретному посту, файлы. К тому же, я могу открыть
org-файл с постом в Emacs и сразу же увижу его практически в том же виде, в
каком он попадёт в блог:
</p>


<div class="figure">
<p><img src="/assets/static/emacs-blog-post.png" alt="Post's draft, opened in Emacs" align="center" />
</p>
<p style="text-align: center"><i>Черновик поста, открытый в Emacs</i></p>
</div>

<p>
В каталоге с блогом я создал специальный <code>Makefile</code>, который запускал не менее
специальный bash-скрипт. Этот скрипт сканировал каталог <code>articles/</code> и помещал
найденные файлы с текстами постов в следующий конвейер:
</p>


<div class="figure">
<p><img src="/assets/static/first_generator.png" alt="Conveyor for Org2HTML transformation" align="center" />
</p>
<p style="text-align: center"><i>Конвейер, превращающий org-файлы в HTML-файлы</i></p>
</div>

<p>
Посмотреть на использовавшийся код можно вот <a href="https://github.com/eugeneandrienko/eugeneandrienko.github.io/blob/3b70ec4997a063fdd3c1bf4c23c3c9a5d78b78e3/README.org">в этом коммите</a>, в файле
<code>README.org</code>. Код для Java-фильтра для pandoc лежит <a href="https://codeberg.org/evgandr/pandoc_jekyll">в отдельном репозитории</a>.
</p>

<p>
Очевидно, что всё это было переусложнено. Гораздо удобнее было бы, если бы
итоговый HTML-файл генерировался напрямую из OrgMode, без всяких
дополнительных преобразований. Тем более, что в OrgMode уже есть функции для
экспорта файлов в различные форматы.
</p>

<p>
И тут в Mastodon мне попалась на глаза статья <a href="https://mastodon.social/@fabrik42">Christian Dewein</a>: <a href="https://christiandewein.com/publishing-with-jekyll-emacs-org-mode">Publishing on
the web with Jekyll, Emacs and Org-Mode</a>&#x2026;
</p>
</div>
</div>
<div id="outline-container-emacs-lisp-jekyll-gen" class="outline-2">
<h2 id="emacs-lisp-jekyll-gen">Генерация Jekyll-блога c помощью Emacs Lisp</h2>
<div class="outline-text-2" id="text-emacs-lisp-jekyll-gen">
<p>
Как оказалось, весь мой конвейер из <code>sed</code> + <code>awk</code> + <code>pandoc</code> + <code>Java-фильтр</code> можно
спокойно выкинуть и заменить на вызов функции
<code>org-publish-project</code><sup><a id="fnr.org-publish-project" class="footref" href="#fn.org-publish-project" role="doc-backlink">5</a></sup>. Org Mode сам может экспортировать
org-файлы в HTML-файлы, сразу готовые для использования в Jekyll, без
дополнительной конвертации Markdown⇒HTML.
</p>

<p>
У меня уже был некоторый опыт программирования на Lisp, а точнее на
Clojure<sup><a id="fnr.clojure" class="footref" href="#fn.clojure" role="doc-backlink">6</a></sup>, поэтому я спокойно взялся писать свой плагин, по мотивам
кода от <a href="https://mastodon.social/@fabrik42">Christian Dewein</a>. Программировать на Emacs Lisp в Emacs одно
удовольствие — тут тебе и встроенная справка по языку через <code>C-h f</code>, <code>C-h v</code> и так
далее. И встроенный REPL (<code>M-x ielm</code>). И встроенный отладчик. Можно спокойно
играться с <a href="https://www.s-expressions.org/home">S-expressions</a>, сразу же проверяя как исполняются куски кода в REPL
и строить программу «по кирпичикам».
</p>
</div>
<div id="outline-container-convert-org2html" class="outline-3">
<h3 id="convert-org2html">Преобразование org-файлов в HTML</h3>
<div class="outline-text-3" id="text-convert-org2html">
<p>
Вышеупомянутая функция <code>org-publish-project</code> умеет брать файлы из одного
каталога, конвертировать их в нужный формат и сохранять в другой каталог. Что,
куда и как экспортировать настраивается внутри специального списка с именем
<code>org-publish-project-alist</code>, каждый элемент которого — отдельный параметр для
тонкой настройки процесса экспорта.
</p>

<p>
Код, который умеет брать org-файлы каталога <code>~/test</code>, перегонять их в HTML для
Jekyll и сохранять в <code>~/results</code>, будет выглядеть примерно вот так:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">let</span> ((org-publish-project-alist `((<span style="color: #2aa198;">"org-jekyll-org"</span>
                                    <span style="color: #657b83; font-weight: bold;">:base-directory</span> <span style="color: #2aa198;">"~/test"</span>
                                    <span style="color: #657b83; font-weight: bold;">:base-extension</span> <span style="color: #2aa198;">"org"</span>
                                    <span style="color: #657b83; font-weight: bold;">:publishing-directory</span> <span style="color: #2aa198;">"~/results"</span>
                                    <span style="color: #657b83; font-weight: bold;">:publishing-function</span> org-html-publish-to-html
                                    <span style="color: #657b83; font-weight: bold;">:html-extension</span> <span style="color: #2aa198;">"html"</span>
                                    <span style="color: #657b83; font-weight: bold;">:headline-levels</span> 5
                                    <span style="color: #657b83; font-weight: bold;">:html-toplevel-hlevel</span> 2
                                    <span style="color: #657b83; font-weight: bold;">:html-html5-fancy</span> t
                                    <span style="color: #657b83; font-weight: bold;">:html-table-attributes</span> (<span style="color: #657b83; font-weight: bold;">:border</span> <span style="color: #2aa198;">"2"</span> <span style="color: #657b83; font-weight: bold;">:cellspacing</span> <span style="color: #2aa198;">"0"</span> <span style="color: #657b83; font-weight: bold;">:cellpadding</span> <span style="color: #2aa198;">"6"</span> <span style="color: #657b83; font-weight: bold;">:frame</span> <span style="color: #2aa198;">"void"</span>)
                                    <span style="color: #657b83; font-weight: bold;">:section-numbers</span> nil
                                    <span style="color: #657b83; font-weight: bold;">:html-inline-images</span> t
                                    <span style="color: #657b83; font-weight: bold;">:htmlized-source</span> t
                                    <span style="color: #657b83; font-weight: bold;">:with-toc</span> nil
                                    <span style="color: #657b83; font-weight: bold;">:with-sub-superscript</span> nil
                                    <span style="color: #657b83; font-weight: bold;">:body-only</span> t
                                    <span style="color: #657b83; font-weight: bold;">:recursive</span> t))))
  (org-publish-project <span style="color: #2aa198;">"org-jekyll-org"</span> t nil))
</pre>
</div>

<p>
Из важных параметров здесь есть:
</p>
<ul class="org-ul">
<li><code>:base-directory</code> — путь к каталогу, откуда будут браться файлы для экспорта.</li>
<li><code>:base-extension</code> — какие расширения должны быть у файлов для экспорта.</li>
<li><code>:publishing-directory</code> — путь к каталогу, куда будут помещаться HTML-файлы
после экспорта.</li>
</ul>

<p>
Остальные параметры содержат разные тонкие настройки для конвертации в HTML, с
которыми мои посты в блоге выглядят так, как я хочу.
</p>

<p>
Неплохо бы иметь возможность настраивать имена каталогов, чтобы не копаться
каждый раз в исходном коде, меняя строковые константы. Для этого в Emacs Lisp
есть функция <code>defcustom</code><sup><a id="fnr.defcustom" class="footref" href="#fn.defcustom" role="doc-backlink">7</a></sup>. Она позволяет описать настройки для
плагина так, чтобы их можно было менять общепринятыми способами — через <code>M-x
customize</code> или через секцию <code>:custom</code> в <code>use-package</code>:
</p>


<div class="figure">
<p><img src="/assets/static/customize.png" alt="Emacs M-x customize" align="center" />
</p>
<p style="text-align: center"><i>Интерфейс M-x customize</i></p>
</div>

<p>
Пути к нужным каталогам я описал через <code>defcustom</code> следующим образом:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defgroup</span> <span style="color: #b58900;">org-jekyll</span> ()
  <span style="color: #2aa198;">"Emacs mode to write on OrgMode for Jekyll blog."</span>
  <span style="color: #657b83; font-weight: bold;">:group</span> 'local
  <span style="color: #657b83; font-weight: bold;">:prefix</span> <span style="color: #2aa198;">"org-jekyll-"</span>
  <span style="color: #657b83; font-weight: bold;">:link</span> '(url-link <span style="color: #657b83; font-weight: bold;">:tag</span> <span style="color: #2aa198;">"Source code"</span> <span style="color: #2aa198;">"https://github.com/eugeneandrienko/eugeneandrienko.github.io"</span>))

(<span style="color: #859900; font-weight: bold;">defgroup</span> <span style="color: #b58900;">org-jekyll-paths</span> nil
  <span style="color: #2aa198;">"Paths for emacs mode to write on OrgMode for Jekyll blog."</span>
  <span style="color: #657b83; font-weight: bold;">:group</span> 'org-jekyll
  <span style="color: #657b83; font-weight: bold;">:prefix</span> <span style="color: #2aa198;">"org-jekyll-paths-"</span>)

(<span style="color: #859900; font-weight: bold;">defcustom</span> <span style="color: #268bd2;">org-jekyll-paths-base-path</span>
  <span style="color: #2aa198;">"~/rsync/blog"</span>
  <span style="color: #2aa198;">"Path to the base directory of my blog."</span>
  <span style="color: #657b83; font-weight: bold;">:type</span> 'directory
  <span style="color: #657b83; font-weight: bold;">:group</span> 'org-jekyll-paths)

(<span style="color: #859900; font-weight: bold;">defcustom</span> <span style="color: #268bd2;">org-jekyll-paths-articles-path</span>
  (concat org-jekyll-paths-base-path <span style="color: #2aa198;">"/articles"</span>)
  <span style="color: #2aa198;">"Path to directory with original articles in Org format."</span>
  <span style="color: #657b83; font-weight: bold;">:type</span> 'directory
  <span style="color: #657b83; font-weight: bold;">:group</span> 'org-jekyll-paths)
</pre>
</div>

<p>
Здесь, первая S-expression описывает новый пункт меню в настройках Emacs,
вторая создаёт внутри него подпункт, внутри которого будет две настройки — с
путём к каталогу со всеми файлами для блога и с путём к каталогу со статьями.
</p>

<p>
В итоге, параметры в вышеприведённом вызове <code>org-publish-project</code> можно
переделать вот так:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">let</span> ((org-publish-project-alist `((<span style="color: #2aa198;">"org-jekyll-org"</span>
                                    <span style="color: #657b83; font-weight: bold;">:base-directory</span> ,org-jekyll-paths-articles-path
                                    <span style="color: #657b83; font-weight: bold;">:base-extension</span> <span style="color: #2aa198;">"org"</span>
                                    <span style="color: #657b83; font-weight: bold;">:publishing-directory</span> ,(concat org-jekyll-paths-base-path <span style="color: #2aa198;">"/_posts"</span>)
                                    <span style="color: #657b83; font-weight: bold;">:publishing-function</span> org-html-publish-to-html
</pre>
</div>

<p>
Здесь, прямо внутри определения списка с настройками есть исполняемый код,
который формирует пути к нужным каталогам. Чтобы всё это работало — приходится
описывать список немного иначе, чем через привычную нотацию <code>'(1 2 3)</code>.
</p>

<p>
С одной стороны нам не нужно, чтобы все S-expressions внутри этого списка
исполнялись — ведь <code>"org-jekyll-org"</code> не имя функции, а имя OrgMode проекта для
публикации. Для этого можно было бы использовать привычный синтаксис вида
<code>'("a" "b" "c")</code>.
</p>

<pre class="example">
&gt; ("a" "b" "c")
*** Eval error ***  Invalid function: "a"
&gt; '("a" "b" "c")
("a" "b" "c")
</pre>

<p>
Но с другой стороны нам нужно, чтобы отдельные S-expressions — тот же <code>concat</code> —
всё же исполнялись. В нижеприведённом примере видно, что этого не происходит —
конструкция <code>(concat "b" "2")</code> воспринимается просто как отдельный элемент
списка и вместо неё не подставляется строка <code>"b2"</code>:
</p>

<pre class="example">
&gt; '("a" (concat "b" "2") "c")

("a"
 (concat "b" "2")
 "c")
</pre>

<p>
Чтобы определить список, в котором отдельные элементы являются исполняемым
кодом, нужно использовать обратную кавычку, вместо
обычной<sup><a id="fnr.quoting" class="footref" href="#fn.quoting" role="doc-backlink">8</a></sup>. Элементы, которые будут исполняемыми S-expressions,
отмечаются при помощи запятой:
</p>

<pre class="example">
&gt; `("a" ,(concat "b" "2") "c")
("a" "b2" "c")
</pre>

<p>
В идеальном случае вышеприведённого вызова <code>org-publish-project</code> достаточно для
превращения org-файлов в HTML. Но мой случай не идеальный — у меня org-файлы
не лежат все скопом в одном каталоге, а каждый в своём отдельном
подкаталоге!
</p>

<p>
Значит, перед вызовом <code>org-publish-project</code> нужно вызывать свою самописную
функцию, которая скопирует org-файлы с постами в промежуточный каталог, откуда
их и возьмёт <code>org-publish-project</code>. Для вызова пользовательской функции перед
началом публикации есть параметр <code>:preparation-function</code>, с которым наш код
начинает выглядеть вот так:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">let</span> ((org-publish-project-alist `((<span style="color: #2aa198;">"org-jekyll-org"</span>
                                    <span style="color: #657b83; font-weight: bold;">:base-directory</span> ,(concat org-jekyll-paths-base-path <span style="color: #2aa198;">"/_articles"</span>)
                                    <span style="color: #657b83; font-weight: bold;">:base-extension</span> <span style="color: #2aa198;">"org"</span>
                                    <span style="color: #657b83; font-weight: bold;">:publishing-directory</span> ,(concat org-jekyll-paths-base-path <span style="color: #2aa198;">"/_posts"</span>)
                                    <span style="color: #657b83; font-weight: bold;">:preparation-function</span> org-jekyll--prepare-articles
</pre>
</div>

<p>
Как видно, тут в качестве каталога с org-файлами для <code>org-publish-project</code> уже
указан промежуточный каталог <code>_articles/</code>.
</p>
</div>
</div>
<div id="outline-container-copy-2-tmp-catalog" class="outline-3">
<h3 id="copy-2-tmp-catalog">Копирование файлов в промежуточный каталог</h3>
<div class="outline-text-3" id="text-copy-2-tmp-catalog">
<p>
Сначала нужно получить список org-файлов с постами, которые есть в каталоге
<code>articles/</code>. Его нам может вернуть функция
<code>directory-files-recursively</code><sup><a id="fnr.directory-files-recursively" class="footref" href="#fn.directory-files-recursively" role="doc-backlink">9</a></sup>, если ей передать
путь к каталогу и регулярку, которой будут выбираться только org-файлы:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(directory-files-recursively org-jekyll-paths-articles-path <span style="color: #2aa198;">"\\.org$"</span> nil nil nil)

(<span style="color: #2aa198;">"~/rsync/blog/articles/cycling/2020-05-17-thanks-for-living/article-ru.org"</span>
 <span style="color: #2aa198;">"~/rsync/blog/articles/cycling/2021-04-08-vk-cyclist-types/article-ru.org"</span>
 <span style="color: #2aa198;">"~/rsync/blog/articles/cycling/2021-04-12-balticstar-north-open-2021/article-ru.org"</span>
 <span style="color: #2aa198;">"~/rsync/blog/articles/cycling/2021-05-17-insled-open/article-ru.org"</span>
 <span style="color: #2aa198;">"~/rsync/blog/articles/cycling/draft-osmand-howto/article-ru.org"</span>
 <span style="color: #2aa198;">"~/rsync/blog/articles/cycling/draft-qmapshack-howto/article-ru.org"</span>
 ...
 <span style="color: #2aa198;">"~/rsync/blog/articles/_post_template.org"</span>)
</pre>
</div>

<p>
Как видно, в результате есть и черновики, которые не нужно экспортировать в
HTML, и файл с шаблоном для новых постов. Эти лишние файлы можно отфильтровать
при помощи <code>seq-filter</code><sup><a id="fnr.seq-filter" class="footref" href="#fn.seq-filter" role="doc-backlink">10</a></sup> — он умеет убирать из списка (передаётся
вторым параметром) элементы не проходящие проверку в предикате из первого
параметра:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(seq-filter (<span style="color: #859900; font-weight: bold;">lambda</span> (path)
              (<span style="color: #859900; font-weight: bold;">and</span>
               (not (string-match org-jekyll-exclude-regex path))
               (not (string-match <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">draft-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">hidden-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">"</span> path))))
            (directory-files-recursively org-jekyll-paths-articles-path <span style="color: #2aa198;">"\\.org$"</span> nil nil nil))
</pre>
</div>

<p>
Предикат — обычная лямбда-функция, которая проверяет, что путь из списка не
является путём к файлу с шаблоном <code>_post_template.org</code> и не содержит в себе
каталогов, начинающихся с <code>draft</code> или <code>hidden</code>.
</p>

<p>
Здесь <code>org-jekyll-exclude-regex</code> — ещё одна переменная, с регулярным выражением,
по которому будут отбрасываться неподходящие пути к org-файлам:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defcustom</span> <span style="color: #268bd2;">org-jekyll-exclude-regex</span>
  <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">_post_template\\.org</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">\\.project</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">"</span>
  <span style="color: #2aa198;">"Regex to exclude unwanted files."</span>
  <span style="color: #657b83; font-weight: bold;">:type</span> 'regexp
  <span style="color: #657b83; font-weight: bold;">:group</span> 'org-jekyll)
</pre>
</div>

<p>
Теперь, когда у нас есть <i>правильный</i> список путей к файлам, надо каждый его
элемент передать в функцию для копирования файлов. Это делается при помощи
<code>mapc</code><sup><a id="fnr.mapc" class="footref" href="#fn.mapc" role="doc-backlink">11</a></sup>, которая применяет лямбда-функцию из первого параметра к каждому
элементу списка, переданному вторым параметром:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (article)
        (
         <span style="color: #93a1a1;">;; </span><span style="color: #93a1a1;">copy file in `</span><span style="color: #268bd2; font-weight: bold;">article</span><span style="color: #93a1a1;">' path here</span>
         )
        (seq-filter (<span style="color: #859900; font-weight: bold;">lambda</span> (path)
              (<span style="color: #859900; font-weight: bold;">and</span>
               (not (string-match org-jekyll-exclude-regex path))
               (not (string-match <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">draft-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">hidden-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">"</span> path))))
                    (directory-files-recursively org-jekyll-paths-articles-path <span style="color: #2aa198;">"\\.org$"</span> nil nil nil))
</pre>
</div>

<p>
Элементы пути из переменной <code>article</code>: дата, URL и код языка<sup><a id="fnr.lang_code" class="footref" href="#fn.lang_code" role="doc-backlink">12</a></sup> — я
использую, для того чтобы получить уникальное имя файла для промежуточного
каталога. Чтобы вытащить всё что надо из исходного пути к файлу — есть
регулярки с capturing groups. В Emacs для этого можно использовать функции
<code>string-match</code> и <code>match-string</code><sup><a id="fnr.regex-search" class="footref" href="#fn.regex-search" role="doc-backlink">13</a></sup>:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(string-match
 (concat org-jekyll-paths-articles-path
         <span style="color: #2aa198;">"/</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">\\w+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">/</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">[0-9-]+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">[[:alnum:]-]+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">/article-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">[[:lower:]]\\{</span><span style="color: #268bd2;">2\\</span><span style="color: #2aa198;">}</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">\\.org$"</span>)
 <span style="color: #2aa198;">"~/rsync/blog/articles/photo/2024-09-01-summer-photos-2024/article-en.org"</span>)
0 (#o0, #x0, ?\C-@)

(match-string 1 <span style="color: #2aa198;">"~/rsync/blog/articles/photo/2024-09-01-summer-photos-2024/article-en.org"</span>)
<span style="color: #2aa198;">"photo"</span>

(match-string 2 <span style="color: #2aa198;">"~/rsync/blog/articles/photo/2024-09-01-summer-photos-2024/article-en.org"</span>)
<span style="color: #2aa198;">"2024-09-01"</span>

(match-string 3 <span style="color: #2aa198;">"~/rsync/blog/articles/photo/2024-09-01-summer-photos-2024/article-en.org"</span>)
<span style="color: #2aa198;">"summer-photos-2024"</span>

(match-string 4 <span style="color: #2aa198;">"~/rsync/blog/articles/photo/2024-09-01-summer-photos-2024/article-en.org"</span>)
<span style="color: #2aa198;">"en"</span>
</pre>
</div>

<p>
В коде лямбды я заворачиваю всё это в <code>let*</code><sup><a id="fnr.let-star" class="footref" href="#fn.let-star" role="doc-backlink">14</a></sup>, чтобы впоследствии
просто обращаться к соответствующим переменным:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">lambda</span> (article)
          (<span style="color: #859900; font-weight: bold;">progn</span>
            (string-match
             (concat org-jekyll-paths-articles-path
                     <span style="color: #2aa198;">"/</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">\\w+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">/</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">[0-9-]+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">[[:alnum:]-]+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">/article-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">[[:lower:]]\\{</span><span style="color: #268bd2;">2\\</span><span style="color: #2aa198;">}</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">\\.org$"</span>)
             article)
            (<span style="color: #859900; font-weight: bold;">let*</span>
                ((article-category (match-string 1 article))
                 (article-date (match-string 2 article))
                 (article-slug (match-string 3 article))
                 (article-lang (match-string 4 article)))
              (
                                        <span style="color: #93a1a1;">;</span><span style="color: #93a1a1;">copy-file-here</span>
               )))
</pre>
</div>

<p>
Для удобства, добавим сюда ещё пару переменных:
</p>
<ol class="org-ol">
<li><p>
Переменную с именем промежуточного каталога: путь к <code>_articles/</code> +
<code>article-lang</code>. Путь к каталогу <code>_articles/</code> можно вытащить из настроек проекта
<code>"org-jekyll-org"</code> — список с этими настройками передаётся в виде
единственного параметра в функцию <code>org-jekyll--prepare-articles</code> и по имени
параметра (<code>:base-directory</code>) можно получить нужное значение<sup><a id="fnr.plist-get" class="footref" href="#fn.plist-get" role="doc-backlink">15</a></sup>:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(article-new-catalog (concat
                      (plist-get property-list '<span style="color: #657b83; font-weight: bold;">:base-directory</span>)
                      <span style="color: #2aa198;">"/"</span>
                      article-lang))
</pre>
</div></li>
<li><p>
Переменную с уникальным путём к файлу со статьёй в промежуточном каталоге:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(article-processed (concat article-new-catalog <span style="color: #2aa198;">"/"</span> article-date <span style="color: #2aa198;">"-"</span> article-slug <span style="color: #2aa198;">".org"</span>))
</pre>
</div></li>
</ol>

<p>
В итоге, если к нам в переменной <code>article</code> пришёл путь
<code>~/rsync/blog/articles/photo/2024-09-01-summer-photos-2024/article-en.org</code>, то в
переменной <code>article-processed</code> будет новый путь:
<code>~/rsync/blog/_articles/en/2024-09-01-summer-photos-2024.org</code>.
</p>

<p>
Теперь, создание нового каталога (на всякий случай, если его нет) и
копирование файла делается вызовом пары функций в теле <code>let*</code>:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(make-directory article-new-catalog t)
(copy-file article article-processed t t t t)
</pre>
</div>

<p>
Итоговая функция <code>org-jekyll--prepare-articles</code> выглядит так:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll--prepare-articles</span> (property-list)
  <span style="color: #2aa198;">"Copy articles to `</span><span style="color: #268bd2; font-weight: bold;">_articles/</span><span style="color: #2aa198;">' catalog before publishing. Rename</span>
<span style="color: #2aa198;">article file from `</span><span style="color: #268bd2; font-weight: bold;">article-LANG.org</span><span style="color: #2aa198;">' to</span>
<span style="color: #2aa198;">`</span><span style="color: #268bd2; font-weight: bold;">YYYY-MM-DD-short-url.org</span><span style="color: #2aa198;">'.</span>

<span style="color: #2aa198;">PROPERTY-LIST is a list of properties from</span>
<span style="color: #2aa198;">`</span><span style="color: #268bd2; font-weight: bold;">org-publish-project-alist</span><span style="color: #2aa198;">'."</span>
  (mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (article)
          (<span style="color: #859900; font-weight: bold;">progn</span>
            (string-match
             (concat org-jekyll-paths-articles-path
                     <span style="color: #2aa198;">"/</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">\\w+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">/</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">[0-9-]+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">[[:alnum:]-]+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">/article-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">[[:lower:]]\\{</span><span style="color: #268bd2;">2\\</span><span style="color: #2aa198;">}</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">\\.org$"</span>)
             article)
            (<span style="color: #859900; font-weight: bold;">let*</span>
                ((article-category (match-string 1 article))
                 (article-date (match-string 2 article))
                 (article-slug (match-string 3 article))
                 (article-lang (match-string 4 article))
                 (article-new-catalog (concat
                                       (plist-get property-list '<span style="color: #657b83; font-weight: bold;">:base-directory</span>)
                                       <span style="color: #2aa198;">"/"</span>
                                       article-lang))
                 (article-processed (concat article-new-catalog <span style="color: #2aa198;">"/"</span> article-date <span style="color: #2aa198;">"-"</span> article-slug <span style="color: #2aa198;">".org"</span>)))
              (make-directory article-new-catalog t)
              (copy-file article article-processed t t t t))))
        (seq-filter (<span style="color: #859900; font-weight: bold;">lambda</span> (path)
                      (<span style="color: #859900; font-weight: bold;">and</span>
                       (not (string-match org-jekyll-exclude-regex path))
                       (not (string-match <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">draft-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">hidden-</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">"</span> path))))
                    (directory-files-recursively org-jekyll-paths-articles-path <span style="color: #2aa198;">"\\.org$"</span> nil nil nil))))
</pre>
</div>

<p>
Эта функция отлично работает в связке с <code>org-publish-project</code>. Но есть один
нюанс — в итоговом HTML файле оказываются битые ссылки на картинки к
посту. Поскольку в исходном org-файле указаны пути к картинкам относительно
каталога с этим файлом — эти пути попадают в таком же виде в HTML.
</p>

<p>
Но в Jekyll такие статические файлы лежат по пути <code>/assets/static</code>. Решение тут
простое — после вызова <code>copy-file</code> поменять пути в скопированном временном
файле. Для этого я написал просто ещё одну функцию:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll--prepare-article</span> (article)
  <span style="color: #2aa198;">"Prepare article's text for Jekyll.</span>

<span style="color: #2aa198;">Modify OrgMode file before publish it. ARTICLE is a path to</span>
<span style="color: #2aa198;">OrgMode file with article. Files, stored in `</span><span style="color: #268bd2; font-weight: bold;">_articles/</span><span style="color: #2aa198;">' will be</span>
<span style="color: #2aa198;">modified, not original articles from `</span><span style="color: #268bd2; font-weight: bold;">org-jekyll-paths-articles-path</span><span style="color: #2aa198;">'</span>
<span style="color: #2aa198;">path.</span>

<span style="color: #2aa198;">ARTICLE is a path to intermediate org-file with article text"</span>
  (<span style="color: #859900; font-weight: bold;">with-temp-buffer</span>
    (insert-file-contents article)
    (goto-char (point-min))
    (<span style="color: #859900; font-weight: bold;">while</span> (search-forward <span style="color: #2aa198;">"[&#8206;file:"</span> nil t)
      (replace-match <span style="color: #2aa198;">"[&#8207;/assets/static/"</span> t t))
    (write-file article)))
</pre>
</div>

<p>
Всё, что она делает — ищет в org-файле по пути из переменной <code>article</code> включения
статических файлов вида <code>[f‎ile:somefile.ext]</code> и меняет их на
<code>[f‎ile://assets/static/somefile.ext]</code>.
</p>
</div>
</div>
<div id="outline-container-html-file-editing" class="outline-3">
<h3 id="html-file-editing">Редактирование HTML файлов</h3>
<div class="outline-text-3" id="text-html-file-editing">
<p>
К сожалению, <code>org-publish-project</code> вставляет в HTML-файл вещи, которые я там не
хочу видеть:
</p>
<ul class="org-ul">
<li>Рандомно сгенерированные ID из HTML-тэгов</li>
<li>Нумерацию изображений</li>
<li>Тэг <code>:TOC_2_blog:</code> после заголовка «TOC». Этот тег нужен, чтобы расширение
<a href="https://github.com/snosov1/toc-org/">toc-org</a> автоматически генерировало<sup><a id="fnr.toc-org" class="footref" href="#fn.toc-org" role="doc-backlink">16</a></sup> содержание для поста при
каждом сохранении файла.</li>
<li>Лишний заголовок для примечаний, причём не на языке поста.</li>
</ul>

<p>
Решение этой проблемы примерно такое же, как и в случае с правкой путей к
статическим файлам — нужна ещё одна функция, которая будет удалять всё лишнее
из HTML при помощи регулярок. В настройках <code>org-publish-project</code> можно указать
эту функцию в параметре <code>:completion-function</code>, чтобы она вызывалась после
экспорта в HTML.
</p>

<p>
Сама функция достаточно простая. Сначала получаем путь к каталогу с HTML
файлами из настроек <code>org-publish-project</code> и получаем список путей к этим файлам,
который передаётся в лямбду:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll--complete-articles</span> (property-list)
  <span style="color: #2aa198;">"Change published html-files via regular expressions.</span>

<span style="color: #2aa198;">Fix links to attached files. Remove \"Footnotes:\" section from</span>
<span style="color: #2aa198;">generated file. Remove autogenerated Org ids from html tags.</span>

<span style="color: #2aa198;">PROPERTY-LIST is a list of properties from</span>
<span style="color: #2aa198;">`</span><span style="color: #268bd2; font-weight: bold;">org-publish-project-alist</span><span style="color: #2aa198;">'."</span>
  (<span style="color: #859900; font-weight: bold;">let*</span>
      ((publishing-directory (plist-get property-list '<span style="color: #657b83; font-weight: bold;">:publishing-directory</span>)))
    (mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (html)
            <span style="color: #93a1a1;">; </span><span style="color: #93a1a1;">process `</span><span style="color: #268bd2; font-weight: bold;">html</span><span style="color: #93a1a1;">' file</span>
            )
          (directory-files-recursively publishing-directory <span style="color: #2aa198;">"\\.html$"</span> nil nil nil))))
</pre>
</div>

<p>
Внутри лямбды есть ещё один вызов <code>mapc</code>, который работает со списком регулярок:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (x)
        (<span style="color: #859900; font-weight: bold;">progn</span>
          (goto-char (point-min))
          (<span style="color: #859900; font-weight: bold;">while</span> (re-search-forward (car x) nil t)
            (replace-match (cdr x) t nil))))
      '((<span style="color: #2aa198;">"/"</span> . <span style="color: #2aa198;">"/"</span>)
        (<span style="color: #2aa198;">"&lt;p&gt;&lt;span class=\"figure-number\"&gt;[[:alnum:] :]+&lt;/span&gt;</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">.+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">&lt;/p&gt;"</span> . <span style="color: #2aa198;">"&lt;p style=\"text-align: center\"&gt;&lt;i&gt;\\1&lt;/i&gt;&lt;/p&gt;"</span>)
        (<span style="color: #2aa198;">"&lt;h2 class=\"footnotes\"&gt;Footnotes: &lt;/h2&gt;"</span> . <span style="color: #2aa198;">""</span>)
        (<span style="color: #2aa198;">" id=\"org[[:xdigit:]]\\{</span><span style="color: #268bd2;">7\\</span><span style="color: #2aa198;">}\""</span> . <span style="color: #2aa198;">""</span>)
        (<span style="color: #2aa198;">" id=\"outline-container-org[[:xdigit:]]\\{</span><span style="color: #268bd2;">7\\</span><span style="color: #2aa198;">}\""</span> . <span style="color: #2aa198;">""</span>)
        (<span style="color: #2aa198;">" id=\"text-org[[:xdigit:]]\\{</span><span style="color: #268bd2;">7\\</span><span style="color: #2aa198;">}\""</span> . <span style="color: #2aa198;">""</span>)
        (<span style="color: #2aa198;">"&lt;span class=\"TOC_2_blog\"&gt;TOC_2_blog&lt;/span&gt;"</span> . <span style="color: #2aa198;">""</span>)))
</pre>
</div>

<p>
Здесь каждый элемент списка — ещё один список из двух элементов. Первый
элемент — регулярка, по которой ищется текст для замены. Второй элемент —
текст, на который надо заменить найденное. Обращения к этим элементам в коде
происходят при помощи <code>(car x)</code> и <code>(cdr x)</code> соответственно. Замена текста
производится стандартными для Emacs функциями для работы с регулярными
выражениями через временные буферы.
</p>

<p>
Итоговый код <code>org-jekyll--complete-articles</code> выглядит следующим образом:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll--complete-articles</span> (property-list)
  <span style="color: #2aa198;">"Change published html-files via regular expressions.</span>

<span style="color: #2aa198;">Fix links to attached files. Remove \"Footnotes:\" section from</span>
<span style="color: #2aa198;">generated file. Remove autogenerated Org ids from html tags.</span>

<span style="color: #2aa198;">PROPERTY-LIST is a list of properties from</span>
<span style="color: #2aa198;">`</span><span style="color: #268bd2; font-weight: bold;">org-publish-project-alist</span><span style="color: #2aa198;">'."</span>
  (<span style="color: #859900; font-weight: bold;">let*</span>
      ((publishing-directory (plist-get property-list '<span style="color: #657b83; font-weight: bold;">:publishing-directory</span>)))
    (mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (html)
            (<span style="color: #859900; font-weight: bold;">with-temp-buffer</span>
              (insert-file-contents html)
              (mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (x)
                      (<span style="color: #859900; font-weight: bold;">progn</span>
                        (goto-char (point-min))
                        (<span style="color: #859900; font-weight: bold;">while</span> (re-search-forward (car x) nil t)
                          (replace-match (cdr x) t nil))))
                    '((<span style="color: #2aa198;">"/"</span> . <span style="color: #2aa198;">"/"</span>)
                      (<span style="color: #2aa198;">"&lt;p&gt;&lt;span class=\"figure-number\"&gt;[[:alnum:] :]+&lt;/span&gt;</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">.+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">&lt;/p&gt;"</span> . <span style="color: #2aa198;">"&lt;p style=\"text-align: center\"&gt;&lt;i&gt;\\1&lt;/i&gt;&lt;/p&gt;"</span>)
                      (<span style="color: #2aa198;">"&lt;h2 class=\"footnotes\"&gt;Footnotes: &lt;/h2&gt;"</span> . <span style="color: #2aa198;">""</span>)
                      (<span style="color: #2aa198;">" id=\"org[[:xdigit:]]\\{</span><span style="color: #268bd2;">7\\</span><span style="color: #2aa198;">}\""</span> . <span style="color: #2aa198;">""</span>)
                      (<span style="color: #2aa198;">" id=\"outline-container-org[[:xdigit:]]\\{</span><span style="color: #268bd2;">7\\</span><span style="color: #2aa198;">}\""</span> . <span style="color: #2aa198;">""</span>)
                      (<span style="color: #2aa198;">" id=\"text-org[[:xdigit:]]\\{</span><span style="color: #268bd2;">7\\</span><span style="color: #2aa198;">}\""</span> . <span style="color: #2aa198;">""</span>)
                      (<span style="color: #2aa198;">"&lt;span class=\"TOC_2_blog\"&gt;TOC_2_blog&lt;/span&gt;"</span> . <span style="color: #2aa198;">""</span>)))
              (write-file html)))
          (directory-files-recursively publishing-directory <span style="color: #2aa198;">"\\.html$"</span> nil nil nil))))
</pre>
</div>
</div>
</div>
<div id="outline-container-static-files-export" class="outline-3">
<h3 id="static-files-export">Экспорт статических файлов</h3>
<div class="outline-text-3" id="text-static-files-export">
<p>
Понятное дело, что одних лишь HTML-файлов для блога недостаточно. Нужны ещё
изображения и прочие файлы.
</p>

<p>
Их можно скопировать при помощи всё той же <code>org-publish-project</code>, причём
настройки для этого будут гораздо проще:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">let</span> ((org-publish-project-alist `((<span style="color: #2aa198;">"org-jekyll-static"</span>
                                    <span style="color: #657b83; font-weight: bold;">:base-directory</span> ,(concat org-jekyll-paths-base-path <span style="color: #2aa198;">"/_static"</span>)
                                    <span style="color: #657b83; font-weight: bold;">:base-extension</span> <span style="color: #2aa198;">"jpg</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">JPG</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">jpeg</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">png</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">gif</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">webm</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">webp</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">gpx</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">tar.bz2</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">uxf"</span>
                                    <span style="color: #657b83; font-weight: bold;">:publishing-directory</span> ,(concat org-jekyll-paths-base-path <span style="color: #2aa198;">"/assets/static"</span>)
                                    <span style="color: #657b83; font-weight: bold;">:publishing-function</span> org-publish-attachment
                                    <span style="color: #657b83; font-weight: bold;">:preparation-function</span> org-jekyll--prepare-static
                                    <span style="color: #657b83; font-weight: bold;">:exclude</span> ,org-jekyll-exclude-regex
                                    <span style="color: #657b83; font-weight: bold;">:recursive</span> t)))))
</pre>
</div>

<p>
Здесь, в <code>:base-extension</code> указаны расширения для файлов, которые будут
экспортированы в каталог <code>:publishing-directory</code>.
</p>

<p>
Экспорт HTML файлов и копирование статических файлов можно объединить в одном
«проекте», чтобы выполнять все нужные действия с файлами за один вызов
функции:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">let</span> ((org-publish-project-alist `((<span style="color: #2aa198;">"org-jekyll-org"</span>
                                    ...)
                                   (<span style="color: #2aa198;">"org-jekyll-static"</span>
                                    ...)
                                   (<span style="color: #2aa198;">"org-jekyll"</span> <span style="color: #657b83; font-weight: bold;">:components</span> (<span style="color: #2aa198;">"org-jekyll-org"</span> <span style="color: #2aa198;">"org-jekyll-static"</span>)))))
  (org-publish-project <span style="color: #2aa198;">"org-jekyll"</span> t nil))
</pre>
</div>

<p>
Как видно из кода, при копировании статических файлов используется ещё одна
<code>:preparation-function</code> — <code>org-jekyll--prepare-static</code>. Она делает примерно то же,
что и <code>org-jekyll--prepare-articles</code> — копирует статические файлы из множества
подкаталогов с постами для блога в один временный каталог, откуда их сможет
взять <code>org-jekyll-project</code>. Работает эта функция примерно так же —
<code>directory-files-recursively</code> пробегается по каталогу <code>/articles</code> и копирует в
каталог <code>/_static</code> все файлы, кроме org-файлов с текстами статей:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll--prepare-static</span> (property-list)
  <span style="color: #2aa198;">"Copy static files to `</span><span style="color: #268bd2; font-weight: bold;">/_static</span><span style="color: #2aa198;">' directory.</span>

<span style="color: #2aa198;">PROPERTY-LIST is a list of properties from</span>
<span style="color: #2aa198;">`</span><span style="color: #268bd2; font-weight: bold;">org-publish-project-alist</span><span style="color: #2aa198;">'."</span>
  (<span style="color: #859900; font-weight: bold;">let</span>
      ((static-directory (plist-get property-list `<span style="color: #657b83; font-weight: bold;">:base-directory</span>)))
    (make-directory static-directory t)
    (mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (filename)
            (<span style="color: #859900; font-weight: bold;">progn</span>
              (string-match (concat org-jekyll-paths-articles-path <span style="color: #2aa198;">"/[[:alnum:]-/]+/</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">[[:alnum:][:blank:]-_.]+</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">$"</span>) filename)
              (<span style="color: #859900; font-weight: bold;">let</span>
                  ((static-filename (match-string 1 filename)))
                (copy-file filename (concat static-directory <span style="color: #2aa198;">"/"</span> static-filename) t t t t))))
          (seq-filter (<span style="color: #859900; font-weight: bold;">lambda</span> (path)
                        (not (string-match
                              (concat org-jekyll-exclude-regex <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">article-[[:lower:]]+\\.org</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">"</span>)
                              path)))
                      (directory-files-recursively org-jekyll-paths-articles-path <span style="color: #2aa198;">"."</span> nil nil nil)))))
</pre>
</div>
</div>
</div>
<div id="outline-container-jekyll-build-from-emacs" class="outline-3">
<h3 id="jekyll-build-from-emacs">Вызов Jekyll из Emacs</h3>
<div class="outline-text-3" id="text-jekyll-build-from-emacs">
<p>
После того как у нас появились готовые HTML-файлы и все прочие статические
файлы, лежащие в <i>нужных</i> местах — нужно вызвать Jekyll, чтобы он собрал мой
статический блог внутри каталога <code>_site/</code>. Для этого используется консольная
команда <code>bundle exec jekyll build</code>.
</p>

<p>
В статье <a href="https://mastodon.social/@fabrik42">Christian Dewein</a> для вызова консольной команды используется плагин
<a href="https://github.com/rejeep/prodigy.el">Prodigy</a>. Я счёл этот подход переусложнённым и просто запускаю отдельный
процесс при помощи функции <code>make-process</code><sup><a id="fnr.make-process" class="footref" href="#fn.make-process" role="doc-backlink">17</a></sup>:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(make-process
 <span style="color: #657b83; font-weight: bold;">:name</span> <span style="color: #2aa198;">"jekyll-build"</span>
 <span style="color: #657b83; font-weight: bold;">:buffer</span> <span style="color: #2aa198;">"jekyll-build"</span>
 <span style="color: #657b83; font-weight: bold;">:command</span> '(<span style="color: #2aa198;">"bundle"</span> <span style="color: #2aa198;">"exec"</span> <span style="color: #2aa198;">"jekyll"</span> <span style="color: #2aa198;">"build"</span>)
 <span style="color: #657b83; font-weight: bold;">:delete-exited-processes</span> t
 <span style="color: #657b83; font-weight: bold;">:sentinel</span> (<span style="color: #859900; font-weight: bold;">lambda</span> (process state)
             (<span style="color: #859900; font-weight: bold;">cond</span>
              ((<span style="color: #859900; font-weight: bold;">and</span> (eq (process-status process) 'exit)
                    (zerop (process-exit-status process)))
               (message <span style="color: #2aa198;">"%s"</span> (propertize <span style="color: #2aa198;">"Blog built"</span> 'face '(<span style="color: #657b83; font-weight: bold;">:foreground</span> <span style="color: #2aa198;">"blue"</span>))))
              ((eq (process-status process) 'run)
               (accept-process-output process))
              (t (<span style="color: #cb4b16; font-weight: bold;">error</span> (concat <span style="color: #2aa198;">"Jekyll Build: "</span> state))))))
</pre>
</div>

<p>
Здесь, помимо банального вызова нужной команды внутри отдельного процесса,
обрабатывается её вывод через лямбду, которая либо выводит сообщение об
успехе, либо печатает ошибку.
</p>

<p>
Сообщения для пользователя печатаются в minibuffer при помощи функции
<code>message</code><sup><a id="fnr.message" class="footref" href="#fn.message" role="doc-backlink">18</a></sup>, текстом синего текста (настраивается при помощи
<code>propertize</code><sup><a id="fnr.propertize" class="footref" href="#fn.propertize" role="doc-backlink">19</a></sup>):
</p>


<div class="figure">
<p><img src="/assets/static/message.png" alt="message function output" align="center" />
</p>
</div>

<p>
Вывод запущенного процесса отправляется в буфер <code>jekyll-build</code>, который
используется потом для просмотра лога сборки.
</p>

<p>
Экспорт файлов и запуск <code>bundle exec</code> объединяются в функции
<code>org-jekyll--suffix-build</code>, чтобы за один вызов превращать org-файлы в готовый
статический сайт:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll--suffix-build</span> ()
  <span style="color: #2aa198;">"Build the blog."</span>
  (<span style="color: #859900; font-weight: bold;">interactive</span>)
  (cd (expand-file-name org-jekyll-paths-base-path))
  (<span style="color: #859900; font-weight: bold;">let</span> ((org-publish-project-alist `((<span style="color: #2aa198;">"org-jekyll-org"</span>
                                      ...)
                                     (<span style="color: #2aa198;">"org-jekyll-static"</span>
                                      ...)
                                     (<span style="color: #2aa198;">"org-jekyll"</span> <span style="color: #657b83; font-weight: bold;">:components</span> (<span style="color: #2aa198;">"org-jekyll-org"</span> <span style="color: #2aa198;">"org-jekyll-static"</span>))))
        (current-path (file-name-directory buffer-file-name)))
    (cd (expand-file-name org-jekyll-paths-base-path))
    (org-publish-project <span style="color: #2aa198;">"org-jekyll"</span> t nil))
  (make-process
   <span style="color: #657b83; font-weight: bold;">:name</span> <span style="color: #2aa198;">"jekyll-build"</span>
   <span style="color: #657b83; font-weight: bold;">:buffer</span> <span style="color: #2aa198;">"jekyll-build"</span>
   <span style="color: #657b83; font-weight: bold;">:command</span> '(<span style="color: #2aa198;">"bundle"</span> <span style="color: #2aa198;">"exec"</span> <span style="color: #2aa198;">"jekyll"</span> <span style="color: #2aa198;">"build"</span>)
   <span style="color: #657b83; font-weight: bold;">:delete-exited-processes</span> t
   <span style="color: #657b83; font-weight: bold;">:sentinel</span> (<span style="color: #859900; font-weight: bold;">lambda</span> (process state)
               ...))
  (cd current-path))
</pre>
</div>

<p>
Поскольку при редактировании поста мы находимся в каталоге с постом, а сборка
блога будет работать только в каталоге из переменной
<code>org-jekyll-paths-base-path</code> — мы сначала переходим в нужный каталог и только
потом начинаем сборку. После того как все нужные команды были вызваны —
возвращаемся в каталог с постом (сохранён в переменной <code>current-path</code>),
чтобы можно было спокойно продолжать работать с его файлами.
</p>
</div>
</div>
<div id="outline-container-create-new-post" class="outline-3">
<h3 id="create-new-post">Создание нового поста</h3>
<div class="outline-text-3" id="text-create-new-post">
<p>
Добившись успешной сборки своего статического сайта, мне захотелось иметь
отдельную функцию, чтобы полуавтоматически создавать новый пост — не создавая
вручную новый подкаталог для него и не копируя каждый раз front matter для
Jekyll в org-файл. Будет удобно, если Emacs сам спросит у меня всё
необходимое, подготовит структуру файлов и каталогов, а затем сам откроет
буфер с уже готовым исходником нового поста.
</p>

<p>
Для получения ввода от пользователя в Emacs есть множество функций, но для
плагина достаточно четырёх самых простых:
</p>
<ul class="org-ul">
<li><code>read-string</code>: выводит вспомогательный текст в минибуфере и возвращает строку,
введённую пользователем.</li>
<li><code>completing-read</code>: выводит меню в минибуфере и возвращает строку с выбранным
пунктом меню. Элементы меню передаются вторым параметром. Третий параметр,
если он не <code>nil</code>, включает режим строгого совпадения ввода пользователя с
одним из пунктов меню.</li>
<li><code>y-or-n-p</code>: выводит текст в минибуфере и ждёт ответа «Да» или «Нет» от
пользователя. Возвращает <code>t</code> или <code>nil</code>.</li>
<li><code>read-file-name</code>: выводит меню выбора файла в минибуфере и возвращает путь к
выбранному файлу.</li>
</ul>

<p>
Достаточно быстро я набросал следующую конструкцию, которая спрашивает всё
необходимое и сохраняет результаты в отдельных переменных:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">let*</span> ((category (completing-read <span style="color: #2aa198;">"Enter category: "</span>
                                  (seq-filter
                                   (<span style="color: #859900; font-weight: bold;">lambda</span> (category) (string-match <span style="color: #2aa198;">"^[[:lower:]]+$"</span> category))
                                   (directory-files org-jekyll-paths-articles-path nil
                                                    directory-files-no-dot-files-regexp
                                                    nil nil))
                                  nil t))
       (name (read-string <span style="color: #2aa198;">"Enter title: "</span>))
       (summary (read-string <span style="color: #2aa198;">"Enter summary: "</span>))
       (tags (read-string <span style="color: #2aa198;">"Enter tags (space separated): "</span>))
       (permalink (read-string <span style="color: #2aa198;">"Enter permalink: "</span>))
       (language (completing-read <span style="color: #2aa198;">"Enter post language: "</span> org-jekyll-languages nil t))
       (use-banner (y-or-n-p <span style="color: #2aa198;">"Use banner?"</span>))
       (banner (<span style="color: #859900; font-weight: bold;">if</span> use-banner
                   (read-file-name <span style="color: #2aa198;">"Path to banner image: "</span> nil nil t nil nil)
                 nil))))
</pre>
</div>


<div class="figure">
<p><img src="/assets/static/create_new_post.jpg" alt="new post creation UI" align="center" />
</p>
<p style="text-align: center"><i>UI создания нового поста</i></p>
</div>

<p>
Внутри этого же <code>let*</code> сразу же вычисляются:
</p>
<ul class="org-ul">
<li><p>
Часть front matter для вставки заглавного изображения в блог:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(additional (concat (<span style="color: #859900; font-weight: bold;">if</span> use-banner
                        (concat <span style="color: #2aa198;">"image: /assets/static/"</span> (file-name-nondirectory banner) <span style="color: #2aa198;">"\n"</span>
                                <span style="color: #2aa198;">"banner:\n"</span>
                                <span style="color: #2aa198;">"  image: /assets/static/"</span> (file-name-nondirectory banner) <span style="color: #2aa198;">"\n"</span>
                                <span style="color: #2aa198;">"  opacity: 0.6\n"</span>)
                      <span style="color: #2aa198;">""</span>)
                    (concat <span style="color: #2aa198;">"summary: "</span> summary <span style="color: #2aa198;">"\n"</span>)
                    (concat <span style="color: #2aa198;">"tags: "</span> tags)))
</pre>
</div></li>
<li><p>
Путь к новому посту:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(dirname (concat path <span style="color: #2aa198;">"/"</span> category <span style="color: #2aa198;">"/"</span> date <span style="color: #2aa198;">"-"</span> permalink))
</pre>
</div></li>
<li><p>
Имя файла с постом — к <code>article</code> добавляется введённый language code:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(filename (concat dirname <span style="color: #2aa198;">"/"</span> <span style="color: #2aa198;">"article-"</span> language <span style="color: #2aa198;">".org"</span>))
</pre>
</div></li>
</ul>

<p>
После вычисления всех переменных, в теле <code>let*</code> выполняется основная работа:
</p>
<ol class="org-ol">
<li><p>
Создаётся подкаталог с ранее вычисленным именем:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(make-directory dirname t)
</pre>
</div></li>
<li><p>
Если для поста используется баннер, то в этот каталог копируется
соответствующее изображение:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">if</span> use-banner
    (copy-file banner (concat dirname <span style="color: #2aa198;">"/"</span> (file-name-nondirectory banner))))
</pre>
</div></li>
<li><p>
Берётся шаблон для поста по пути из переменной
<code>org-jekyll-paths-template-path</code> и открывается во временном буфере для замены
placeholder'ов реальными значениями. Потом этот буфер сохраняется как файл
с именем из <code>filename</code>, по пути из <code>dirname</code>:

</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">with-temp-buffer</span>
  (insert-file-contents template)
  (mapc
   (<span style="color: #859900; font-weight: bold;">lambda</span> (x) (<span style="color: #859900; font-weight: bold;">progn</span>
                 (goto-char (point-min))
                 (<span style="color: #859900; font-weight: bold;">while</span> (search-forward (car x) nil t)
                   (replace-match (cdr x) t t))))
   `((<span style="color: #2aa198;">"{%NAME%}"</span> . ,name)
     (<span style="color: #2aa198;">"{%CATEGORY%}"</span> . ,category)
     (<span style="color: #2aa198;">"{%DATE%}"</span> . ,date)
     (<span style="color: #2aa198;">"{%LANG%}"</span> . ,language)
     (<span style="color: #2aa198;">"{%ADDITIONAL%}"</span> . ,additional)))
  (write-file filename))
</pre>
</div>
<p>

</p></li>
<li><p>
Сгенерированный файл открывается в текущем буфере с курсором в конце файла,
чтобы сразу начать писать текст:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">with-current-buffer</span> (find-file filename)
  (goto-char (point-max)))
</pre>
</div></li>
</ol>

<p>
Шаблон поста, который я использую, лежит по пути из переменной
<code>org-jekyll-paths-template-path</code> (внутри функции он скопирован в локальную
переменную <code>template</code> для удобства):
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defcustom</span> <span style="color: #268bd2;">org-jekyll-paths-template-path</span>
  (concat org-jekyll-paths-articles-path <span style="color: #2aa198;">"/_post_template.org"</span>)
  <span style="color: #2aa198;">"Path to post template."</span>
  <span style="color: #657b83; font-weight: bold;">:type</span> '(file <span style="color: #657b83; font-weight: bold;">:must-match</span> t)
  <span style="color: #657b83; font-weight: bold;">:group</span> 'org-jekyll-paths)
</pre>
</div>

<p>
У меня эта переменная равна <code>~/rsync/blog/articles/_post_template.org</code>. Сам файл
выглядит вот так:
</p>

<p>

</p>
<pre class="example">
#+BEGIN_EXPORT html
---
layout: post
title: {%NAME%}
category: {%CATEGORY%}
date: {%DATE%}
lang: {%LANG%}
comments: false
hidden:
  - related_posts
{%ADDITIONAL%}
---
#+END_EXPORT


</pre>
<p>

</p>

<p>
Как видно, тут просто описан jekyll-овский front matter и ничего больше.
</p>
</div>
</div>
<div id="outline-container-jekyll-local-server" class="outline-3">
<h3 id="jekyll-local-server">Запуск локального сервера Jekyll</h3>
<div class="outline-text-3" id="text-jekyll-local-server">
<p>
Сборка блога и создание нового поста средствами Emacs Lisp готовы. Из часто
используемых действий у меня остался запуск локального сервера и очистка
рабочего каталога Jekyll от сгенерированных файлов.
</p>

<p>
С запуском сервера всё просто — надо лишь вызвать <code>make-process</code> с нужными
аргументами:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(make-process
 <span style="color: #657b83; font-weight: bold;">:name</span> <span style="color: #2aa198;">"jekyll-serve"</span>
 <span style="color: #657b83; font-weight: bold;">:buffer</span> <span style="color: #2aa198;">"jekyll-serve"</span>
 <span style="color: #657b83; font-weight: bold;">:command</span> '(<span style="color: #2aa198;">"bundle"</span> <span style="color: #2aa198;">"exec"</span> <span style="color: #2aa198;">"jekyll"</span> <span style="color: #2aa198;">"serve"</span>)
 <span style="color: #657b83; font-weight: bold;">:delete-exited-processes</span> t
 <span style="color: #657b83; font-weight: bold;">:filter</span> (<span style="color: #859900; font-weight: bold;">lambda</span> (process text)
           (<span style="color: #859900; font-weight: bold;">if</span> (string-match <span style="color: #2aa198;">".*done in [0-9.]+ seconds.*"</span> text)
               (message <span style="color: #2aa198;">"%s"</span> (propertize <span style="color: #2aa198;">"Blog serve: running"</span> 'face '(<span style="color: #657b83; font-weight: bold;">:foreground</span> <span style="color: #2aa198;">"blue"</span>))))
           (internal-default-process-filter process text))
 <span style="color: #657b83; font-weight: bold;">:sentinel</span> (<span style="color: #859900; font-weight: bold;">lambda</span> (process state)
             (<span style="color: #859900; font-weight: bold;">cond</span>
              ((<span style="color: #859900; font-weight: bold;">and</span> (eq (process-status process) 'exit)
                    (zerop (process-exit-status process)))
               (message <span style="color: #2aa198;">"%s"</span> (propertize <span style="color: #2aa198;">"Blog serve: stopped"</span> 'face '(<span style="color: #657b83; font-weight: bold;">:foreground</span> <span style="color: #2aa198;">"blue"</span>))))
              ((eq (process-status process) 'run)
               (accept-process-output process))
              (t (<span style="color: #cb4b16; font-weight: bold;">error</span> (concat <span style="color: #2aa198;">"Jekyll Serve: "</span> state))))))
</pre>
</div>

<p>
Я хотел, чтобы одна и та же функция запускала и останавливала локальный
сервер — для удобства. Логика для этого максимально простая:
</p>
<ul class="org-ul">
<li>Если процесс <code>jekyll-serve</code> существует, то убиваем его.</li>
<li>Если процесса нет — запускаем сервер.</li>
</ul>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll--suffix-serve-toggle</span> ()
  <span style="color: #2aa198;">"Serve blog or stop serving the blog."</span>
  (<span style="color: #859900; font-weight: bold;">interactive</span>)
  (<span style="color: #859900; font-weight: bold;">let</span> ((current-path (file-name-directory buffer-file-name)))
    (<span style="color: #859900; font-weight: bold;">if</span> (eq (process-status <span style="color: #2aa198;">"jekyll-serve"</span>) ' run)
        (interrupt-process <span style="color: #2aa198;">"jekyll-serve"</span>)
      (cd (expand-file-name org-jekyll-paths-base-path))
      (make-process ...)
      (cd current-path))))
</pre>
</div>
</div>
</div>
<div id="outline-container-jekyll-clean" class="outline-3">
<h3 id="jekyll-clean">Очистка рабочего каталога Jekyll</h3>
<div class="outline-text-3" id="text-jekyll-clean">
<p>
Очистка рабочего каталога уже не так проста. Если с вызовом команды <code>bundle
exec jekyll clean</code> всё просто — нужен ещё один вызов <code>make-process</code>:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(make-process
 <span style="color: #657b83; font-weight: bold;">:name</span> <span style="color: #2aa198;">"jekyll-clean"</span>
 <span style="color: #657b83; font-weight: bold;">:buffer</span> <span style="color: #2aa198;">"jekyll-clean"</span>
 <span style="color: #657b83; font-weight: bold;">:command</span> '(<span style="color: #2aa198;">"bundle"</span> <span style="color: #2aa198;">"exec"</span> <span style="color: #2aa198;">"jekyll"</span> <span style="color: #2aa198;">"clean"</span>)
 <span style="color: #657b83; font-weight: bold;">:delete-exited-processes</span> t
 <span style="color: #657b83; font-weight: bold;">:sentinel</span> (<span style="color: #859900; font-weight: bold;">lambda</span> (process state)
             (<span style="color: #859900; font-weight: bold;">cond</span>
              ((<span style="color: #859900; font-weight: bold;">and</span> (eq (process-status process) 'exit)
                    (zerop (process-exit-status process)))
               (message <span style="color: #2aa198;">"%s"</span> (propertize <span style="color: #2aa198;">"Blog cleaned"</span> 'face '(<span style="color: #657b83; font-weight: bold;">:foreground</span> <span style="color: #2aa198;">"blue"</span>))))
              ((eq (process-status process) 'run)
               (accept-process-output process))
              (t (<span style="color: #cb4b16; font-weight: bold;">error</span> (concat <span style="color: #2aa198;">"Jekyll Clean: "</span> state))))))
</pre>
</div>


<p>
То с результатами работы экспорта из Org Mode всё сложнее — Jekyll о них не
знает и эти файлы останутся в файловой системе. Следовательно, перед вызовом
<code>jekyll clean</code> надо бы почистить каталоги <code>_articles/</code>, <code>_static/</code> и <code>_post/</code> от того,
что туда добавила <code>org-publish-project</code>. Это я сделал через следующий
S-expression:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (x)
        (mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (file)
                (delete-file file nil))
              (mapcan (<span style="color: #859900; font-weight: bold;">lambda</span> (directory)
                        (directory-files-recursively (concat org-jekyll-paths-base-path directory) (cdr x) nil nil nil))
                        (car x))))
      `(((<span style="color: #2aa198;">"/_posts/en"</span> <span style="color: #2aa198;">"/_posts/ru"</span>) . <span style="color: #2aa198;">"\\.html$"</span>)
        ((<span style="color: #2aa198;">"/assets/static"</span> <span style="color: #2aa198;">"/_static"</span>) . ,(concat <span style="color: #2aa198;">"\\.png</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.jpg$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.jpeg$"</span>
                                                  <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">"</span>
                                                  <span style="color: #2aa198;">"\\.JPG$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.svg$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.webm$"</span>
                                                  <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">"</span>
                                                  <span style="color: #2aa198;">"\\.webp$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.html$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.tar.bz2$"</span>
                                                  <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">"</span>
                                                  <span style="color: #2aa198;">"\\.org$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.gif$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.gpx$"</span>
                                                  <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">"</span>
                                                  <span style="color: #2aa198;">"\\.uxf$"</span>))
        ((<span style="color: #2aa198;">"/_articles"</span>) . <span style="color: #2aa198;">"\\.org$"</span>)))
</pre>
</div>

<p>
На первый взгляд код может выглядеть переусложнённым, но всё что он делает —
пробегается по заданным каталогам и удаляет из них файлы, подпадающие под
заданное регулярное выражение.
</p>

<p>
Первая лямбда <code>(lambda (x) ...)</code> просто передаёт каждый элемент из основного
списка (например, первый элемент: <code>(("/_posts/en" "/_posts/ru") . "\\.html$")</code>)
в следующий S-expression:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (file)
        (delete-file file nil))
      (mapcan (<span style="color: #859900; font-weight: bold;">lambda</span> (directory)
                (directory-files-recursively (concat org-jekyll-paths-base-path directory) (cdr x) nil nil nil))
              (car x)))
</pre>
</div>

<p>
Тут уже всё немного сложнее. Второй параметр <code>mapc</code> не просто переменная <code>x</code> с
переданным элементом списка внутри, а ещё одно S-expression. Оно будет сначала
вычислено и его результат (ещё один список — список файлов), будет поэлементно
обработан последней лямбдой, которая просто удалит файл:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">lambda</span> (file)
  (delete-file file nil))
</pre>
</div>

<p>
S-expression с <code>mapcan</code><sup><a id="fnr.mapcan" class="footref" href="#fn.mapcan" role="doc-backlink">20</a></sup> делает следующее:
</p>
<ol class="org-ol">
<li>Берёт первый элемент списка с путями/регулярками через <code>(car x)</code> — это будет
ещё один список с путями к директориям, например: <code>("/_posts/en"
   "/_posts/ru")</code>.</li>
<li>В лямбде с <code>directory-files-recursively</code> пробегается по этому списку и
получает список файлов в каталоге, которые подпадают под заданное
регулярное выражение. Регулярка — последний элемент списка <code>x</code> и его можно
получить через <code>(cdr x)</code>.</li>
<li><p>
В итоге получается что-то вроде <code>(("/_posts/en/article1/file.org"
   "/_posts/en/article2/file.org") ("/_posts/ru/article1/file.org"
   "/_posts/ru/article2/file.org"))</code>. Если бы я использовал <code>mapc</code>, то на вход
лямбда-функции для удаления файлов попал бы список вместо строки с путём к
файлу и <code>delete-file</code> сломался бы.
</p>

<p>
Для примера, в следующем коде печатается содержимое переменной <code>file</code>,
которое попадает в лямбду, если бы использовался <code>mapc</code>:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (file)
        (print file))
      (mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (directory)
              directory)
            '((<span style="color: #2aa198;">"a"</span> <span style="color: #2aa198;">"b"</span>) (<span style="color: #2aa198;">"c"</span> <span style="color: #2aa198;">"d"</span>))))

(<span style="color: #2aa198;">"a"</span> <span style="color: #2aa198;">"b"</span>)
(<span style="color: #2aa198;">"c"</span> <span style="color: #2aa198;">"d"</span>)
</pre>
</div></li>
<li><p>
Надо «сплющить» список и этим как раз занимается <code>mapcan</code>. Она превращает
список из предыдущего пункта в: <code>("/_posts/en/article1/file.org"
   "/_posts/en/article2/file.org" "/_posts/ru/article1/file.org"
   "/_posts/ru/article2/file.org")</code> — и возвращает результат в качестве второго
параметра в вышележащий <code>mapc</code>.
</p>

<p>
Вот пример того, что оказывается на входе лямбды для удаления файлов при
использовании <code>mapcan</code> — уже не список, а отдельные его элементы:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (file)
        (print file))
      (mapcan (<span style="color: #859900; font-weight: bold;">lambda</span> (directory)
                directory)
              '((<span style="color: #2aa198;">"a"</span> <span style="color: #2aa198;">"b"</span>) (<span style="color: #2aa198;">"c"</span> <span style="color: #2aa198;">"d"</span>))))

<span style="color: #2aa198;">"a"</span>
<span style="color: #2aa198;">"b"</span>
<span style="color: #2aa198;">"c"</span>
<span style="color: #2aa198;">"d"</span>
</pre>
</div></li>
</ol>

<p>
Итоговая функция для очистки рабочего каталога Jekyll выглядит следующим
образом:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll--suffix-clear</span> ()
  <span style="color: #2aa198;">"Clear blog files."</span>
  (<span style="color: #859900; font-weight: bold;">interactive</span>)
  (<span style="color: #859900; font-weight: bold;">let</span> ((current-path (file-name-directory buffer-file-name)))
    (cd (expand-file-name org-jekyll-paths-base-path))
    (mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (x)
            (mapc (<span style="color: #859900; font-weight: bold;">lambda</span> (file)
                    (delete-file file nil))
                  (mapcan (<span style="color: #859900; font-weight: bold;">lambda</span> (directory)
                            (directory-files-recursively (concat org-jekyll-paths-base-path directory) (cdr x) nil nil nil))
                          (car x))))
          `(((<span style="color: #2aa198;">"/_posts/en"</span> <span style="color: #2aa198;">"/_posts/ru"</span>) . <span style="color: #2aa198;">"\\.html$"</span>)
            ((<span style="color: #2aa198;">"/assets/static"</span> <span style="color: #2aa198;">"/_static"</span>) . ,(concat <span style="color: #2aa198;">"\\.png$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.jpg$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.jpeg$"</span>
                                                      <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">"</span>
                                                      <span style="color: #2aa198;">"\\.JPG$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.svg$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.webm$"</span>
                                                      <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">"</span>
                                                      <span style="color: #2aa198;">"\\.webp$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.html$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.tar.bz2$"</span>
                                                      <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">"</span>
                                                      <span style="color: #2aa198;">"\\.org$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.gif$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.gpx$"</span>
                                                      <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">"</span>
                                                      <span style="color: #2aa198;">"\\.svg$"</span>))
            ((<span style="color: #2aa198;">"/_articles"</span>) . <span style="color: #2aa198;">"\\.org$</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\.png$"</span>)))
    (make-process
     <span style="color: #657b83; font-weight: bold;">:name</span> <span style="color: #2aa198;">"jekyll-clean"</span>
     <span style="color: #657b83; font-weight: bold;">:buffer</span> <span style="color: #2aa198;">"jekyll-clean"</span>
     <span style="color: #657b83; font-weight: bold;">:command</span> '(<span style="color: #2aa198;">"bundle"</span> <span style="color: #2aa198;">"exec"</span> <span style="color: #2aa198;">"jekyll"</span> <span style="color: #2aa198;">"clean"</span>)
     <span style="color: #657b83; font-weight: bold;">:delete-exited-processes</span> t
     <span style="color: #657b83; font-weight: bold;">:sentinel</span> (<span style="color: #859900; font-weight: bold;">lambda</span> (process state)
                 (<span style="color: #859900; font-weight: bold;">cond</span>
                  ((<span style="color: #859900; font-weight: bold;">and</span> (eq (process-status process) 'exit)
                        (zerop (process-exit-status process)))
                   (message <span style="color: #2aa198;">"%s"</span> (propertize <span style="color: #2aa198;">"Blog cleaned"</span> 'face '(<span style="color: #657b83; font-weight: bold;">:foreground</span> <span style="color: #2aa198;">"blue"</span>))))
                  ((eq (process-status process) 'run)
                   (accept-process-output process))
                  (t (<span style="color: #cb4b16; font-weight: bold;">error</span> (concat <span style="color: #2aa198;">"Jekyll Clean: "</span> state))))))))
</pre>
</div>
</div>
</div>
<div id="outline-container-transient-ui" class="outline-3">
<h3 id="transient-ui">Интерфейс пользователя (transient)</h3>
<div class="outline-text-3" id="text-transient-ui">
<p>
Ко всей этой красоте неплохо было бы добавить <i>удобный для пользователя Emacs</i>
интерфейс, чтобы не вызывать каждый раз нужную функцию через <code>M-x</code>.
</p>

<p>
Здесь я особо не мудрствовал и просто использовал библиотеку <a href="https://jd.codes/posts/transient-emacs/">Transient</a>, как и
<a href="https://mastodon.social/@fabrik42">Christian Dewein</a>. В итоге получилась вот такая штука:
</p>


<div class="figure">
<p><img src="/assets/static/transient_panel.png" alt="Panel with blog actions" align="center" />
</p>
<p style="text-align: center"><i>Интерфейс панели для работы с блогом</i></p>
</div>

<p>
Ряд суффиксов (функций, которые будут вызываться при выборе соответствующих
пунктов меню) я уже описал выше. Префикс (код, описывающий панель) выглядит
следующим образом:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #93a1a1;">;; </span><span style="color: #93a1a1;">Transient keys description:</span>

(<span style="color: #859900; font-weight: bold;">transient-define-prefix</span> <span style="color: #268bd2;">org-jekyll-layout-descriptions</span> ()
  <span style="color: #2aa198;">"Transient layout with blog commands."</span>
  [<span style="color: #657b83; font-weight: bold;">:description</span> (<span style="color: #859900; font-weight: bold;">lambda</span> () (concat org-jekyll-url <span style="color: #2aa198;">" control panel"</span> <span style="color: #2aa198;">"\n"</span>))
                [<span style="color: #2aa198;">"Development"</span>
                 (<span style="color: #2aa198;">"b"</span> <span style="color: #2aa198;">"Build blog"</span> org-jekyll--suffix-build)
                 (<span style="color: #2aa198;">"s"</span> org-jekyll--suffix-serve-toggle
                  <span style="color: #657b83; font-weight: bold;">:description</span> (<span style="color: #859900; font-weight: bold;">lambda</span> () (<span style="color: #859900; font-weight: bold;">if</span> (eq (process-status <span style="color: #2aa198;">"jekyll-serve"</span>) 'run)
                                              <span style="color: #2aa198;">"Stop serving local blog"</span>
                                            <span style="color: #2aa198;">"Serve local blog"</span>)))
                 (<span style="color: #2aa198;">"o"</span> <span style="color: #2aa198;">"Open served blog"</span> org-jekyll--suffix-open-blog)
                 (<span style="color: #2aa198;">"O"</span> <span style="color: #2aa198;">"Open blog in Web"</span> org-jekyll--suffix-open-remote-blog)
                 (<span style="color: #2aa198;">"B"</span> <span style="color: #2aa198;">"Open build log"</span> org-jekyll--suffix-open-build-log)
                 (<span style="color: #2aa198;">"l"</span> <span style="color: #2aa198;">"Open serve log"</span> org-jekyll--suffix-open-serve-log)
                 (<span style="color: #2aa198;">"C"</span> <span style="color: #2aa198;">"Clear blog directory"</span> org-jekyll--suffix-clear)]
                [<span style="color: #2aa198;">"Actions"</span>
                 (<span style="color: #2aa198;">"n"</span> <span style="color: #2aa198;">"New blog post"</span> org-jekyll--suffix-create-post)]])

<span style="color: #93a1a1;">;; </span><span style="color: #93a1a1;">Function to call main menu:</span>

(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll-menu</span> ()
  <span style="color: #2aa198;">"Open blog control center."</span>
  (<span style="color: #859900; font-weight: bold;">interactive</span>)
  (org-jekyll-layout-descriptions))
</pre>
</div>

<p>
Функции-суффиксы это обычные функции без параметров, например:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll--suffix-open-blog</span> ()
  <span style="color: #2aa198;">"Open locally served blog."</span>
  (<span style="color: #859900; font-weight: bold;">interactive</span>)
  (browse-url <span style="color: #2aa198;">"http://127.0.0.1:8000/"</span>))

(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll--suffix-open-remote-blog</span> ()
  <span style="color: #2aa198;">"Open remote blog."</span>
  (<span style="color: #859900; font-weight: bold;">interactive</span>)
  (browse-url org-jekyll-url))

(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll--suffix-create-post</span> ()
  <span style="color: #2aa198;">"Create new blog post."</span>
  (<span style="color: #859900; font-weight: bold;">interactive</span>)
  (cd (expand-file-name org-jekyll-paths-base-path))
  (org-jekyll--create-new-post))
</pre>
</div>

<p>
В описании пункта для запуска/остановки локального сервера я сделал так, чтобы
он сразу же показывал запущен ли локальный сервер или нет — через проверку
наличия процесса <code>"jekyll-serve"</code> в системе.
</p>

<p>
Отобразить эту панельку можно вызвав функцию <code>org-jekyll-menu</code>. Забегая немного
вперёд — эта функция вызывается хоткеем в моём плагине.
</p>
</div>
</div>
<div id="outline-container-emacs-plugin" class="outline-3">
<h3 id="emacs-plugin">Оформление в виде плагина</h3>
<div class="outline-text-3" id="text-emacs-plugin">
<p>
Осталось оформить всё как Emacs-плагин — не буду же я каждый раз делать
<code>eval-buffer</code>? Пусть Emacs сам подгружает весь нужный код при старте.
</p>

<p>
Для начала я прогнал исходный код через <code>M-x checkdoc</code> и добавил недостающие
комментарии. Потом добавил зависимости в заголовок:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">require</span> '<span style="color: #268bd2; font-weight: bold;">htmlize</span>)
(<span style="color: #859900; font-weight: bold;">require</span> '<span style="color: #268bd2; font-weight: bold;">ox-publish</span>)
(<span style="color: #859900; font-weight: bold;">require</span> '<span style="color: #268bd2; font-weight: bold;">transient</span>)
</pre>
</div>

<p>
Здесь: <code>htmlize</code> нужен Org Mode для подсветки кода в сгенерированном HTML,
<code>ox-publish</code> — расширение для публикации файла средствами Org
Mode. Использование библиотеки <code>transient</code> я уже описал выше.
</p>

<p>
Ещё я добавил <code>provide</code> в конец файла:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">provide</span> '<span style="color: #268bd2; font-weight: bold;">org-jekyll</span>)
</pre>
</div>

<p>
Ну и описал minor mode, который будет вызывать описанное выше transient-меню
по хоткею <code>C-c b</code>:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #93a1a1;">;; </span><span style="color: #93a1a1;">Minor mode:</span>

<span style="color: #93a1a1;">;;;</span><span style="color: #93a1a1;">###</span><span style="color: #cb4b16; font-weight: bold;">autoload</span>
(<span style="color: #859900; font-weight: bold;">define-minor-mode</span> <span style="color: #268bd2;">org-jekyll-mode</span>
  <span style="color: #2aa198;">"Enable transient menu to operate with blog-related OrgMode files."</span>
  <span style="color: #657b83; font-weight: bold;">:lighter</span> <span style="color: #2aa198;">" oj"</span>
  <span style="color: #657b83; font-weight: bold;">:global</span> nil
  <span style="color: #657b83; font-weight: bold;">:init-value</span> nil
  <span style="color: #657b83; font-weight: bold;">:keymap</span> (list (cons (kbd <span style="color: #2aa198;">"C-c b"</span>) #'org-jekyll-menu)))
</pre>
</div>

<p>
Теперь, если этот режим включён через <code>M-x org-jekyll-mode</code>, то по нажатию на
<code>C-c b b</code> собирается блог, по нажатию <code>C-c b n</code> создаётся новая статья и так
далее. Если просто нажать <code>C-c b</code>, то покажется transient-меню со скриншота
выше.
</p>
</div>
</div>
<div id="outline-container-loading-plugin-in-emacs" class="outline-3">
<h3 id="loading-plugin-in-emacs">Загрузка плагина в Emacs</h3>
<div class="outline-text-3" id="text-loading-plugin-in-emacs">
<p>
Осталось правильным образом загрузить этот плагин в Emacs, чтобы новый minor
mode сам включался только при открытии файла с постом для блога и не включался
при открытии остальных org-файлов.
</p>

<p>
Для этого я добавил ещё одну функцию, которая проверяет что мы открыли файл со
статьей в буфере и включает мой minor mode:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #93a1a1;">;;;</span><span style="color: #93a1a1;">###</span><span style="color: #cb4b16; font-weight: bold;">autoload</span>
(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">org-jekyll-init</span> ()
  (<span style="color: #859900; font-weight: bold;">if</span> (<span style="color: #859900; font-weight: bold;">and</span> buffer-file-name
           (string-match <span style="color: #2aa198;">"^/.+/article-[[:lower:]]\\{</span><span style="color: #268bd2;">2\\</span><span style="color: #2aa198;">}\\.org"</span> (buffer-file-name)))
      (org-jekyll-mode 1)))
</pre>
</div>

<p>
Ну а сам плагин загружается в Emacs через <code>use-package</code> следующим образом:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">use-package</span> org-jekyll
  <span style="color: #657b83; font-weight: bold;">:load-path</span> <span style="color: #2aa198;">"~/rsync/blog/"</span>
  <span style="color: #657b83; font-weight: bold;">:ensure</span> nil
  <span style="color: #657b83; font-weight: bold;">:commands</span> org-jekyll-init
  <span style="color: #657b83; font-weight: bold;">:hook</span> (org-mode . org-jekyll-init))
</pre>
</div>

<p>
Теперь, каждый раз когда открывается org-файл, вызывается функция
<code>org-jekyll-init</code>. И если мы открыли файл с текстом для блога, то включается
<code>org-jekyll-mode</code> и мой хоткей вместе с transient-меню становятся доступны.
</p>
</div>
</div>
</div>
<div id="outline-container-source-code" class="outline-2">
<h2 id="source-code">Исходный код плагина</h2>
<div class="outline-text-2" id="text-source-code">
<p>
Я не задумывал этот плагин пригодным для использования другими людьми — в
конце концов в нём захардкожена моя структура каталогов со статьями и мои
методы именования файлов. Поэтому я не публиковал его в MELPA и не заводил для
него отдельный репозиторий.
</p>

<p>
Исходный код лежит в том же репозитории, где и файлы для моего
блога. Посмотреть на него можно <a href="https://github.com/eugeneandrienko/eugeneandrienko.github.io/blob/master/org-jekyll.el">по этой ссылке</a>.
</p>

<p>
В результате, если мне необходимо будет перейти на другой генератор
статических сайтов — достаточно будет подправить функции, участвующие в
экспорте из OrgMode, чтобы сгенерированный HTML подходил к новому движку. Мои
исходники статей и вся структура каталогов для них — останется неизменной.
</p>
</div>
</div>
<div id="outline-container-plugin-improvement" class="outline-2">
<h2 id="plugin-improvement">Что ещё можно улучшить?</h2>
<div class="outline-text-2" id="text-plugin-improvement">
<p>
В текущей версии плагина есть несколько моментов, которые определённо стоит
улучшить:
</p>
<ol class="org-ol">
<li>Вызов функции <code>org-publish-project</code> нужно сделать асинхронным, чтобы он не
блокировал Emacs при запуске, как сейчас. При этом, <code>org-publish-project</code> и
последующий вызов <code>make-process</code> должны работать строго последовательно,
иначе Jekyll попытается собрать блог когда файлы для сборки ещё не
подготовлены.</li>
<li><p>
<code>org-publish-project</code> умеет работать с блоками Org Babel, которые я хочу
использовать для описания всяких сложных схем в виде кода для <a href="https://github.com/plantuml/plantuml">PlantUML</a>
прямо в тексте поста. После вызова <code>org-publish-project</code> в каталоге
<code>_articles/</code> будут лежать готовые изображения со схемами, сделанными на
основе PlantUML описаний (см. блогпост <a href="https://hostsharing.coop/@dzu">@dsu</a> с деталями реализации:
<a href="https://blog.lazy-evaluation.net/posts/orgmode-diagrams.html">https://blog.lazy-evaluation.net/posts/orgmode-diagrams.html</a>).
</p>

<p>
Надо лишь, чтобы функция <code>org-jekyll--prepare-static</code> умела копировать файлы
с изображениями из нового места. А функция <code>org-jekyll--suffix-clear</code> умела
удалять эти файлы.
</p>

<p>
<i>Уже реализовано — см. коммит <a href="https://github.com/eugeneandrienko/eugeneandrienko.github.io/commit/e919bd6d2b7f3a0b853fdf71f288f5c9f1749575">e919bd6d2b7f3a0b853fdf71f288f5c9f1749575</a>.</i>
</p></li>
</ol>
</div>
</div>
<div id="outline-container-notes" class="outline-2">
<h2 id="notes">Примечания</h2>
<div class="outline-text-2" id="text-notes">
</div>
</div>
<div id="footnotes">

<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.virtue_signaling" class="footnum" href="#fnr.virtue_signaling" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Сначала, в середине марта 2022 года, Visa и Master Card
отрезали меня практически от всего, что можно купить за деньги за пределами
страны. Из-за чего я не смог ни перенести свой домен к другому регистратору,
ни оплатить свой VPS в Финляндии.
</p></div></div>

<div class="footdef"><sup><a id="fn.namecheap" class="footnum" href="#fnr.namecheap" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Это отдельная и совершенно «прекрасная» история. 28 февраля
2022 года NameCheap прислал мне письмо-уведомление о том, что они
разделегируют мой домен через 7 дней потому что я из «неправильной» страны
(это было задолго до запрета оказывать IT-услуги компаниям из санкционного
списка, к которым я и так никоим образом не отношусь — скорее всего рассылка
«писем счастья» шла по адресу регистрации/биллинга ради вышеупомянутого virtue
signaling):
</p>


<div class="figure">
<p><img src="/assets/static/namecheap1.png" alt="Namecheap services discontinuation" align="center" />
</p>
</div>

<p class="footpara">
В следующих двух письмах они продлили срок на две недели. И предложили мне до
дедлайна либо уехать из страны, либо <del>заняться протестной деятельностью</del> сесть в
тюрьму на десяток лет, если я хочу продолжать пользоваться их
услугами🤡. Предполагаю, что эти письма составлял какой-то не особо умный
человек из страны «первого мира», у которого единственное его столкновение с
репрессивным аппаратом заключалось в том, что ему не продали алкоголь без ID
на кассе Wallmart'а; а про жизнь вне своих отлаженных институтов он знает из
серии фильмов «Голодные игры». И который уверен, что эмигрировать просто —
заполняешь какие-то бумажки на таможне при въезде и вжух — ты уже гражданин
другого государства.
</p>


<div class="figure">
<p><img src="/assets/static/namecheap2.png" alt="Namecheap next emails about service shutdown" align="center" />
</p>
</div>

<p class="footpara">
Перенести свой домен к другому регистратору я тогда не успел, из-за того, что
мои карты быстро и внезапно для меня оказались отключены от Visa/MasterCard —
и я не мог заплатить другому регистратору доменных имён за перенос. Через <b>год
(!)</b> оказалось, что мой домен по-прежнему обслуживается в NameCheap — после
того как я получил от них письмо с напоминанием занести немного своих
«грязных» денег для продления домена🤡🤡:
</p>


<div class="figure">
<p><img src="/assets/static/namecheap3.png" alt="Namecheap domain renewal" align="center" />
</p>
</div>

<p class="footpara">
Естественно, услугами NameCheap я с тех пор больше не пользуюсь и обхожу его
десятой дорогой, сделав выбор в пользу более вменяемого доменного
регистратора, расположенного как можно дальше (на другой стороне планеты) от
меня. Мораль истории — не стоит доверять корпорациям и всяким централизованным
и закрытым сервисам, которые вы не контролируете. Они выбросят вас не
задумываясь, если им это будет выгодно. Всегда стоит иметь запасной план, на
случай если что-то пойдёт не так.
</p></div></div>

<div class="footdef"><sup><a id="fn.jekyll" class="footnum" href="#fnr.jekyll" role="doc-backlink">3</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Он выглядел достаточно простым и в то же время оказался достаточно
популярным и часто использовался (и используется до сих пор) у разных хостеров
в качестве предустановленного приложения для блоггинга.
</p></div></div>

<div class="footdef"><sup><a id="fn.javascript" class="footnum" href="#fnr.javascript" role="doc-backlink">4</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Не нравится мне JS, к тому же без него блог невообразимо
быстро открывается и работает на моём Thinkpad X220.
</p></div></div>

<div class="footdef"><sup><a id="fn.org-publish-project" class="footnum" href="#fnr.org-publish-project" role="doc-backlink">5</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html">https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.clojure" class="footnum" href="#fnr.clojure" role="doc-backlink">6</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Во времена учёбы в университете я немного интересовался Lisp'ом,
почитывал «Structure and Interpretation of Computer Programs» и писал разные
простенькие программки на Clojure. Исходный код некоторых из них сохранился до
сих пор:
</p>
<ul class="org-ul">
<li><a href="https://codeberg.org/evgandr/jamendo-client">https://codeberg.org/evgandr/jamendo-client</a></li>
<li><a href="https://codeberg.org/evgandr/cs-alias-clj">https://codeberg.org/evgandr/cs-alias-clj</a></li>
</ul></div></div>

<div class="footdef"><sup><a id="fn.defcustom" class="footnum" href="#fnr.defcustom" role="doc-backlink">7</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/defcustom.html">https://www.gnu.org/software/emacs/manual/html_node/eintr/defcustom.html</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.quoting" class="footnum" href="#fnr.quoting" role="doc-backlink">8</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
См. <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Quoting.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/Quoting.html</a>
и <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.directory-files-recursively" class="footnum" href="#fnr.directory-files-recursively" role="doc-backlink">9</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Contents-of-Directories.html#index-directory_002dfiles_002drecursively">https://www.gnu.org/software/emacs/manual/html_node/elisp/Contents-of-Directories.html#index-directory_002dfiles_002drecursively</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.seq-filter" class="footnum" href="#fnr.seq-filter" role="doc-backlink">10</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Sequence-Functions.html#index-seq_002dfilter">https://www.gnu.org/software/emacs/manual/html_node/elisp/Sequence-Functions.html#index-seq_002dfilter</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.mapc" class="footnum" href="#fnr.mapc" role="doc-backlink">11</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Mapping-Functions.html#index-mapc">https://www.gnu.org/software/emacs/manual/html_node/elisp/Mapping-Functions.html#index-mapc</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.lang_code" class="footnum" href="#fnr.lang_code" role="doc-backlink">12</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Отдельный каталог для каждого языка нужен для плагина
<a href="https://github.com/untra/polyglot">jekyll-polyglot</a>, который предоставляет свободный от JavaScript способ
публиковать одну и ту же статью на разных языках.
</p></div></div>

<div class="footdef"><sup><a id="fn.regex-search" class="footnum" href="#fnr.regex-search" role="doc-backlink">13</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Regexp-Search.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/Regexp-Search.html</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.let-star" class="footnum" href="#fnr.let-star" role="doc-backlink">14</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Local-Variables.html#index-let_002a">https://www.gnu.org/software/emacs/manual/html_node/elisp/Local-Variables.html#index-let_002a</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.plist-get" class="footnum" href="#fnr.plist-get" role="doc-backlink">15</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Plist-Access.html#index-plist_002dget">https://www.gnu.org/software/emacs/manual/html_node/elisp/Plist-Access.html#index-plist_002dget</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.toc-org" class="footnum" href="#fnr.toc-org" role="doc-backlink">16</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Мои настройки для плагина toc-org, с которыми он начинает
понимать тег <code>:TOC_2_blog:</code> и генерирует ссылки на разделы, правильно
обрабатываемые при экспорте в HTML:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">use-package</span> toc-org
  <span style="color: #657b83; font-weight: bold;">:pin</span> melpa
  <span style="color: #657b83; font-weight: bold;">:hook</span> (org-mode . toc-org-mode)
  <span style="color: #657b83; font-weight: bold;">:config</span>
  (<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">toc-org-hrefify-blog</span> (str <span style="color: #b58900;">&amp;optional</span> hash)
    (concat <span style="color: #2aa198;">"* "</span> (toc-org-format-visible-link str))))
</pre>
</div></div></div>

<div class="footdef"><sup><a id="fn.make-process" class="footnum" href="#fnr.make-process" role="doc-backlink">17</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Asynchronous-Processes.html#index-make_002dprocess">https://www.gnu.org/software/emacs/manual/html_node/elisp/Asynchronous-Processes.html#index-make_002dprocess</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.message" class="footnum" href="#fnr.message" role="doc-backlink">18</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Displaying-Messages.html#index-message">https://www.gnu.org/software/emacs/manual/html_node/elisp/Displaying-Messages.html#index-message</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.propertize" class="footnum" href="#fnr.propertize" role="doc-backlink">19</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Properties.html#index-propertize">https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Properties.html#index-propertize</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.mapcan" class="footnum" href="#fnr.mapcan" role="doc-backlink">20</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Mapping-Functions.html#index-mapcan">https://www.gnu.org/software/emacs/manual/html_node/elisp/Mapping-Functions.html#index-mapcan</a>
</p></div></div>


</div>
</div>]]></content><author><name>Eugene Andrienko</name></author><category term="it" /><category term="emacs" /><summary type="html"><![CDATA[TOC&#xa0;&#xa0;&#xa0; Введение Первая версия генератора блога Генерация Jekyll-блога c помощью Emacs Lisp Преобразование org-файлов в HTML Копирование файлов в промежуточный каталог Редактирование HTML файлов Экспорт статических файлов Вызов Jekyll из Emacs Создание нового поста Запуск локального сервера Jekyll Очистка рабочего каталога Jekyll Интерфейс пользователя (transient) Оформление в виде плагина Загрузка плагина в Emacs Исходный код плагина Что ещё можно улучшить? Примечания Введение В этом посте я рассказываю о том как написал свой небольшой Emacs-плагин упрощающий работу с блогом на статическом движке. С этим плагином возможно писать и публиковать посты для блога в OrgMode несмотря на то, что практически все распространённые генераторы статических сайтов поддерживают в основном языки разметки Markdown, reStructuredText или HTML🌚.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://eugene-andrienko.com/assets/static/emacs-plugin-jekyll-blog-header.png" /><media:content medium="image" url="https://eugene-andrienko.com/assets/static/emacs-plugin-jekyll-blog-header.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="ru"><title type="html">Запуск Windows в bhyve на FreeBSD</title><link href="https://eugene-andrienko.com/it/2024/10/27/freebsd-bhyve-windows.html" rel="alternate" type="text/html" title="Запуск Windows в bhyve на FreeBSD" /><published>2024-10-27T00:00:00+03:00</published><updated>2024-10-27T00:00:00+03:00</updated><id>https://eugene-andrienko.com/it/2024/10/27/freebsd-bhyve-windows</id><content type="html" xml:base="https://eugene-andrienko.com/it/2024/10/27/freebsd-bhyve-windows.html"><![CDATA[<p>
В этой заметке собраны все шаги, необходимые для запуска гостевой Windows 7 с
помощью FreeBSD-шного гипервизора bhybe. И подводные камни, с которыми я
столкнулся.
</p>

<p>
Заметка основана на статье Vermaden: <a href="https://vermaden.wordpress.com/2023/08/18/freebsd-bhyve-virtualization/">FreeBSD Bhyve Virtualization</a>. Прямое
следование инструкциям оттуда дало мне зависающую при старте Windows, без
доступа к сети и без удалённого доступа — поэтому я написал свою инструкцию, с
парой дополнительных шагов.
</p>

<p>
Всё началось с того, что мне понадобилась одна старая Windows программа —
раньше для такого я бы просто использовал Wine. Но тут внезапно выяснилось,
что он уже не тот, что прежде — в 64-битную систему устанавливается только
64-битная версия, которая не может запустить установщик и на каждый чих просит
установить 32-битный Wine. Это можно сделать <del>при помощи костылей</del> скрипта
<code>pkg32.sh</code> от мейнтейнеров пакета, но даже с 32-битной версией всё равно ничего
не работает.
</p>

<p>
И тут в дело пошли старые «трюки». Раньше я просто устанавливал Windows в
VirtualBox, который вполне сносно и быстро работал при использовании
соответствующего модуля ядра и VirtualBox Guest Addons в гостевой системе. Во
FreeBSD же работать с виртуальными машинами ещё проще — есть «стандартный»
гипервизор <a href="https://bhyve.org/">bhyve</a> и менеджер виртуальных машин <a href="https://github.com/churchers/vm-bhyve">vm-bhyve</a>, с заявленной
поддержкой Windows.
</p>
<div class="outline-2">
<h2>TOC&#xa0;&#xa0;&#xa0;<span class="tag"></span></h2>
<div class="outline-text-2">
<ul class="org-ul">
<li><a href="#zfs-dataset">ZFS dataset под виртуальные машины (необязательная часть)</a></li>
<li><a href="#bhyve-setup">Установка bhyve и vm-bhyve</a></li>
<li><a href="#vm-profile">Профиль VM для Windows</a></li>
<li><a href="#network-setup">Настройка сети</a></li>
<li><a href="#windows-setup">Установка Windows</a></li>
<li><a href="#rdp-client">RDP клиент</a></li>
<li><a href="#main-bhyve-vm-commands">Основные команды для работы с VM</a></li>
</ul>
</div>
</div>
<div id="outline-container-zfs-dataset" class="outline-2">
<h2 id="zfs-dataset">ZFS dataset под виртуальные машины (необязательная часть)</h2>
<div class="outline-text-2" id="text-zfs-dataset">
<p>
У меня как раз валялся на полке ненужный 2.5" дюймовый жёсткий диск на
500 Гб. Он мне достался уже б/у, к тому же я его разок уронил и потому не
использовал в тех местах, где важна сохранность данных. А тут диск как раз
пришёлся к месту — можно хранить на нём свои «экспериментальные» виртуальные
машины. Винчестер немедленно был подключен третьим диском к моему <a href="https://eugene-andrienko.com/it/2024/07/07/thinkpad-x220-second-life">Thinkpad
X220</a> через OptiBay.
</p>

<p>
Дальше всё было стандартно. Был создан отдельный zfs pool на этом диске и
отдельный dataset, специально под VM:
</p>
<pre class="example">
# zpool create hdd /dev/ada1
# zfs create hdd/vms
# zfs set compression=gzip hdd/vms
# zpool status
  pool: hdd
 state: ONLINE
  scan: scrub repaired 0B in 00:00:01 with 0 errors on Sun Oct 27 01:51:43 2024
config:

        NAME        STATE     READ WRITE CKSUM
        hdd         ONLINE       0     0     0
          ada1      ONLINE       0     0     0

errors: No known data errors
# zfs list
NAME                                           USED  AVAIL  REFER  MOUNTPOINT
hdd                                           14.2G   435G    96K  /hdd
hdd/vms                                       14.2G   435G  8.07G  /hdd/vms
</pre>

<p>
Dataset <code>hdd/vms</code> нужен будет для vm-bhyve, чтобы он хранил все свои файлы на
этом жёстком диске, а не где-то на двух основных системных дисках.
</p>
</div>
</div>
<div id="outline-container-bhyve-setup" class="outline-2">
<h2 id="bhyve-setup">Установка bhyve и vm-bhyve</h2>
<div class="outline-text-2" id="text-bhyve-setup">
<p>
Тут тоже всё достаточно стандартно:
</p>
<ol class="org-ol">
<li><p>
Надо установить нужные пакеты:
</p>
<pre class="example">
# pkg install bhyve-firmware vm-bhyve rdesktop
</pre></li>
<li><p>
Включить vm-bhyve в <code>/etc/rc.conf</code> и передать ему созданный ранее dataset для
использования:
</p>
<pre class="example">
vm_enable="YES"
vm_dir="zfs:hdd/vms"
</pre></li>
<li><p>
Запустить vm-bhyve через:
</p>
<pre class="example">
# /usr/local/etc/rc.d/vm start
</pre></li>
<li><p>
Проинициализировать dataset:
</p>
<pre class="example">
# vm init
</pre>

<p>
После этого по пути <code>/hdd/vms/</code> должны быть созданы служебные каталоги vm-bhyve:
</p>
<pre class="example">
/hdd/vms % ls -la
total 12
drwxr-xr-x  7 root wheel    7B Oct 27 11:42 ./
drwxr-xr-x  3 root wheel    3B Oct 27 10:52 ../
drwxr-xr-x  2 root wheel    4B Oct 27 12:43 .config/
drwxr-xr-x  2 root wheel    2B Oct 27 01:46 .img/
drwxr-xr-x  2 root wheel    4B Oct 27 11:07 .iso/
drwxr-xr-x  2 root wheel    4B Oct 27 10:53 .templates/
</pre></li>
</ol>
</div>
</div>
<div id="outline-container-vm-profile" class="outline-2">
<h2 id="vm-profile">Профиль VM для Windows</h2>
<div class="outline-text-2" id="text-vm-profile">
<p>
По умолчанию в <code>/hdd/vms/.templates/</code> лежит только профиль <code>default</code>, с которым у
виртуальной машины с Windows не будет ни графики, ни звука, ни достаточной
памяти.
</p>

<p>
Здесь мне очень помогла статья Vermaden'а: <a href="https://vermaden.wordpress.com/2023/08/18/freebsd-bhyve-virtualization/">FreeBSD Bhyve
Virtualization</a>. Профиль был взят оттуда с небольшими доработками:
</p>
<ul class="org-ul">
<li>Убрана настройка <code>xhci_mouse</code> — с ней уже установленная система зависает на
этапе загрузки.</li>
<li><p>
Добавлена дополнительная память.
</p>

<pre class="example">
loader="uefi"
graphics="yes"
cpu=2
memory=6G
ahci_device_limit="8"
network0_type="e1000"
network0_switch="public"
disk0_type="ahci-hd"
disk0_name="disk0.img"
disk0_opts="sectorsize=512"
utctime="no"
bhyve_options="-s 8,hda,play=/dev/dsp,rec=/dev/dsp"
</pre>

<p>
Этот профиль был сохранён по пути <code>/hdd/vms/.templates/windows.conf</code>.
</p></li>
</ul>
</div>
</div>
<div id="outline-container-network-setup" class="outline-2">
<h2 id="network-setup">Настройка сети</h2>
<div class="outline-text-2" id="text-network-setup">
<p>
Почему-то этот пункт пропускается во многих руководствах — в итоге из хоста
нет доступа к установленной гостевой системе по сети.
</p>

<p>
Для начала создаётся switch <code>public</code> (он же указан выше в профиле <code>windows</code>):
</p>
<pre class="example">
# vm switch create public
</pre>

<p>
Потом ему надо указать адрес:
</p>
<pre class="example">
# vm switch address public 169.254.0.1/16
</pre>

<p>
Адрес я указывал уже после того, как установил Windows — посмотрел через
<code>ipconfig</code>, что система получила по DHCP:
</p>
<ul class="org-ul">
<li>IP address: 169.254.122.106</li>
<li>Netmask: 255.255.0.0</li>
</ul>

<p>
И соответственно установил адрес для свитча.
</p>

<pre class="example">
s vm switch list
NAME    TYPE      IFACE      ADDRESS         PRIVATE  MTU  VLAN  PORTS
public  standard  vm-public  169.254.0.1/16  no       -    -     -
</pre>
</div>
</div>
<div id="outline-container-windows-setup" class="outline-2">
<h2 id="windows-setup">Установка Windows</h2>
<div class="outline-text-2" id="text-windows-setup">
<p>
Это самая нетривиальная часть. Во многих руководствах пишут, что надо
специальным образом патчить ISO с дистрибутивом, чтобы подсунуть туда нужные
драйвера virtio. К счастью, в имевшейся у меня «сборке от Васяна» то ли уже
были нужные драйвера, то ли они не нужны при установке.
</p>

<p>
Что интересно, не каждый установочный ISO работает — некоторые просто не
загружаются. От чего это зависит я так и не выяснил. Поэтому на поиск
загружающегося дистрибутива придётся потратить немного времени&#x2026;
</p>

<p>
ISO файл нужно поместить по пути <code>/hdd/vms/.iso/</code>, после чего он должен
появиться в выводе команды <code>vm iso</code>:
</p>
<pre class="example">
# vm iso
DATASTORE           FILENAME
default             windows_eagle.iso
</pre>

<p>
Перед установкой надо иметь на машине какой-нибудь VNC-клиент — через него
можно будет подключиться к графическому интерфейсу гостевой системы и
произвести установку. Я использовал <a href="https://wiki.gnome.org/Apps/Vinagre">Vinagre</a> из-за его умения правильно
scal'ить рабочую область.
</p>

<p>
Установка состоит из ряда простых шагов:
</p>
<ol class="org-ol">
<li><p>
Создание виртуальной машины с диском на 50 Гб и с профилем <code>windows</code>:
</p>
<pre class="example">
# vm create -t windows -s 50G windows
</pre></li>
<li><p>
Запуск процедуры установки:
</p>
<pre class="example">
# vm install windows windows_eagle.iso
Starting windows
* found guest in /hdd/vms/windows
* booting...
</pre></li>
<li><p>
После п. 2 система будет ожидать подключения VNC-клиента по адресу из
таблицы:
</p>
<pre class="example">
# vm list
NAME      DATASTORE  LOADER  CPU  MEMORY  VNC           AUTO  STATE
windows  default    uefi    2    6G      0.0.0.0:5900  No    Locked (freebsd)
</pre></li>
<li><p>
Ну а дальше всё, как обычно :-)
</p>

<div class="figure">
<p><img src="/assets/static/windows7_setup.jpg" alt="windows 7 setup" align="center" />
</p>
<p style="text-align: center"><i>Установка Windows</i></p>
</div></li>
</ol>
</div>
</div>
<div id="outline-container-rdp-client" class="outline-2">
<h2 id="rdp-client">RDP клиент</h2>
<div class="outline-text-2" id="text-rdp-client">
<p>
Как и Vermaden, я решил, что удобнее всего будет подключаться к системе по
RDP. Слишком уж ценна возможность одновременно пробросить каталоги с хоста в
<b>уже запущенную</b> гостевую систему.
</p>

<p>
Для RDP в Windows надо:
</p>
<ul class="org-ul">
<li>Задать пароль для аккаунта, который будет подключаться по RDP.</li>
<li><p>
Включить удалённый доступ к системе:
</p>

<div class="figure">
<p><img src="/assets/static/windows7_remote_control.jpg" alt="windows 7 remote control settings" align="center" />
</p>
<p style="text-align: center"><i>Удалённый доступ к Windows</i></p>
</div></li>
<li><p>
Посмотреть IP адрес гостевой системы через <code>ipconfig</code>:
</p>

<div class="figure">
<p><img src="/assets/static/windows7_ipconfig.jpg" alt="windows cmd and ipconfig output" align="center" />
</p>
</div>

<p>
Теперь можно подключиться к гостевой Windows с FreeBSD-хоста при помощи
следующей команды:
</p>
<pre class="example">
$ rdesktop -u user -p 1234 -P -N -z -g 1600x900 -a 24 -r sound:local -r disk:DWNL=/home/drag0n/downloads/ -r clipboard:PRIMARYCLIPBOARD 169.254.122.106
</pre>

<p>
Вместо <code>user/1234</code> следует подставить свою пару логин/пароль. Опция <code>-r disk</code>
пробрасывает каталог <code>/home/drag0n/downloads/</code> с хоста в гостевую Windows как
сетевое хранилище <code>DWNL</code>. Сюда нужно подставить свои значения или же вовсе
убрать эту опцию. Опция <code>-r clipboard</code> пробрасывает один из clipboard'ов
X-сервера в гостевую систему и обратно.
</p>


<div class="figure">
<p><img src="/assets/static/windows7_dwnl.jpg" alt="Catalog from FreeBSD host as DWNL network storage" align="center" />
</p>
<p style="text-align: center"><i>Проброшенный каталог с FreeBSD-хоста</i></p>
</div>

<p>
Опция <code>-g 1600x900</code> в принципе устанавливает желаемое разрешение в окне с
гостевой VM. Но при использовании tiling wm, окно rdesktop будет растянуто
до размеров контейнера и разрешение экрана в Windows тоже подстроится под
это — что в принципе тоже удобно.
</p></li>
</ul>
</div>
</div>
<div id="outline-container-main-bhyve-vm-commands" class="outline-2">
<h2 id="main-bhyve-vm-commands">Основные команды для работы с VM</h2>
<div class="outline-text-2" id="text-main-bhyve-vm-commands">
<ol class="org-ol">
<li><p>
Запуск виртуальной машины:
</p>
<pre class="example">
# vm start windows
Starting windows
* found guest in /hdd/vms/windows
* booting...
</pre></li>
<li><p>
Остановка виртуальной машины:
</p>
<pre class="example">
shutdown /s /t 0
</pre>
<p>
:-)
</p></li>
<li><p>
Просмотр списка виртуальных машин:
</p>
<pre class="example">
# vm list
NAME     DATASTORE  LOADER  CPU  MEMORY  VNC  AUTO  STATE
windows  default    uefi    2    6G      -    No    Stopped
</pre></li>
<li><p>
Выключение виртуальной машины по питанию, на случай если Windows зависнет:
</p>
<pre class="example">
# vm poweroff windows
Are you sure you want to forcefully poweroff this virtual machine (y/n)?
</pre></li>
</ol>
</div>
</div>]]></content><author><name>Eugene Andrienko</name></author><category term="it" /><category term="freebsd" /><summary type="html"><![CDATA[В этой заметке собраны все шаги, необходимые для запуска гостевой Windows 7 с помощью FreeBSD-шного гипервизора bhybe. И подводные камни, с которыми я столкнулся.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://eugene-andrienko.com/assets/static/freebsd_win.jpg" /><media:content medium="image" url="https://eugene-andrienko.com/assets/static/freebsd_win.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="ru"><title type="html">Фотографии лета 2024</title><link href="https://eugene-andrienko.com/photo/2024/09/01/summer-photos-2024.html" rel="alternate" type="text/html" title="Фотографии лета 2024" /><published>2024-09-01T00:00:00+03:00</published><updated>2024-09-01T00:00:00+03:00</updated><id>https://eugene-andrienko.com/photo/2024/09/01/summer-photos-2024</id><content type="html" xml:base="https://eugene-andrienko.com/photo/2024/09/01/summer-photos-2024.html"><![CDATA[<div class="outline-2">
<h2>Стрит-фото</h2>
<div class="outline-text-2">
<p>
Всякие «геометричные» фото, благо город даёт множество материала:
</p>


<div class="figure">
<p><img src="/assets/static/20240629_155114.JPG" alt="Concrete ruins" align="center" />
</p>
<p style="text-align: center"><i>Бетонные руины</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240629_181025.JPG" alt="Arcs" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240629_192522.JPG" alt="HOPE as lamp" align="center" />
</p>
<p style="text-align: center"><i>Лампа HOPE</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240629_195620.JPG" alt="Reflection of street life" align="center" />
</p>
<p style="text-align: center"><i>Отражение уличной жизни</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240630_174348.JPG" alt="Bulletin board" align="center" />
</p>
<p style="text-align: center"><i>Подъездная доска объявлений</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240630_180103.JPG" alt="Sailor Moon vibes" align="center" />
</p>
<p style="text-align: center"><i>Вайбы Сейлор Мун</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240630_192455.JPG" alt="Angle" align="center" />
</p>
<p style="text-align: center"><i>Угол</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240820_165209.JPG" alt="Asphalt" align="center" />
</p>
<p style="text-align: center"><i>Поребрик</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240820_165244.JPG" alt="Peter and Paul Fortress" align="center" />
</p>
<p style="text-align: center"><i>Силуэт Петропавловской крепости</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240820_190739.JPG" alt="Reflection at handrail" align="center" />
</p>
<p style="text-align: center"><i>Отражение в поручне</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240821_091937.JPG" alt="Enemy of freedom" align="center" />
</p>
<p style="text-align: center"><i>Враг свободы</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240822_114817.JPG" alt="Feather" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240822_115028.JPG" alt="Opel Astra" align="center" />
</p>
<p style="text-align: center"><i>Opel Astra</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240822_115856.JPG" alt="Apples" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240822_121429.JPG" alt="Daisies" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240822_121717.JPG" alt="Tree" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240827_110557.JPG" alt="Chain link fencing on the pole" align="center" />
</p>
<p style="text-align: center"><i>Сетка-рабица на столбе</i></p>
</div>

<p>
Чёрный кот, 1 шт:
</p>


<div class="figure">
<p><img src="/assets/static/20240630_183332.JPG" alt="Black cat" align="center" />
</p>
</div>

<hr />


<div class="figure">
<p><img src="/assets/static/20240630_185336.JPG" alt="Toy bridge" align="center" />
</p>
<p style="text-align: center"><i>Игрушечный мост</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240630_202909.JPG" alt="Someon..." align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240630_203433.JPG" alt="End of epoch" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240630_222954.JPG" alt="Fireworks" align="center" />
</p>
<p style="text-align: center"><i>Салют</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240630_222957.JPG" alt="Fireworks" align="center" />
</p>
<p style="text-align: center"><i>Салют</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240713_180453.JPG" alt="Helicopter near the Peter and Paul Fortress" align="center" />
</p>
<p style="text-align: center"><i>Прокатный вертолёт рядом с Петропавловской крепостью</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240713_181404.JPG" alt="Helicopter exhaust" align="center" />
</p>
<p style="text-align: center"><i>Вертолётный выхлоп</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240713_235325.JPG" alt="Rostral columns fire" align="center" />
</p>
<p style="text-align: center"><i>Огонь на Ростральных колоннах</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240820_165336.JPG" alt="Stone eagle" align="center" />
</p>
<p style="text-align: center"><i>Каменный орёл</i></p>
</div>
</div>
</div>
<div class="outline-2">
<h2>Птицы</h2>
<div class="outline-text-2">

<div class="figure">
<p><img src="/assets/static/20240629_163333.JPG" alt="Gulls" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240630_191848.JPG" alt="Walking with a style" align="center" />
</p>
<p style="text-align: center"><i>На стиле</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240820_121214.JPG" alt="Jumping sparrow" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240820_121215.JPG" alt="Jumping sparrow" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240820_121216.JPG" alt="Jumping sparrow" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240822_115154.JPG" alt="Huh?" align="center" />
</p>
<p style="text-align: center"><i>А?</i></p>
</div>
</div>
</div>
<div class="outline-2">
<h2>Компьютеры</h2>
<div class="outline-text-2">
<p>
Все фотографии с фестиваля <a href="https://chaosconstructions.ru/">Chaos Constructions</a> 2024.
</p>


<div class="figure">
<p><img src="/assets/static/20240824_163655.JPG" alt="Microsha" align="center" />
</p>
<p style="text-align: center"><i>Компьютер «Микроша»</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240824_164736.JPG" alt="PDP-11/04" align="center" />
</p>
<p style="text-align: center"><i>PDP-11/04</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240824_164953.JPG" alt="PDP-11/04" align="center" />
</p>
<p style="text-align: center"><i>PDP-11/04</i></p>
</div>


<div class="figure">
<p><img src="/assets/static/20240824_170530.JPG" alt="Nice terminal" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240824_200506.JPG" alt="Nice terminal 2" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240824_175244.JPG" alt="Nice code on the screen" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240824_180900.JPG" alt="Window" align="center" />
</p>
</div>


<div class="figure">
<p><img src="/assets/static/20240824_181012.JPG" alt="Electronika BK 0010-01" align="center" />
</p>
<p style="text-align: center"><i>Электроника БК 0010-01</i></p>
</div>
</div>
</div>]]></content><author><name>Eugene Andrienko</name></author><category term="photo" /><summary type="html"><![CDATA[Стрит-фото Всякие «геометричные» фото, благо город даёт множество материала:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://eugene-andrienko.com/assets/static/header-summer-2024.jpg" /><media:content medium="image" url="https://eugene-andrienko.com/assets/static/header-summer-2024.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>